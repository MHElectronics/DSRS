@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Locales.Layout> localizer
@inject ILiveNotificationState notificationState
@inject IFAQService faqService
@implements IDisposable

<ul class="nav nav-pills nav-sidebar flex-column" data-widget="treeview" role="menu" data-accordion="false">
    <!-- Add icons to the links using the .nav-icon class
         with font-awesome or any other icon font library -->
    @*<li class="nav-item">
    <NavLink class="nav-link" href="counter" Match="NavLinkMatch.All">
    <i class="nav-icon fas fa-th"></i>
    <p>
    @localizer["Menu.Counter"]
    <span class="right badge badge-danger">New</span>
    </p>
    </NavLink>
    </li>
    <li class="nav-item">
    <NavLink class="nav-link" href="counter2" Match="NavLinkMatch.All">
    <i class="nav-icon fas fa-th"></i>
    <p>
    @localizer["Menu.Counter2"]
    <span class="right badge badge-danger">New</span>
    </p>
    </NavLink>
    </li> *@
    <AuthorizeView>
        <NotAuthorized>
            <li class="nav-item">
                <NavLink class="nav-link" href="login" Match="NavLinkMatch.All">
                    <i class="nav-icon fas fa-door-closed"></i>
                    <p>Login</p>
                </NavLink>
            </li>
        </NotAuthorized>
    </AuthorizeView>

    <AuthorizeView Roles="User">
        <Authorized>
            <li class="nav-item">
                <NavLink class="nav-link" href="map" Match="NavLinkMatch.All">
                    <i class="nav-icon fas fa-map"></i>
                    <p>
                        @localizer["Menu.Map"]
                        @* <span class="right badge badge-danger">New</span> *@
                    </p>
                </NavLink>
            </li>
            <li class="nav-item @(selectedGroups.Contains("pages") ? " menu-is-opening menu-open" : "")">
                <a class="nav-link" role="button" @onclick='(() => MenuHeaderClicked("pages"))'>
                    <i class="nav-icon fas fa-book"></i>
                    <p>
                        @localizer["Menu.Pages"]
                        <i class="fas fa-angle-left right"></i>
                    </p>
                </a>
                <ul class="nav nav-treeview">
                    <li class="nav-item">
                        <NavLink class="nav-link" href="databydate" Match="NavLinkMatch.All">
                            <i class="nav-icon fas fa-file"></i>
                            <p>
                                @localizer["Menu.DatabyDate"]
                            </p>
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="brta" Match="NavLinkMatch.All">
                            <i class="nav-icon fas fa-file"></i>
                            <p>
                                @localizer["Menu.BRTA"]
                            </p>
                        </NavLink>
                    </li>
                </ul>
            </li>


            <li class="nav-item @(selectedGroups.Contains("dataAnalysisByPurpose") ? " menu-is-opening menu-open" : "")">
                <a class="nav-link" role="button" @onclick='(() => MenuHeaderClicked("dataAnalysisByPurpose"))'>
                    <i class="nav-icon fas fa-th"></i>
                    <p>
                        @localizer["Menu.Reports"]
                        <i class="fas fa-angle-left right"></i>
                    </p>
                </a>
                <ul class="nav nav-treeview">

                    <li class="nav-item @(selectedGroups.Contains("reports") ? " menu-is-opening menu-open" : "")">
                        <a class="nav-link" role="button" @onclick='(() => MenuHeaderClicked("reports"))'>
                            <i class="nav-icon fas fa-th"></i>
                            <p>
                                Reports
                                <i class="fas fa-angle-left right"></i>
                            </p>
                        </a>
                        <ul class="nav nav-treeview">
                            <li class="nav-item">
                                <NavLink class="nav-link" href="grossweight" Match="NavLinkMatch.All">
                                    <i class="nav-icon fas fa-chart-bar"></i>
                                    <p>
                                        @localizer["Menu.GrossWeight"]
                                    </p>
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="overloaded" Match="NavLinkMatch.All">
                                    <i class="nav-icon fas fa-chart-line"></i>
                                    <p>
                                        @localizer["Menu.Overloaded"]
                                    </p>
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="overweight" Match="NavLinkMatch.All">
                                    <i class="nav-icon fas fa-chart-pie"></i>
                                    <p>
                                        @localizer["Menu.Overweight"]
                                    </p>
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="overloadedratio" Match="NavLinkMatch.All">
                                    <i class="nav-icon fas fa-chart-pie"></i>
                                    <p>
                                        @localizer["Menu.OverloadedRatio"]
                                    </p>
                                </NavLink>
                            </li>
                        </ul>
                    </li>
                    
                </ul>
            </li>
        </Authorized>
    </AuthorizeView>

    <AuthorizeView>
        <Authorized>
            <li class="nav-item">
                <NavLink class="nav-link" href="tutorial" Match="NavLinkMatch.All">
                    <i class="nav-icon fas fa-store"></i>
                    <p>
                        @localizer["Menu.Tutorial"]
                    </p>
                </NavLink>
            </li>
            <li class="nav-item">
                <NavLink class="nav-link" href="faq" Match="NavLinkMatch.All">
                    <i class="nav-icon fas fa-question-circle"></i>
                    <p>
                        @localizer["Menu.FAQ"]
                        @if (faqCount > 0)
                        {
                            <span class="right badge badge-danger">@faqCount</span>
                        }
                    </p>
                </NavLink>
            </li>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="Admin,AdvancedUser">
        <li class="nav-item">
            <NavLink class="nav-link" href="sqldirectsearch" Match="NavLinkMatch.All">
                <i class="nav-icon fas fa-filter"></i>
                <p>
                    @localizer["Menu.SQLDirectSearch"]
                </p>
            </NavLink>
        </li>
    </AuthorizeView>
    <AuthorizeView Roles="Admin">
        <Authorized>
            <li class="nav-item @(selectedGroups.Contains("admin") ? " menu-is-opening menu-open" : "")">
                <a class="nav-link" role="button" @onclick='(() => MenuHeaderClicked("admin"))'>
                    <i class="nav-icon fas fa-user-cog"></i>
                    <p>
                        @localizer["Menu.Admin"]
                        <i class="fas fa-angle-left right"></i>
                    </p>
                </a>
                <ul class="nav nav-treeview">
                    <li class="nav-item @(selectedGroups.Contains("userGroup") ? " menu-is-opening menu-open" : "")">
                        <a class="nav-link" role="button" @onclick='(() => MenuHeaderClicked("userGroup"))'>
                            <i class="nav-icon fas fa-user-cog"></i>
                            <p>
                                @localizer["Menu.UserGroup"]
                                <i class="fas fa-angle-left right"></i>
                            </p>
                        </a>
                        <ul class="nav nav-treeview">
                            <li class="nav-item">
                                <NavLink class="nav-link" href="user" Match="NavLinkMatch.All">
                                    <i class="nav-icon fas fa-users"></i>
                                    <p>
                                        @localizer["Menu.Users"]
                                    </p>
                                </NavLink>
                            </li>
                            <li class="nav-item">
                                <NavLink class="nav-link" href="stationaccess" Match="NavLinkMatch.All">
                                    <i class="nav-icon fas fa-key"></i>
                                    <p>
                                        @localizer["Menu.StationAccess"]
                                    </p>
                                </NavLink>
                            </li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="station" Match="NavLinkMatch.All">
                            <i class="nav-icon fas fa-list"></i>
                            <p>
                                @localizer["Menu.Station"]
                            </p>
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="classstatus" Match="NavLinkMatch.All">
                            <i class="nav-icon fas fa-layer-group"></i>
                            <p>
                                @localizer["Menu.ClassStatus"]
                            </p>
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="category" Match="NavLinkMatch.All">
                            <i class="nav-icon fas fa-layer-group"></i>
                            <p>
                                @localizer["Menu.Category"]
                            </p>
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="configuration" Match="NavLinkMatch.All">
                            <i class="nav-icon fas fa-cog"></i>
                            <p>
                                @localizer["Menu.ReportConfig"]
                            </p>
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="filelist" Match="NavLinkMatch.All">
                            <i class="nav-icon fas fa-file"></i>
                            <p>
                                @localizer["Menu.UploadedFiles"]
                            </p>
                        </NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="logmanagement" Match="NavLinkMatch.All">
                            <i class="nav-icon fas fa-file"></i>
                            <p>
                                Log Management
                            </p>
                        </NavLink>
                    </li>
                </ul>
            </li>
        </Authorized>
    </AuthorizeView>
</ul>

@code {
    private User currentUser { get; set; } = null;
    private List<string> selectedGroups { get; set; } = new();
    private int faqCount { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            currentUser = await customStateProvider.GetAuthorizedUser();

            if (currentUser is not null && currentUser.HasRole(nameof(UserRole.Admin)))
            {
                notificationState.OnChangeFAQ += FAQNotified;

                //Set Unanswered FAQ count
                faqCount = await faqService.GetUnansweredFAQCount();
                await notificationState.SetFAQCount(faqCount);

                //await this.InvokeAsync(StateHasChanged);
            }
        }
    }

    private void MenuHeaderClicked(string clickedGroup)
    {
        if (selectedGroups is null)
        {
            selectedGroups = new();
        }

        if (selectedGroups.Contains(clickedGroup))
        {
            selectedGroups.Remove(clickedGroup);
        }
        else
        {
            selectedGroups.Add(clickedGroup);
        }
    }
    private void FAQNotified(int count)
    {
        faqCount = count;
        this.InvokeAsync(StateHasChanged);
    }
    void IDisposable.Dispose()
    {
        if (currentUser is not null && currentUser.HasRole(nameof(UserRole.Admin)))
        {
            notificationState.OnChangeFAQ += FAQNotified;
        }
        notificationState.OnChangeFAQ -= FAQNotified;
    }
}