@inject AuthenticationStateProvider authStateProvider
@inject IWebHostEnvironment environment
@inject IAppState appState
@implements IDisposable
@rendermode InteractiveServer

@if (currentUser is not null)
{
    <div class="user-panel mt-3 pb-3 mb-3 d-flex">
        <div class="image">
            <img src="@imagePath" class="img-circle elevation-2" alt="User Image">
        </div>
        <div class="info">
            <a href="profile" class="d-block">@currentUser.Name</a>
        </div>
    </div>
}

<style>
    .user-panel:hover .img-circle {
        outline: 2px solid orangered;
    }
</style>

@code {
    private User? currentUser { get; set; }
    private string imagePath { get; set; } = "images/users/default.jpg";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        appState.OnProfileImageChange += ProfileImageChanged;

        if (firstRender)
        {
            var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            currentUser = await customStateProvider.GetAuthorizedUser();

            if(currentUser is not null)
            {
                imagePath = "images/users/" + currentUser.Id + ".jpg" + "?" + DateTime.Now.Ticks;
                await this.InvokeAsync(StateHasChanged);
            }
        }
    }
    private void ProfileImageChanged()
    {
        imagePath = "images/users/" + currentUser.Id + ".jpg" + "?" + DateTime.Now.Ticks;
        StateHasChanged();
    }
    void IDisposable.Dispose()
    {
        appState.OnProfileImageChange -= ProfileImageChanged;
    }
}
