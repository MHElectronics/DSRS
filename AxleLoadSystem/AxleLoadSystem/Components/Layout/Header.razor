@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject IUserActivityService userActivityService
@inject IJSRuntime JS
@rendermode InteractiveServer

<nav class="main-header navbar navbar-expand navbar-white navbar-light">
    <!-- Left navbar links -->
    <ul class="navbar-nav">
        <li class="nav-item">
            <a class="nav-link menu-opener"><i class="fas fa-bars"></i></a>
        </li>
        @* <li class="nav-item d-none d-sm-inline-block">
            <a href="index3.html" class="nav-link">Home</a>
        </li>
        <li class="nav-item d-none d-sm-inline-block">
            <a href="#" class="nav-link">Contact</a>
        </li> *@
    </ul>

    <!-- Right navbar links -->
    <ul class="navbar-nav ml-auto">
        @* <li class="nav-item" title="Full Screen View">
            <a class="nav-link" data-widget="fullscreen" href="#" role="button">
                <i class="fas fa-expand-arrows-alt"></i>
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" data-widget="control-sidebar" data-controlsidebar-slide="true" href="#" role="button">
                <i class="fas fa-th-large"></i>
            </a>
        </li> *@
        <li class="nav-item mt-1">
            <ThemeToggleButton/>
        </li>
        <li class="nav-item">
            <CultureSelector/>
        </li>
        @if (currentUser is not null)
        {
            <li class="nav-item" title="Logout" @onclick="Logout" role="button">
                <i class="fas fa-door-open fa-2x mt-4"></i>
            </li>
        }
        else
        {
            <li class="nav-item" title="Login" @onclick="Login" role="button">
                <i class="fas fa-door-closed fa-2x mt-4"></i>
            </li>
        }
    </ul>
</nav>

@code {
    private User? currentUser { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            if(customStateProvider is not null)
            {
                currentUser = await customStateProvider.GetAuthorizedUser();
            }
            
            await this.InvokeAsync(StateHasChanged);
        }
    }
    private void Login()
    {
        navigationManager.NavigateTo("/login", true);
    }
    private async Task Logout()
    {
        await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = currentUser.Name + " Logout Successfully", Activity = "Logout" });
        CustomAuthenticationStateProvider stateProvide = (CustomAuthenticationStateProvider)authStateProvider;
        await stateProvide.UpdateAuthenticationState(null);
        navigationManager.NavigateTo("/login", true);
    }
}
