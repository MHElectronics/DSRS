@page "/databydate"
@inherits BasePageComponent
@using AxleLoadSystem.Models
@inject IFileService fileService
@inject IStationService stationService
@inject IAppState appState
@inject IStringLocalizer<Locales.File> localizer
@inject IAxleLoadService loadService
@inject IFinePaymentService fineRepaymentService
@rendermode InteractiveServer

<PageTitle>List of Uploaded Files</PageTitle>

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">@localizer["ListofUploadedFiles"] </h3>
    </div>
    <div class="card-body">
        <div class="row">
            @if (stations is not null)
            {
                <div class="col-3">
                    <select class="form-control" @onchange="StationChanged">
                        <option value="0">-Select Station-</option>
                        @foreach (Station item in stations)
                        {
                            <option value="@item.StationId">@item.StationName</option>
                        }
                    </select>
                </div>
                <div class="col-3">
                    <div class="form-control">
                        <div class="col-12">
                            <div class="icheck-primary d-inline">
                                <input type="checkbox" id="checkType1" checked="@(fileType == 1)" @onchange="@(() => fileType = 1)" />
                                <label for="checkType1">Axle Load Data</label>
                            </div>
                            <div class="icheck-primary d-inline">
                                <input type="checkbox" id="checkType2" checked="@(fileType == 2)" @onchange="@(() => fileType = 2)" />
                                <label for="checkType2">Fine Payment Data</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-3">
                    <input type="date" id="date" @bind="selectedDate" class="form-control" />
                </div>
                <div class="col-3">
                    <button @onclick="Search" class="btn btn-primary">Search</button>
                </div>
            }
            else
            {
                <Loader />
            }
        </div>
        <hr />
        <div class="row">
            @if (station is null)
            {
                <p>No station is selected</p>
            }
            else
            {
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Daily Data</h3>
                    </div>
                    <div class="card-body">
                        <div class="data-table-container">
                            <DailyDataTableComponent AxleLoadData="@axleLoadData" Station="@station" FineRepaymentData="@fineRepaymentData" FileType="@fileType" @rendermode="InteractiveServer" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<Station> stations;
    private Station? station { get; set; } = null;
    private int fileType { get; set; } = 1;
    private DateTime selectedDate { get; set; } = DateTime.Today;

    private IQueryable<LoadData> axleLoadData { get; set; }
    private IQueryable<FinePayment> fineRepaymentData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        stations = await stationService.Get();
    }

    private async Task StationChanged(ChangeEventArgs e)
    {
        int stationId = Convert.ToInt32(e.Value);
        if (stationId == 0)
        {
            station = null;
        }
        else
        {
            station = stations.FirstOrDefault(s => s.StationId == stationId);
        }
    }
    private async Task Search()
    {
        if (fileType == 1)
        {
            LoadData loadData = new() { StationId = station.StationId, DateTime = selectedDate };
            IEnumerable<LoadData> items = await loadService.Get(loadData);

            axleLoadData = items.AsQueryable();
        }
        else
        {
            FinePayment finePayment = new() { StationId = station.StationId, DateTime = selectedDate };
            IEnumerable<FinePayment> items = await fineRepaymentService.Get(finePayment);

            fineRepaymentData = items.AsQueryable();
        }
    }
}
