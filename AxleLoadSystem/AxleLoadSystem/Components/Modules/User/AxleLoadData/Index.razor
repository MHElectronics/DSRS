@page "/databydate"
@inherits BasePageComponent
@using AxleLoadSystem.Models
@using Syncfusion.Blazor.Calendars
@inject IFileService fileService
@inject IStationService stationService
@inject IAppState appState
@inject IOverloadReportService reportService
@inject IConfigurationService configurationService
@inject IFinePaymentService fineRepaymentService
@inject AuthenticationStateProvider authStateProvider
@inject IStationAccessService stationAccessService
@rendermode InteractiveServer
@inject IStringLocalizer<Locales.File> localizer
@inject IStringLocalizer<Locales.Reports> localizerReports
@inject IStringLocalizer<Locales.CommonPages> localizerCommon
@inject IStringLocalizer<Locales.Resource> localizerResource

<PageTitleComponent Title="@localizerCommon["DataByDate"]">
</PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <ReportSelection OnParametersChanged="HandleParametersChanged" />
    </div>
    @if (!selectionEnabled)
    {
        <div class="card-footer">
            <div class="row">
                <div class="col-md-12 btn-group">
                    <button class="btn @(selectedType == "loaddata" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("loaddata"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.LoadData"]</button>
                    <button class="btn @(selectedType == "finepaymentdata" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("finepaymentdata"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.FinePaymentData"]</button>
                </div>

                @if (!string.IsNullOrEmpty(Summary))
                {
                    <label class="text-danger">@Summary</label>
                }
            </div>
        </div>
        
        @if (showHide)
        {
            if ((axleLoadData is null || axleLoadData.Count() == 0) && (finePaymentData is null || finePaymentData.Count() == 0))
            {
                <Loader />
            }
            if (showTable)
            {
                <div class="card-body">
                    <div class="data-table-container">
                        <DailyDataTableComponent AxleLoadData="@axleLoadData" Station="@station" FineRepaymentData="@finePaymentData" FileType="@fileType" @rendermode="InteractiveServer" />
                    </div>
                </div>
            }
        }
    }   
</div>

@code {
    private (IEnumerable<LoadData>, bool, string) report { get; set; }
    private (IEnumerable<FinePayment>, bool, string) reportFinePayment { get; set; }
    private Station? station { get; set; } = null;
    private int fileType { get; set; } = 1;
    private ReportParameters reportParameters { get; set; } = new();
    private IQueryable<LoadData> axleLoadData { get; set; } = null;
    private IQueryable<FinePayment> finePaymentData { get; set; } = null;
    private string selectedType { get; set; } = "";
    private string Summary { get; set; }
    private bool showTable { get; set; }
    private bool showHide { get; set; } = false;
    private bool isLoading { get; set; } = false;
    private List<int> stationAccess { get; set; } = new();
    private bool selectionEnabled = false;

    private async Task TypeChanged(string type)
    {
        selectedType = type;
        isLoading = showHide = true;
        axleLoadData = null;
        finePaymentData = null;
        showTable = false;
        Summary = "";
        ReportParameters reportParameters = await appState.GetReportParameters();
        StateHasChanged();
        if (reportParameters.Stations is not null)
        {
            if (selectedType.ToLower() == "loaddata")
            {
                fileType = 1;
                report = await reportService.Get(reportParameters);
                if (report.Item2)
                {
                    if (report.Item1.Count() > 0)
                    {
                        axleLoadData = report.Item1.AsQueryable();
                        showTable = true;
                    }
                    else
                    {
                        showHide = showTable = false;
                        Summary = "No value is available";
                    }
                }
                else
                {
                    Summary = report.Item3;
                }
            }
            else if (selectedType.ToLower() == "finepaymentdata")
            {
                fileType = 2;
                reportFinePayment = await fineRepaymentService.Get(reportParameters);
                if (reportFinePayment.Item2)
                {
                    if (reportFinePayment.Item1.Count() > 0)
                    {
                        finePaymentData = reportFinePayment.Item1.AsQueryable();
                        showTable = true;
                    }
                    else
                    {
                        showHide = showTable = false;
                        Summary = "No value is available";
                    }
                }
                else
                {
                    Summary = report.Item3;
                }
            }
        }
        isLoading = false;
    }
    private async Task HandleParametersChanged(bool parameters)
    {
        selectionEnabled = parameters;
    }
}
