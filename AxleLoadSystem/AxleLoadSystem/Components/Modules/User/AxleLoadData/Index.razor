@page "/databydate"
@inherits BasePageComponent
@using AxleLoadSystem.Models
@using Syncfusion.Blazor.Calendars
@inject IFileService fileService
@inject IStationService stationService
@inject IAppState appState
@inject IAxleLoadService loadService
@inject IConfigurationService configurationService
@inject IFinePaymentService fineRepaymentService
@rendermode InteractiveServer
@inject IStringLocalizer<Locales.File> localizer
@inject IStringLocalizer<Locales.Reports> localizerReports
@inject IStringLocalizer<Locales.CommonPages> localizerCommon

<PageTitleComponent Title="@localizerCommon["DataByDate"]">
</PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <div class="row">
            @if (stations is not null && configuration is not null)
            {
                <div class="col-md-3 col-sm-12">
                    <label>@localizerReports["Report.SelectStation"]</label>
                    <select class="form-control" @onchange="StationChanged">
                        <option value="0">-Select Station-</option>
                        @foreach (Station item in stations)
                        {
                            <option value="@item.StationId">@item.StationName</option>
                        }
                    </select>
                </div>
                <div class="col-md-3 col-sm-12">
                    <label>@localizerReports["Report.DateRange"]</label>
                    <SfDateRangePicker TValue="DateTime?" StartDate="@DateStart" EndDate="@DateEnd" Format="dd MMM yy" Min="@configuration.SystemStartDate" Max="DateTime.Now">
                        <DateRangePickerEvents TValue="DateTime?" ValueChange="@OnDateRangeChanged"></DateRangePickerEvents>
                    </SfDateRangePicker>
                </div>
                <div class="col-md-5 col-sm-12">
                    <label>@localizerReports["Report.FileType"]</label>
                    <div class="form-control">
                        <div class="col-12">
                            <div class="icheck-primary d-inline">
                                <input type="radio" id="checkType1" name="fileType" checked="@(fileType == 1)" @onchange="@(async() => await HandleFileTypeChange(1))" />
                                <label for="checkType1">Axle Load Data</label>
                            </div>
                            <div class="icheck-primary d-inline">
                                <input type="radio" id="checkType2" name="fileType" checked="@(fileType == 2)" @onchange="@(async() => await HandleFileTypeChange(2))" />
                                <label for="checkType2">Fine Payment Data</label>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col align-self-end">
                    <div class="form-group float-right align-bottom">
                        <label class="form-label">&nbsp;</label>
                        <button @onclick="Search" class="btn btn-primary">Search</button>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Summary))
                {
                    <label class="text-danger">@Summary</label>
                }
            }
            else
            {
                <Loader />
            }
        </div>
    </div>
    @if (station is null)
    {
        <p>No station is selected</p>
    }
    else
    {
        if (showHide)
        {
            <div class="card-header card-primary card-outline">
                <h3 class="card-title">@localizerCommon["DailyData"]</h3>
            </div>
            if (axleLoadData is null && fineRepaymentData is null)
            {
                <Loader />
            }
            if (showTable)
            {
                <div class="card-body">
                    <div class="data-table-container">
                        <DailyDataTableComponent AxleLoadData="@axleLoadData" Station="@station" FineRepaymentData="@fineRepaymentData" FileType="@fileType" @rendermode="InteractiveServer" />
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    private IEnumerable<Station> stations;
    private Station? station { get; set; } = null;
    private int fileType { get; set; } = 1;
    private DateTime DateStart { get; set; } 
    private DateTime DateEnd { get; set; } = DateTime.Today;
    private Configuration configuration { get; set; }
    private ReportParameters reportParameters { get; set; } = new();
    private IQueryable<LoadData> axleLoadData { get; set; }
    private IQueryable<FinePayment> fineRepaymentData { get; set; }
    private string Summary { get; set; }
    private bool showTable { get; set; }
    private bool showHide { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        stations = await stationService.Get();
        configuration = await configurationService.GetConfiguration();
        DateStart = configuration.SystemStartDate;
    }
    private async Task HandleFileTypeChange(int selectedFileType)
    {
        fileType = selectedFileType;
        showTable = false;
        showHide = false;
        axleLoadData = null;
        fineRepaymentData = null;
    }
    private async Task StationChanged(ChangeEventArgs e)
    {
        int stationId = Convert.ToInt32(e.Value);
        if (stationId == 0)
        {
            station = null;
        }
        else
        {
            station = stations.FirstOrDefault(s => s.StationId == stationId);
        }
    }
    private async Task OnDateRangeChanged(RangePickerEventArgs<DateTime?> args)
    {
        DateStart = args.StartDate ?? DateTime.Now;
        DateEnd = args.EndDate ?? DateTime.Now;
    }
    private async Task Search()
    {
        Summary = "";
        if (station is not null && station.StationId > 0)
        {
            showHide = true;
            if (fileType == 1)
            {
                reportParameters.Stations.Add(station.StationId);
                reportParameters.DateStart = DateStart;
                reportParameters.DateEnd = DateEnd;

                IEnumerable<LoadData> items = await loadService.Get(reportParameters);

                axleLoadData = items.AsQueryable();
                showTable = true;
                if (axleLoadData is null)
                {
                    showTable = false;
                    Summary = "No load data found";
                }
            }
            else if (fileType == 2)
            {
                reportParameters.Stations.Add(station.StationId);
                reportParameters.DateStart = DateStart;
                reportParameters.DateEnd = DateEnd;

                IEnumerable<FinePayment> items = await fineRepaymentService.Get(reportParameters);

                fineRepaymentData = items.AsQueryable();
                showTable = true;
                if (fineRepaymentData is null)
                {
                    showTable = false;
                    Summary = "No Fine Payment data found";
                }
            }
            reportParameters = new();
            StateHasChanged();
        }
        else
        {
            showHide = false;
            Summary = "Please Select Station";
        }
    }
}
