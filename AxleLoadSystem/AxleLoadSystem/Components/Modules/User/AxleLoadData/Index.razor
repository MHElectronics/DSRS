@page "/databydate"
@inherits BasePageComponent
@using AxleLoadSystem.Models
@inject IFileService fileService
@inject IStationService stationService
@inject IAppState appState
@inject IStringLocalizer<Locales.File> localizer
@inject IAxleLoadService loadService
@inject IFinePaymentService fineRepaymentService
@rendermode InteractiveServer

<PageTitle>Data by Date</PageTitle>

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">@localizer["DataByDate"] </h3>
    </div>
    <div class="card-body">
        <div class="row">
            @if (stations is not null)
            {
                <div class="col-3">
                    <select class="form-control" @onchange="StationChanged">
                        <option value="0">-Select Station-</option>
                        @foreach (Station item in stations)
                        {
                            <option value="@item.StationId">@item.StationName</option>
                        }
                    </select>
                </div>
                <div class="col-4">
                    <div class="form-control">
                        <div class="col-12">
                            <div class="icheck-primary d-inline">
                                <input type="radio" id="checkType1" name="fileType" checked="@(fileType == 1)" @onchange="@(() => fileType = 1)" />
                                <label for="checkType1">Axle Load Data</label>
                            </div>
                            <div class="icheck-primary d-inline">
                                <input type="radio" id="checkType2" name="fileType" checked="@(fileType == 2)" @onchange="@(() => fileType = 2)" />
                                <label for="checkType2">Fine Payment Data</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-3">
                    <input type="date" id="date" @bind="selectedDate" class="form-control" />
                </div>
                <div class="col-2">
                    <button @onclick="Search" class="btn btn-primary">Search</button>
                </div>
                @if (!string.IsNullOrEmpty(Summary))
                {
                    <label class="text-danger">@Summary</label>
                }
            }
            else
            {
                <Loader />
            }
        </div>
    </div>
    @if (station is null)
    {
        <p>No station is selected</p>
    }
    else
    {
        if (showTable)
        {
            <hr />
            <div class="card-header">
                <h3 class="card-title">Daily Data</h3>
            </div>
            <div class="card-body">
                <div class="data-table-container">
                    <DailyDataTableComponent AxleLoadData="@axleLoadData" Station="@station" FineRepaymentData="@fineRepaymentData" FileType="@fileType" @rendermode="InteractiveServer" />
                </div>
            </div>
        }
    }
</div>

@code {
    private IEnumerable<Station> stations;
    private Station? station { get; set; } = null;
    private int fileType { get; set; } = 1;
    private DateTime selectedDate { get; set; } = DateTime.Today;

    private IQueryable<LoadData> axleLoadData { get; set; }
    private IQueryable<FinePayment> fineRepaymentData { get; set; }
    private string Summary { get; set; }
    private bool showTable { get; set; }
    protected override async Task OnInitializedAsync()
    {
        stations = await stationService.Get();
    }

    private async Task StationChanged(ChangeEventArgs e)
    {
        int stationId = Convert.ToInt32(e.Value);
        if (stationId == 0)
        {
            station = null;
        }
        else
        {
            station = stations.FirstOrDefault(s => s.StationId == stationId);
        }
    }
    private async Task Search()
    {
        if (station is not null && station.StationId > 0)
        {
            if (fileType == 1)
            {
                LoadData loadData = new() { StationId = station.StationId, DateTime = selectedDate };
                IEnumerable<LoadData> items = await loadService.Get(loadData);

                axleLoadData = items.AsQueryable();
                showTable = true;
                if (axleLoadData is null)
                {
                    showTable = false;
                    Summary = "No load data found";
                }
            }
            else if (fileType == 2)
            {
                FinePayment finePayment = new() { StationId = station.StationId, DateTime = selectedDate };
                IEnumerable<FinePayment> items = await fineRepaymentService.Get(finePayment);

                fineRepaymentData = items.AsQueryable();
                showTable = true;
                if (fineRepaymentData is null)
                {
                    showTable = false;
                    Summary = "No Fine Payment data found";
                }
            }
        }
        else
        {
            Summary = "Please Select Station";
        }
    }
}
