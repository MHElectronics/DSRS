@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Linq.Expressions
@using Services.Helpers
@inject IStringLocalizer<Locales.Reports> localizer
@inject AuthenticationStateProvider authStateProvider
@inject IUserActivityService userActivityService
@inject IExportHelper exportHelper
@inject IJSRuntime jsRuntime

<div class="row">
    <div class="col-md-8 col-sm-12">
        <input @bind="searchQuery" placeholder="Search..." class="form-control" />
    </div>
    <div class="col-md-4 col-sm-12">
        <div class="btn btn-group">
            <button class="btn btn-primary" @onclick="ApplyFilter"> <i class="fa fa-filter">&nbsp;</i>Filter</button>
            <button class="btn btn-primary" @onclick="@(() => Export("csv"))"><i class="fa fa-download">&nbsp;</i>@localizer["Report.CSV"]</button>
        </div>
    </div>
</div>
<div class="grid">

    @if (FileType == 1)
    {
        if (AxleLoadData is null)
        {
            <Loader/>
        }
        else
        {
            <QuickGrid Items="@filteredAxleLoadData" Virtualize="true">
                <PropertyColumn Property="@(l => l.TransactionNumber)" Title="Transaction Number" />
                <PropertyColumn Property="@(l => l.LaneNumber)" Title="Lane Number" Sortable="true" />
                <PropertyColumn Property="@(l => l.DateTime)" Title="Date Time" Format="yyyy/MM/dd HH:mm:ss tt"/>
                <PropertyColumn Property="@(l => l.PlateZone)" Title="Plate Zone" Sortable="true" />
                <PropertyColumn Property="@(l => l.PlateSeries)" Title="Plate Series" />
                <PropertyColumn Property="@(l => l.PlateNumber)" Title="Plate Number" />
                <PropertyColumn Property="@(l => l.VehicleId)" Title="Vehicle ID" Sortable="true" />
                <PropertyColumn Property="@(l => l.NumberOfAxle)" Title="Number of Axles" Sortable="true" />
                <PropertyColumn Property="@(l => l.VehicleSpeed)" Title="Vehicle Speed (km/h)" />
                <PropertyColumn Property="@(l => l.Axle1)" Title="Axle 1 (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.Axle2)" Title="Axle 2 (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.Axle3)" Title="Axle 3 (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.Axle4)" Title="Axle 4 (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.Axle5)" Title="Axle 5 (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.Axle6)" Title="Axle 6 (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.Axle7)" Title="Axle 7 (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.AxleRemaining)" Title="Remaining Axles (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.GrossVehicleWeight)" Title="Gross Vehicle Weight (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.IsUnloaded)" Title="Is Unloaded" />
                <PropertyColumn Property="@(l => l.IsOverloaded)" Title="Is Overloaded" />
                <PropertyColumn Property="@(l => l.OverSizedModified)" Title="Over Sized Modified" />
                <PropertyColumn Property="@(l => l.Wheelbase)" Title="Wheelbase" Sortable="true" />
                <PropertyColumn Property="@(l => l.ClassStatus)" Title="Class Status" Sortable="true" />
                <PropertyColumn Property="@(l => l.RecognizedBy)" Title="Recognized By" Sortable="true" />
                <PropertyColumn Property="@(l => l.IsBRTAInclude)" Title="Is BRTA Included" />
                <PropertyColumn Property="@(l => l.LadenWeight)" Title="Laden Weight (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.UnladenWeight)" Title="Unladen Weight (kg)" Sortable="true" />
                <PropertyColumn Property="@(l => l.ReceiptNumber)" Title="Receipt Number" />
                <PropertyColumn Property="@(l => l.BillNumber)" Title="Bill Number" />
                <PropertyColumn Property="@(l => l.Axle1Time)" Title="Axle 1 Time" Sortable="true" Format="yyyy/MM/dd HH:mm:ss tt" />
                <PropertyColumn Property="@(l => l.Axle2Time)" Title="Axle 2 Time" Sortable="true" Format="yyyy/MM/dd HH:mm:ss tt" />
                <PropertyColumn Property="@(l => l.Axle3Time)" Title="Axle 3 Time" Sortable="true" Format="yyyy/MM/dd HH:mm:ss tt" />
                <PropertyColumn Property="@(l => l.Axle4Time)" Title="Axle 4 Time" Sortable="true" Format="yyyy/MM/dd HH:mm:ss tt" />
                <PropertyColumn Property="@(l => l.Axle5Time)" Title="Axle 5 Time" Sortable="true" Format="yyyy/MM/dd HH:mm:ss tt" />
                <PropertyColumn Property="@(l => l.Axle6Time)" Title="Axle 6 Time" Sortable="true" Format="yyyy/MM/dd HH:mm:ss tt" />
                <PropertyColumn Property="@(l => l.Axle7Time)" Title="Axle 7 Time" Sortable="true" Format="yyyy/MM/dd HH:mm:ss tt" />
            </QuickGrid>
        }

    }
    else if(FileType == 2)
    {
        if (FineRepaymentData is null)
        {
            <Loader/>
        }
        else
        {
            <QuickGrid Items="@filteredFineRepaymentData" Virtualize='true'>
                <PropertyColumn Property="@(l => l.TransactionNumber)" Title="Transaction Number"/>
                <PropertyColumn Property="@(l => l.LaneNumber)" Title="Lane Number" Sortable="true"/>
                <PropertyColumn Property="@(l => l.PaymentTransactionId)" Title="Payment Transaction ID" Sortable="true" />
                <PropertyColumn Property="@(l => l.DateTime)" Title="Date Time" Format="yyyy/MM/dd HH:mm:ss tt" />
                <PropertyColumn Property="@(l => l.IsPaid)" Title="Is Paid" Sortable="true" />
                <PropertyColumn Property="@(l => l.FineAmount)" Title="Fine Amount (Tk)" Sortable="true" />
                <PropertyColumn Property="@(l => l.PaymentMethod)" Title="Payment Method" Sortable="true" />
                <PropertyColumn Property="@(l => l.ReceiptNumber)" Title="Receipt Number"/>
                <PropertyColumn Property="@(l => l.BillNumber)" Title="Bill Number"/>
                <PropertyColumn Property="@(l => l.WarehouseCharge)" Title="Warehouse Charge (Tk)" Sortable="true" />
                <PropertyColumn Property="@(l => l.DriversLicenseNumber)" Title="Driver License Number" Sortable="true" />
                <PropertyColumn Property="@(l => l.TransportAgencyInformation)" Title="Transport Agency Information"  Sortable="true" />
            </QuickGrid>
        }  
    }
</div>

@code {
    [Parameter]
    public Station Station { get; set; }
    [Parameter]
    public int FileType { get; set; }
    [Parameter]
    public IQueryable<LoadData> AxleLoadData { get; set; }
    [Parameter]
    public IQueryable<FinePayment> FineRepaymentData { get; set; }

    private IQueryable<LoadData> filteredAxleLoadData { get; set;} 
    private IQueryable<FinePayment> filteredFineRepaymentData { get; set; }
    private User currentUser { get; set; }
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        if (FileType == 1)
        {
            filteredAxleLoadData = AxleLoadData;
        }
        else if (FileType == 2)
        {
            filteredFineRepaymentData = FineRepaymentData;
        }
    }
    private async Task ApplyFilter()
    {
        if (FileType == 1)
        {
            if (string.IsNullOrWhiteSpace(searchQuery))
            {
                filteredAxleLoadData = AxleLoadData;
            }
            else
            {
                filteredAxleLoadData = AxleLoadData.Where(GenerateSearchExpression());
            }
        }
        else if (FileType == 2)
        {
            if (string.IsNullOrWhiteSpace(searchQuery))
            {
                filteredFineRepaymentData = FineRepaymentData;
            }
            else
            {
                filteredFineRepaymentData = FineRepaymentData.Where(GenerateSearchExpressionFinePayment());
            }       
        }
        StateHasChanged(); 
    }
    private Expression<Func<LoadData, bool>> GenerateSearchExpression()
    {
        return load =>
            load.TransactionNumber.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.LaneNumber.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.DateTime.ToString("dd-MM-yyyy").Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.PlateZone.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.PlateSeries.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.PlateNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.VehicleId.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.NumberOfAxle.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.VehicleSpeed.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.Axle1.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.Axle2.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.Axle3.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.Axle4.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.Axle5.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.Axle6.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.Axle7.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.AxleRemaining.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.GrossVehicleWeight.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.IsUnloaded.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.IsOverloaded.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.OverSizedModified.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.Wheelbase.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.ReceiptNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || load.BillNumber.Contains(searchQuery, StringComparison.OrdinalIgnoreCase);
    }
    private Expression<Func<FinePayment, bool>> GenerateSearchExpressionFinePayment()
    {
        return payment =>
            payment.TransactionNumber.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.LaneNumber.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.PaymentTransactionId.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.DateTime.ToString("dd-MM-yyyy").Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.IsPaid.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.FineAmount.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.PaymentMethod.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.ReceiptNumber.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.BillNumber.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.WarehouseCharge.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.DriversLicenseNumber.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            || payment.TransportAgencyInformation.ToString().Contains(searchQuery, StringComparison.OrdinalIgnoreCase);
    }
    private async Task Export(string type)
    {
        List<(string Header, string FieldName, Type FieldType)> fields = new();
        if (FileType == 1)
        {
            LoadData loadData = new();
            fields.Add(("Transaction Number", nameof(loadData.TransactionNumber), loadData.TransactionNumber.GetType()));
            fields.Add(("Lane Number", nameof(loadData.LaneNumber), loadData.LaneNumber.GetType()));
            fields.Add(("Date Time", nameof(loadData.DateTime), loadData.DateTime.GetType()));
            fields.Add(("Plate Zone", nameof(loadData.PlateZone), loadData.PlateZone.GetType()));
            fields.Add(("Plate Series", nameof(loadData.PlateSeries), loadData.PlateSeries.GetType()));
            fields.Add(("Plate Number", nameof(loadData.PlateNumber), loadData.PlateNumber.GetType()));
            fields.Add(("Vehicle Id", nameof(loadData.VehicleId), loadData.VehicleId.GetType()));
            fields.Add(("Number Of Axle", nameof(loadData.NumberOfAxle), loadData.NumberOfAxle.GetType()));
            fields.Add(("Vehicle Speed", nameof(loadData.VehicleSpeed), loadData.VehicleSpeed.GetType()));
            fields.Add(("Axle1", nameof(loadData.Axle1), loadData.Axle1.GetType()));
            fields.Add(("Axle2", nameof(loadData.Axle2), loadData.Axle2.GetType()));
            fields.Add(("Axle3", nameof(loadData.Axle3), loadData.Axle3.GetType()));
            fields.Add(("Axle4", nameof(loadData.Axle4), loadData.Axle4.GetType()));
            fields.Add(("Axle5", nameof(loadData.Axle5), loadData.Axle5.GetType()));
            fields.Add(("Axle6", nameof(loadData.Axle6), loadData.Axle6.GetType()));
            fields.Add(("Axle7", nameof(loadData.Axle7), loadData.Axle7.GetType()));
            fields.Add(("Axle Remaining", nameof(loadData.AxleRemaining), loadData.AxleRemaining.GetType()));
            fields.Add(("Gross Vehicle Weight", nameof(loadData.GrossVehicleWeight), loadData.GrossVehicleWeight.GetType()));
            fields.Add(("IsUnloaded", nameof(loadData.IsUnloaded), loadData.IsUnloaded.GetType()));
            fields.Add(("IsOverloaded", nameof(loadData.IsOverloaded), loadData.IsOverloaded.GetType()));
            fields.Add(("Over Sized Modified", nameof(loadData.OverSizedModified), loadData.OverSizedModified.GetType()));
            fields.Add(("Wheelbase", nameof(loadData.Wheelbase), loadData.Wheelbase.GetType()));
            fields.Add(("Class Status", nameof(loadData.ClassStatus), loadData.ClassStatus.GetType()));
            fields.Add(("Recognized By", nameof(loadData.RecognizedBy), loadData.RecognizedBy.GetType()));
            fields.Add(("IsBRTAInclude", nameof(loadData.IsBRTAInclude), loadData.IsBRTAInclude.GetType()));
            fields.Add(("Laden Weight", nameof(loadData.LadenWeight), loadData.LadenWeight.GetType()));
            fields.Add(("Unladen Weight", nameof(loadData.UnladenWeight), loadData.UnladenWeight.GetType()));
            fields.Add(("Receipt Number", nameof(loadData.ReceiptNumber), loadData.ReceiptNumber.GetType()));
            fields.Add(("Bill Number", nameof(loadData.BillNumber), loadData.BillNumber.GetType()));
            fields.Add(("Axle1 Time", nameof(loadData.Axle1Time), typeof(DateTime?)));
            fields.Add(("Axle2 Time", nameof(loadData.Axle2Time), typeof(DateTime?)));
            fields.Add(("Axle3 Time", nameof(loadData.Axle3Time), typeof(DateTime?)));
            fields.Add(("Axle4 Time", nameof(loadData.Axle4Time), typeof(DateTime?)));
            fields.Add(("Axle5 Time", nameof(loadData.Axle5Time), typeof(DateTime?)));
            fields.Add(("Axle6 Time", nameof(loadData.Axle6Time), typeof(DateTime?)));
            fields.Add(("Axle7 Time", nameof(loadData.Axle7Time), typeof(DateTime?)));
        }
        else if (FileType == 2)
        {
            FinePayment finePayment = new();
            fields.Add(("Transaction Number", nameof(finePayment.TransactionNumber), finePayment.TransactionNumber.GetType()));
            fields.Add(("Lane Number", nameof(finePayment.LaneNumber), finePayment.LaneNumber.GetType()));
            fields.Add(("Payment Transaction Id", nameof(finePayment.PaymentTransactionId), finePayment.PaymentTransactionId.GetType()));
            fields.Add(("Date Time", nameof(finePayment.DateTime), finePayment.DateTime.GetType()));
            fields.Add(("IsPaid", nameof(finePayment.IsPaid), finePayment.IsPaid.GetType()));
            fields.Add(("Fine Amount", nameof(finePayment.FineAmount), finePayment.FineAmount.GetType()));
            fields.Add(("Payment Method", nameof(finePayment.PaymentMethod), finePayment.PaymentMethod.GetType()));
            fields.Add(("Receip tNumber", nameof(finePayment.ReceiptNumber), finePayment.ReceiptNumber.GetType()));
            fields.Add(("Bill Number", nameof(finePayment.BillNumber), finePayment.BillNumber.GetType()));
            fields.Add(("Warehouse Charge", nameof(finePayment.WarehouseCharge), finePayment.WarehouseCharge.GetType()));
            fields.Add(("Drivers License Number", nameof(finePayment.DriversLicenseNumber), finePayment.DriversLicenseNumber.GetType()));
            fields.Add(("Transport Agency Information", nameof(finePayment.TransportAgencyInformation), finePayment.TransportAgencyInformation.GetType()));
        }


        if (type == "csv")
        {
            MemoryStream stream = new();
            if (FileType == 1)
            {
                stream = await exportHelper.GenerateCSVStream<LoadData>(fields, filteredAxleLoadData.ToList(), null);
            }
            else if (FileType == 2)
            {
                stream = await exportHelper.GenerateCSVStream<FinePayment>(fields, filteredFineRepaymentData.ToList(), null);
            }

            using var streamRef = new DotNetStreamReference(stream);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", "Test.csv", streamRef);
            await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = "Data by Date CSV Data Downloaded", Activity = "Download" });
        }
        
    }

}
