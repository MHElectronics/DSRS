@using Microsoft.JSInterop
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<dialog @ref="_element" class="modal-sm">
    <div class="modal-dialog modal-dialog-centered">

        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Select Stations</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="()=>OnConfirmationChange(false)">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                @foreach(Station station in Stations)
                {
                    <span class="btn btn-primary" @onclick="@(() => StationClicked(station))">
                        @if(SelectedStations is not null && SelectedStations.Any(s=>s.StationId == station.StationId))
                        {
                            <i class="fa fa-check"></i>
                        }
                        @station.StationName
                    </span>
                }
            </div>
            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-light" data-dismiss="modal" @onclick="()=>OnConfirmationChange(false)"><i class="fa fa-times"></i> Close</button>
                <button type="button" class="btn btn-primary" @onclick="()=>OnConfirmationChange(true)">Complete</button>
            </div>
        </div>
    </div>
</dialog>

@code {
    private DotNetObjectReference<_StationSelector> _this;
    private ElementReference _element;

    [Parameter]
    public IEnumerable<Station> Stations { get; set; }
    [Parameter]
    public EventCallback<List<Station>> SelectionChanged { get; set; } = new();
    [Parameter]
    public EventCallback OnClose { get; set; }
    private bool Open { get; set; } = false;

    [Parameter]
    public List<Station> SelectedStations { get; set; }
    private IJSObjectReference module;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _this = DotNetObjectReference.Create(this);

            await JSRuntime.InvokeVoidAsync("blazorInitializeModal", _element, _this);
        }

        if (Open)
        {
            await JSRuntime.InvokeVoidAsync("blazorOpenModal", _element);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("blazorCloseModal", _element);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void StationClicked(Station station)
    {
        if(SelectedStations.Any(s=>s.StationId == station.StationId))
        {
            SelectedStations.Remove(station);
        }
        else
        {
            SelectedStations.Add(station);
        }
    }

    public async Task Show()
    {
        Open = true;
        await JSRuntime.InvokeVoidAsync("blazorOpenModal", _element);
    }
    [JSInvokable]
    public async Task Hide()
    {
        Open = false;
        await OnClose.InvokeAsync();
        await JSRuntime.InvokeVoidAsync("blazorCloseModal", _element);
    }

    protected async Task OnConfirmationChange(bool value)
    {
        Open = false;
        await JSRuntime.InvokeVoidAsync("blazorCloseModal", _element);
        // if (value == true)
        // {
        //     await SelectionChanged.InvokeAsync(SelectedStations);
        // }
    }
}