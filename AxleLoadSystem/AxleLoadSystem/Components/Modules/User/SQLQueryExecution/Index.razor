@page "/sqlexecution"
@using System.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager navigationManager
@inject ISQLQueriesService sqlQueryService
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.CommonPages> localizerCommon

<PageTitleComponent Title="@localizer["SQLDirectSearch"]"></PageTitleComponent>

@if (sqlQueries is not null)
{
    <div class="card card-primary card-outline">
        <div class="card-body">
            <table class="table table-striped table-hover table-sm">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Parameter(s)</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (SQLQueries item in sqlQueries)
                    {
                        string strEditUrl = "/SQLQueryRegistration/" + item.Id;
                        <tr>
                            <td>@item.Title</td>
                            <td>@item.Description</td>
                            <td>@item.Parameters</td>
                            <td class="text-right">
                                <div class="btn-group">
                                    <span class="btn btn-primary" @onclick="@(() => SetParameters(item))" title="Set Parameters"><i class="fa fa-list"></i> Select</span>
                                    <span class="btn btn-primary" @onclick="@(()=> navigationManager.NavigateTo(strEditUrl))" title="Edit"><i class="fa fa-edit"></i> Edit</span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (showParameters)
        {
            <div class="card-body">
                <hr/>
                <dl class="row">
                    <dt class="col-sm-4">Title</dt>
                    <dd class="col-sm-8">@selectedSqlQuery.Title</dd>
                    <dt class="col-sm-4">Description</dt>
                    <dd class="col-sm-8">@selectedSqlQuery.Description</dd>
                </dl>
                @if (parameters is not null)
                {
                    <table class="table table-striped table-hover table-sm">
                        <thead>
                            <tr>
                                <th>@localizerCommon["Parameter.Name"]</th>
                                <th>@localizerCommon["Parameter.Value"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var param in parameters)
                            {
                                <tr>
                                    <td>@@@param.Name</td>
                                    <td>
                                        <input type="text" @bind="param.Value" class="form-control" placeholder="@localizerCommon["Parameter.Value"]" min="1" maxlength="300" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="col-md-12">
                        <span class="btn btn-primary" @onclick="ExecuteWithParameters" title="Execute">Execute</span>
                        <span class="btn btn-primary" @onclick="Cancel" title="Cancel">Cancel</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Summary))
                {
                    <div class="col-md-12">
                        <label class="text-danger">@Summary</label>
                    </div>
                }
            </div>
        }

        @if (showLoading)
        {
            <Loader />
        }
        else if (results != null)
        {
            <div class="card-body">
                <div class="enable-table-scroll">
                    <ErrorBoundary @ref="errorBoundary">
                        <ChildContent>
                            <QuickGrid TGridItem="DataRow" ItemsProvider="provider" Virtualize="true" ItemSize="35">
                                @foreach (DataColumn column in results.Columns)
                                {
                                    <PropertyColumn Property="@(c => c[column.ColumnName])" Title="@column.ColumnName" Sortable="true"></PropertyColumn>
                                }
                            </QuickGrid>
                        </ChildContent>
                        <ErrorContent Context="ex">
                            @if (HandleError(@ex) == true)
                            {
                                <div class="alert alert-danger" role="alert">
                                    <h5>An Unhandled error occured. Exception: @ex.Message</h5>
                                </div>
                            }
                        </ErrorContent>
                    </ErrorBoundary>
                </div>
            </div>
        }
    </div>
}

@code {
    private IEnumerable<SQLQueries> sqlQueries { get; set; }

    private SQLQueries selectedSqlQuery { get; set; }
    private DataTable results;
    ErrorBoundary errorBoundary;
    private bool showLoading { get; set; } = false;
    private List<SqlSearchParameters> parameters { get; set; }
    private GridItemsProvider<DataRow>? provider;
    private string Summary { get; set; }

    private bool showParameters { get; set; }

    private class SqlSearchParameters
    {
        public string Name { get; set; } = "";
        public string Value { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        sqlQueries = await sqlQueryService.Get();
    }

    private void SetParameters(SQLQueries sqlSearch)
    {
        parameters = new();
        results = null;
        selectedSqlQuery = sqlSearch;

        if (sqlSearch.ParameterList.Count() == 0)
        {
            showParameters = false;
        }
        else
        {
            showParameters = true;
            foreach (string item in sqlSearch.ParameterList)
            {
                parameters.Add(new() { Name = item, Value = "" });
            }
        }
    }
    private void Cancel()
    {
        showParameters  = false;
        selectedSqlQuery = new();
        results = null;
    }
    private async Task ExecuteWithParameters()
    {
        await Execute(selectedSqlQuery);
    }
    private async Task Execute(SQLQueries sqlSearch)
    {
        Summary = "";
        results = null;
        if (parameters.Any(p => string.IsNullOrEmpty(p.Value)))
        {
            Summary = "Please enter values for " + String.Join(",", parameters.Where(p => string.IsNullOrEmpty(p.Value)).Select(p=>p.Name).ToList());
            return;
        }

        try
        {
            showLoading = true;
            // On each event, reset any error state
            errorBoundary?.Recover();

            await this.LoadData(sqlSearch);
        }
        catch (Exception ex)
        {
            Summary = "Error: " + ex.Message;
        }
        finally
        {
            showLoading = false;
        }
    }
    private async Task LoadData(SQLQueries sqlSearch)
    {
        Dictionary<string, object> dicParameters = new();

        if (parameters is not null)
        {
            foreach (SqlSearchParameters item in parameters.Where(p => !string.IsNullOrEmpty(p.Name) && !string.IsNullOrEmpty(p.Value)))
            {
                dicParameters.Add(item.Name, item.Value);
            }
        }

        results = await sqlQueryService.ExecuteSQLQuery(sqlSearch, dicParameters);
        var rows = results.AsEnumerable().ToList();
        var providerResult = GridItemsProviderResult
            .From<DataRow>(rows, rows.Count);
        provider = req => ValueTask.FromResult(providerResult);
    }

    private bool HandleError(Exception ex)
    {
        var msg = ex.Message;
        var trace = ex.StackTrace;
        // examine error here
        return true;
    }
}
