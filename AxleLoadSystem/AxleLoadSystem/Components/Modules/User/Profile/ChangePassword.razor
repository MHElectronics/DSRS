@inject AuthenticationStateProvider authStateProvider
@inject IUserService userService
@inject IAppState appState
@inject IStringLocalizer<Locales.User> localizerUser
@inject IStringLocalizer<Locales.Resource> localizerResources

<div class="card card-primary card-outline">
    <div class="card-header">
        <h5 class="card-title">@localizerUser["ChangePassword"]</h5>
    </div>

    @if (User != null)
    {
        <EditForm Model="@User" OnValidSubmit=@OnValidSubmit OnInvalidSubmit="@OnInvalidSubmit">
            <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
            <div class="card-body">
                <div class="row">
                    <div class="col-4">
                        <div class="form-group">
                            <label for="password">@localizerUser["OldPassword"]</label>
                            <input type="password" @bind="OldPasswordInput" class="form-control" placeholder="Old Password" id="OldPassword" maxlength="50" required/>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="form-group">
                            <label for="password">@localizerUser["NewPassword"]</label>
                            <input type="password" @bind="NewPasswordInput" class="form-control" placeholder="New Password" id="NewPassword" maxlength="50" required/>
                            @if (!string.IsNullOrWhiteSpace(NewPasswordInput))
                            {
                                <div class="progress" title="lenghth >= 8, Upper and Lower case, special character">
                                    <div class="progress-bar @(GetProgressColor(NewPasswordInput))" role="progressbar" style="width: @(GetPasswordStrength(NewPasswordInput) * 25)%;" aria-valuenow="@(GetPasswordStrength(NewPasswordInput) * 25)" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="form-group">
                            <label for="password">@localizerUser["ConfirmNewPassword"]</label>
                            <input type="password" @bind="PasswordMatch" class="form-control" placeholder="Confirm New Password" id="CNewPassword" maxlength="50" required/>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="form-group">
                    <div class="row">
                        <div class="col-12">
                            <button class="btn btn-primary" type="submit">@localizerResources["Button.Update"]</button>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>


@code {
    [Parameter]
    public User User { get; set; }
    string PasswordMatch, NewPasswordInput, OldPasswordInput;

    // protected async override Task OnParametersSetAsync()
    // {
    //     User = await ((CustomAuthenticationStateProvider)authStateProvider).GetAuthorizedUser();
    // }

    void OnInvalidSubmit()
    {
        Notification notification = new("Please enter valid data", Notification.NotificationType.Warning);
        appState.SetNotification(this, notification);
    }

    async Task OnValidSubmit(EditContext editContext)
    {
        Notification notification = new();
        User.Password = OldPasswordInput;
        if (PasswordMatch is null)
        {
            notification.Type = Notification.NotificationType.Warning;
            notification.Message = "Password field can not be empty";
            return;
        }
        if (NewPasswordInput.Equals(PasswordMatch))
        {
            if (OldPasswordInput.Equals(NewPasswordInput))
            {
                notification.Type = Notification.NotificationType.Warning;
                notification.Message = "Old and New Password can't be same";
            }
            else if (await userService.AuthenticateUser(User))
            {
                User.Password = PasswordMatch;

                User currentUser = await ((CustomAuthenticationStateProvider)authStateProvider).GetAuthorizedUser();
                if (await userService.ChangePassword(User, currentUser))
                {
                    notification.Type = Notification.NotificationType.Success;
                    notification.Message = "Password Changed Successfully";
                }
                else
                {
                    notification.Type = Notification.NotificationType.Failure;
                    notification.Message = "Password Changed failed";
                }
            }
            else
            {
                notification.Type = Notification.NotificationType.Failure;
                notification.Message = "Old Password Doesn't Match";
            }
        }
        else
        {
            notification.Type = Notification.NotificationType.Failure;
            notification.Message = "Confirm Password Doesn't Match";
        }
        OldPasswordInput = NewPasswordInput = PasswordMatch = string.Empty;
        appState.SetNotification(this, notification);
    }
    private int GetPasswordStrength(string password)
    {
        int strength = 0;

        if (password.Length >= 8 && password.Length <= 50)
        {
            strength++;
        }
        if (password.Any(char.IsUpper) && password.Any(char.IsLower))
        {
            strength++;
        }
        if (password.Any(char.IsDigit))
        {
            strength++;
        }
        if (password.Any(c => !char.IsLetterOrDigit(c)))
        {
            strength++;
        }

        return strength;
    }
    private string GetProgressColor(string password)
    {
        int progress = GetPasswordStrength(password) * 25;

        if (progress < 40)
        {
            return "bg-danger";
        }
        else if (progress >= 40 && progress < 60)
        {
            return "bg-warning";
        }
        else if (progress >= 60 && progress < 80)
        {
            return "bg-info";
        }
        else
        {
            return "bg-success";
        }
    }
}
