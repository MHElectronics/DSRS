@page "/changepassword"
@inject AuthenticationStateProvider authStateProvider
@inject IUserService userService

<div class="card">
    <div class="card-header">
        <h5 class="card-title">Change Password</h5>
    </div>

    @if (User != null)
    {
        <EditForm Model="@User" OnValidSubmit=@OnValidSubmit OnInvalidSubmit="@OnInvalidSubmit">
            <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-4">
                            <div class="form-group">
                                <h5>Update User Password: @User.Name</h5>
                                <label for="password">Old Password</label>
                                <InputText type="password" @bind-Value="User.Password" class="form-control" placeholder="Old Password" id="OldPassword" maxlength="50" />
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-group">
                                <label for="password">New Password</label>
                                <InputText type="password" @bind-Value="NewPasswordInput" class="form-control" placeholder="New Password" id="NewPassword" maxlength="50" />
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="form-group">
                                <label for="password">Confirm New Password</label>
                                <InputText type="password" @bind-Value="PasswordMatch" class="form-control" placeholder="Confirm New Password" id="CNewPassword" maxlength="50" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="form-group">
                        <div class="row">
                            <div class="col-12">
                                <div class="btn btn-group">
                                    <button class="btn btn-primary" type="submit">Update</button>
                                    <NavLink class="btn btn-primary" href="/">Back</NavLink>
                                </div>
                            </div>
                            <div class="col-12">
                                <CustomNotification Notification="notification" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</div>


@code {
    public User User { get; set; }
    private Notification notification { get; set; } = new();
    string PasswordMatch, NewPasswordInput;

    protected async override Task OnParametersSetAsync()
    {
        User = await ((CustomAuthenticationStateProvider)authStateProvider).GetAuthorizedUser();
    }

    void OnInvalidSubmit()
    {
        notification.Type = Notification.NotificationType.Warning;
        notification.Message = "Please enter valid data";
    }

    async Task OnValidSubmit(EditContext editContext)
    {
        notification.Message = "";

        if (await userService.AuthenticateUser(User))
        {
            if (NewPasswordInput.Equals(PasswordMatch))
            {
                User.Password = PasswordMatch;
                if (await userService.ChangePassword(User))
                {
                    notification.Type = Notification.NotificationType.Success;
                    notification.Message = "Password Changed Successfully";
                }
                else
                {
                    notification.Type = Notification.NotificationType.Failure;
                    notification.Message = "Password Changed failed";
                }
            }
            else
            {
                notification.Type = Notification.NotificationType.Failure;
                notification.Message = "Confirm Password Doesn't Match";
            }
        }
        else
        {
            notification.Type = Notification.NotificationType.Failure;
            notification.Message = "Old Password Doesn't Match";
        }
    }
}
