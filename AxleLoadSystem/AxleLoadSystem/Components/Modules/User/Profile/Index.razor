@page "/profile"
@inject AuthenticationStateProvider authStateProvider
@inject IWebHostEnvironment environment
@inject IAppState appState
@rendermode InteractiveServer

@if(currentUser is null)
{
    return;
}

<div class="row">
    <div class="col-4">
        <div class="card card-primary card-outline">
            <div class="card-body box-profile">
                    <div class="text-center">
                        <img class="profile-user-img img-fluid img-circle" src="@imagePath" alt="User profile picture">
                        <InputFile id="imageUpload" title="Edit profile picture" accept=".png, .jpg, .jpeg" class="d-none" OnChange="UploadImage" />
                        <label for="imageUpload" class="edit-icon fas fa-edit position-absolute" title="Click to change picture"></label>
                    </div>

                @* <h3 class="profile-username text-center">@currentUser.Name</h3> *@
                @* <p class="text-muted text-center">@currentUser.Role</p> *@

                <ul class="list-group list-group-unbordered mb-3">
                    <li class="list-group-item">
                        <b>Name</b> <a class="float-right">@currentUser.Name</a>
                    </li>
                    <li class="list-group-item">
                        <b>Email</b> <a class="float-right">@currentUser.Email</a>
                    </li>
                    <li class="list-group-item">
                        <b>Role(s)</b> <a class="float-right">@currentUser.Role</a>
                    </li>
                </ul>

                <div class="btn-group w-100">
                    <AuthorizeView Roles="Admin">
                        <Authorized>
                            <a href="FAQAdmin" class="btn btn-primary">Manage FAQ</a>
                        </Authorized>
                    </AuthorizeView>
                    <AuthorizeView Roles="User">
                        <Authorized>
                            <a href="MyFAQ" class="btn btn-primary">My FAQ</a>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
            <!-- /.card-body -->
        </div>
    </div>
    <div class="col-8">
        <ChangePassword User="@currentUser"/>
    </div>
</div>
<style>
    .edit-icon {
        font-size: 12px; /* Adjust size as needed */
        color: #fff; /* Change color as needed */
        cursor: pointer;
        right: auto;
        bottom: auto;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 5px;
        border-radius: 50%;
    }

        .edit-icon:hover {
            background-color: rgba(0, 0, 0, 0.7);
        }
</style>
@code {
    private User? currentUser { get; set; }
    private string imagePath { get; set; } = "images/users/default.jpg";
    private long maxFileSizeMB = 3;
    private int maxAllowedFiles = 1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            currentUser = await customStateProvider.GetAuthorizedUser();

            await LoadImage();
        }
    }

    private async Task LoadImage()
    {
        if (currentUser is not null)
        {
            imagePath = "images/users/" + currentUser.Id + ".jpg" + "?" + DateTime.Now.Ticks;
            await this.InvokeAsync(StateHasChanged);
        }
    }
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        IReadOnlyList<IBrowserFile> selectedFiles = e.GetMultipleFiles(e.FileCount);
        Notification notification = new();

        if (selectedFiles is not null)
        {
            if (selectedFiles.Count > maxAllowedFiles)
            {
                notification.Type = Notification.NotificationType.Warning;
                notification.Message = "Maximum number of files at a time is " + maxAllowedFiles;
                return;
            }
            else
            {
                foreach (var file in selectedFiles)
                {
                    if (file.Size > (1024 * 1024 * maxFileSizeMB))
                    {
                        notification.Type = Notification.NotificationType.Warning;
                        notification.Message = file.Name + " is too large (max limit 3 MB)";
                        return;
                    }
                    else if (file.Name.Length > 300)
                    {
                        notification.Type = Notification.NotificationType.Warning;
                        notification.Message = "File name too long. Allowed file name length is 300. [" + file.Name + "]";
                        return;
                    }
                    else
                    {
                        var path = Path.Combine(environment.WebRootPath, "images/users/", currentUser.Id + ".jpg");

                        using var readStream = file.OpenReadStream(file.Size);
                        using var memoryStream = new MemoryStream();

                        await readStream.CopyToAsync(memoryStream);

                        var byteFullFile = memoryStream.ToArray();

                        await System.IO.File.WriteAllBytesAsync(path, byteFullFile);

                        imagePath = "images/users/" + currentUser.Id + ".jpg" + "?" + DateTime.Now;
                        appState.NotifyProfileImageChange();
                    }
                }
            }
        }

        await LoadImage();
        await InvokeAsync(StateHasChanged);
    }
}
