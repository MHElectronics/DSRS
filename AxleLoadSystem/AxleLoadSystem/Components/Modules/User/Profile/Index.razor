@page "/profile"
@inject AuthenticationStateProvider authStateProvider
@inject IWebHostEnvironment environment
@rendermode InteractiveServer

@if(currentUser is null)
{
    return;
}

<div class="row">
    <div class="col-4">
        <div class="card card-primary card-outline">
            <div class="card-body box-profile">
                <div class="text-center">
                    <img class="profile-user-img img-fluid img-circle" src="images/users/@(hasImage ? currentUser.Id.ToString() : "default").jpg" alt="User profile picture">
                </div>

                <h3 class="profile-username text-center">@currentUser.Name</h3>

                @* <p class="text-muted text-center">@currentUser.Role</p> *@

                <ul class="list-group list-group-unbordered mb-3">
                    <li class="list-group-item">
                        <b>Role(s)</b> <a class="float-right">@currentUser.Role</a>
                    </li>
                    <li class="list-group-item">
                        <b>Last Login</b> <a class="float-right">@DateTime.Now.AddDays(-1)</a>
                    </li>
                </ul>

                <a href="MyFAQ" class="btn btn-primary btn-block"><b><i class="fa fa-question-circle"></i>My FAQ Questions</b></a>
            </div>
            <!-- /.card-body -->
        </div>
    </div>
    <div class="col-8">
        <ChangePassword User="@currentUser"/>
    </div>
</div>

@code {
    private User? currentUser { get; set; }
    private bool hasImage { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            currentUser = await customStateProvider.GetAuthorizedUser();

            if (currentUser is not null)
            {
                var path = Path.Combine(environment.WebRootPath, "images/users/", currentUser.Id + ".jpg");
                hasImage = File.Exists(path);
                await this.InvokeAsync(StateHasChanged);
            }
        }
    }
}
