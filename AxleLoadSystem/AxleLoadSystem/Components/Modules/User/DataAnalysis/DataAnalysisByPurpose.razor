@page "/dataanalysis"
@using BOL.Helpers
@using Services
@using Syncfusion.Blazor
@using Syncfusion.PdfExport;
@using Syncfusion.Blazor.Charts
@using System.Globalization
@inject IAxleLoadService loadService
@inject NavigationManager NavigationManager

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">Monthly Report</h3>
    </div>
    <div class="card-body">
        <ReportSelection OnParametersChanged="HandleParametersChanged" />
    </div>
</div>
@if (Chartview && ChartData is not null)
{
     <div class="control-section" align='center'>
        <button Id="button" Content="Export" @onclick="Export" IsPrimary="true" class="btn btn-primary float-left">Export</button>
        
        <SfChart @ref="@chartInstance" Title="@ChartTitle" Width="@Width" Theme="@Theme">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            
            <ChartPrimaryXAxis Title="@YAxisTitle" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
            </ChartPrimaryXAxis>
            
            <ChartPrimaryYAxis Title="@XAxisTitle">
                <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
            </ChartPrimaryYAxis>

            <ChartSeriesCollection>
                <ChartSeries Name="Number of Overloaded Vehicles" ColumnWidth="0.5" DataSource="@ChartData" XName="MonthName" YName="OverloadVehicle" Width="2" Type="ChartSeriesType.StackingColumn" EnableTooltip="true">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="LabelPosition.Top">
                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                    <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                </ChartSeries>
            
                <ChartSeries Name="Total Vehicles" ColumnWidth="0.5" DataSource="@ChartData" XName="MonthName" YName="TotalVehicle" Width="2" Type="ChartSeriesType.StackingColumn" EnableTooltip="true">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="LabelPosition.Top">
                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                    <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
        </SfChart>
    </div> 
    

}
@if(ChartData is not null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Month</th>
                <th>Total Vehicle</th>
                <th>Overloaded Vehicle</th>
            </tr>
        </thead>
        <tbody>
            @foreach(AxleLoadReport item in ChartData)
            {
                <tr>
                    <td>@item.MonthName</td>
                    <td>@item.TotalVehicle</td>
                    <td>@item.OverloadVehicle</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Theme Theme { get; set; } = 0;
    public string Width { get; set; } = "90%";
    private SfChart chartInstance;
    public string FileName { get; set; } = "Charts";
    public string Format { get; set; } = "{value} GW";
    public string ChartTitle { get; set; } = "";
    public string XAxisTitle { get; set; } = "";
    public string YAxisTitle { get; set; } = "";

    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;

    private bool Chartview { get; set; }

    public IEnumerable<AxleLoadReport> ChartData { get; set; }
    public IQueryable<List<LoadData>> listLoadData { get; set; }

    private Dictionary<string, IEnumerable<AxleLoadReport>> FilteredChartData;

    void axisLabel(AxisLabelRenderEventArgs args)
    {
        if (args.Value > 999999 || args.Value < -999999)
        {
            args.Text = args.Value.ToString("0,,.##M", CultureInfo.InvariantCulture);
        }
    }

    private async Task Export(MouseEventArgs args)
    {
        await chartInstance.ExportAsync(ExportType.PNG, FileName, allowDownload: true, isBase64: true);
    }

    public void ExportComplete(ExportEventArgs exportEventArgs)
    {
        string base64 = exportEventArgs.Base64;
    }

    private async Task HandleParametersChanged(ReportParameters parameters)
    {
        if (parameters.Stations is not null && parameters.Stations.Any())
        { 
            IEnumerable<AxleLoadReport> Data = await loadService.GetMonthlyOverloadedReport(parameters);
            if (Data is not null)
            {
                ChartData = Data;
                ChartTitle = "Number of Overloaded Vehicle " + "( " + parameters.DateStart.ToString("dd MMM yyy") + " to " + parameters.DateEnd.ToString("dd MMM yyy") + " )" + " Data Analysis";
                XAxisTitle = "Number of Vehicles (Units)";
                YAxisTitle = "Months";
                Chartview = true;
            }
        }
    }
}
