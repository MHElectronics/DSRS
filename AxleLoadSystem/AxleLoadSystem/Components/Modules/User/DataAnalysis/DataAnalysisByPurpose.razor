@page "/dataanalysis"
@using BOL.Helpers
@using Services
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.PdfExport;
@using Syncfusion.Blazor.Charts
@using System.Globalization
@inject IAxleLoadService loadService
@inject NavigationManager NavigationManager

<h3>Data Analysis By Purpose</h3>

<ReportSelection OnParametersChanged="HandleParametersChanged" />
@if (Chartview)
{
    <div class="control-section" align='center'>
        <SfButton Id="button" Content="Export" @onclick="Export" IsPrimary="true" CssClass="e-flat float-right"></SfButton>
        <SfChart @ref="@chartInstance" Title="@ChartTitle" Width="@Width" Theme="@Theme">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartEvents OnAxisLabelRender="axisLabel"></ChartEvents>
            <ChartPrimaryXAxis Title="@XAxisTitle" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="LabelIntersectAction.Rotate45">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Title="@YAxisTitle">
                <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryYAxis>
            <ChartSeriesCollection>
                <ChartSeries ColumnWidth="0.5" DataSource="@ChartData" XName="OverloadedVehicles" YName="Month" Width="2" Name="August" Type=ChartSeriesType.Bar>
                    <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                </ChartSeries>
            </ChartSeriesCollection>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
        </SfChart>

    </div>
}
@code {
    private Theme Theme { get; set; } = 0;
    public string Width { get; set; } = "90%";
    private SfChart chartInstance;
    public string FileName { get; set; } = "Charts";
    public string Format { get; set; } = "{value} GW";
    public string ChartTitle { get; set; } = "Title";
    public string XAxisTitle { get; set; } = "Number of Axle (Allowable Weight)";
    public string YAxisTitle { get; set; } = "Gross Vehicle Weight";

    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;

    public ReportParameters reportParameters { get; set; }
    public DateTime startDate { get; set; }
    public DateTime endDate { get; set; }
    public int NumberofAxle { get; set; }
    public int ClassStatus { get; set; }
    public int WheelBase { get; set; }
    public bool IsOverloaded { get; set; }

    private bool Chartview { get; set; }

    public IEnumerable<AxleLoadReport> ChartData { get; set; }
    public IQueryable<List<LoadData>> listLoadData { get; set; }

    public Station station { get; set; }
    private Dictionary<string, IEnumerable<AxleLoadReport>> FilteredChartData;

    void axisLabel(AxisLabelRenderEventArgs args)
    {
        if (args.Value > 999999 || args.Value < -999999)
        {
            args.Text = args.Value.ToString("0,,.##M", CultureInfo.InvariantCulture);
        }
    }

    private async Task Export(MouseEventArgs args)
    {
        await chartInstance.ExportAsync(ExportType.PNG, FileName, allowDownload: true, isBase64: true);
    }

    public void ExportComplete(ExportEventArgs exportEventArgs)
    {
        string base64 = exportEventArgs.Base64;
    }

    private async Task HandleParametersChanged(ReportParameters parameters)
    {
        reportParameters = parameters;
        await LoadChartData();
    }
    private async Task LoadChartData()
    {
        if (reportParameters.Stations is not null && reportParameters.Stations.Any())
        {
            Chartview = true;
            ChartTitle = "Number of Overloaded Vehicle";
            XAxisTitle = "Number of Vehicles (Units)";
            YAxisTitle = "Months";
            ChartData = await loadService.GetMonthlyOverloadedReport(reportParameters.Stations, reportParameters.DateStart, reportParameters.DateEnd);
        }
    }

}
