@inject IStationService stationService
@inject IWIMScaleService wimService
@inject IConfigurationService configurationService
@inject IClassStatusService classStatusService
@inject IAppState appState
@inject AuthenticationStateProvider authStateProvider
@inject IStationAccessService stationAccessService
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResources

@using BOL.CustomModels
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Navigations
@rendermode InteractiveServer

@if (appState is null || stations is null)
{
    return;
}

@if (stations is null || stations.Count() == 0)
{
    <p class="info-danger">No Station Found</p>
}
else if (selectionEnabled && reportParameters is not null && configuration is not null)
{
    <div class="row">
        @if (stations is not null)
        {
            string strIconAll = "fa-square";
            string strColorAll = "btn-primary";
            if (stations.Count() == selectedStations?.Count())
            {
                strIconAll = "fa-check-square";
                strColorAll = "btn-success";
            }
            else if (selectedStations?.Count() == 0)
            {
                strColorAll = "btn-danger";
            }
            <div class="btn-group-vertical col-md-12" role="group">

                @for (int i = -1; i < stations.Count();)
                {
                    <div class="btn-group">
                        @for (int j = 0; j < 6; j++)
                        {
                            if (i >= stations.Count())
                            {
                                break;
                            }
                            if (i == -1)
                            {
                                <span class="btn @strColorAll col-md-2 text-left" @onclick="@(() => AllStationClicked())" title="Select/Unselect All ALCS">
                                    <i class="fas @strIconAll"></i><span class="ms-2">&nbsp;All</span>
                                </span>
                            }
                            else
                            {
                                var filteredStations = stations.OrderBy(s => s.StationName);
                                Station item = filteredStations.ElementAt(i);
                                string strIcon = "fa-square";
                                string btnClass = "btn-danger";
                                @if (selectedStations is not null && selectedStations.Any(s => s.StationId == item.StationId))
                                {
                                    strIcon = "fa-check-square";
                                    btnClass = "btn-success";
                                }
                                <span class="btn @btnClass col-md-2 text-left" @onclick="@(() => StationClicked(item))">
                                    <i class="fas @strIcon"></i><span class="ms-2">&nbsp; @item.StationName</span>
                                </span>
                            }

                            i++;
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <Loader />
        }

        <div class="col-md-6">
            <label>@localizer["Report.DateRange"]</label>
            <SfDateRangePicker TValue="DateTime?" StartDate="@reportParameters.DateStart" EndDate="@reportParameters.DateEnd" Min="@configuration.SystemStartDate" Max="DateTime.Now">
                <DateRangePickerEvents TValue="DateTime?" ValueChange="@OnDateRangeChanged"></DateRangePickerEvents>
            </SfDateRangePicker>
        </div>
        <div class="col-md-3">
            <label>@localizer["Report.StartTime"]</label>
            <SfTimePicker TValue="TimeOnly" Placeholder="Select Start Time" Value="@reportParameters.TimeStart" Format="HH:mm" CssClass="form-control">
                <TimePickerEvents TValue="TimeOnly" ValueChange="@onTimeStartChange"></TimePickerEvents>
            </SfTimePicker>
        </div>


        <div class="col-md-3">
            <label>@localizer["Report.EndTime"]</label>
            <SfTimePicker TValue="TimeOnly" Placeholder="Select End Time" Value="@reportParameters.TimeEnd" Format="HH:mm" CssClass="form-control">
                <TimePickerEvents TValue="TimeOnly" ValueChange="@onTimeEndChange"></TimePickerEvents>
            </SfTimePicker>
        </div>

        <div class="col-md-6">
            <label>@localizer["Report.WimScale"]</label>
            @if (selectedWIMScales is not null && wims is not null)
            {
                <div class="btn-group form-control p-0">
                    @foreach (string item in Enum.GetNames(typeof(WIMType)))
                    {
                        int value = (int)Enum.Parse(typeof(WIMType), item);
                        List<WIMScale> wimsByType = wims.Where(w => w.Type == value).ToList();
                        @if(wimsByType.Count() > 0)
                        {
                            string allIcon = wims.Count(w => w.Type == value) == wimsByType.Count(w => selectedWIMScales.Contains(w.LaneNumber)) ? "fa-check-square" : "fa-square";
                            <span class="btn btn-sm btn-info text-left" @onclick="@(() => AllWIMTypeClicked(value))">
                                <i class="fa @allIcon"></i>
                                @(((WIMType)Enum.ToObject(typeof(WIMType), value)).ToDescription())
                            </span>
                        }
                    }
                </div>
                @if (wims.Any(w => w.IsUpbound))
                {
                    List<WIMScale> wimsUpbound = wims.Where(w => w.IsUpbound).ToList();
                    string allIcon = wims.Count(w => w.IsUpbound) == wimsUpbound.Count(w => selectedWIMScales.Contains(w.LaneNumber)) ? "fa-check-square" : "fa-square";
                    <div class="btn-group form-control p-0">
                        <span class="btn btn-sm btn-primary text-left" @onclick="@(() => AllUpDownboundClicked(true))"><i class="fa @allIcon"></i> Upbound: </span>
                        @foreach (WIMScale item in wimsUpbound.OrderBy(w => w.LaneNumber))
                        {
                            string icon = selectedWIMScales.Contains(item.LaneNumber) ? "fa-check-square" : "fa-square";
                            <span class="btn btn-sm btn-primary text-left" @onclick="@(()=>LaneClicked(item.LaneNumber))">
                                <i class="fa @icon"></i>
                                @item.LaneNumber (@(((WIMType)Enum.ToObject(typeof(WIMType), item.Type)).ToDescription()))
                            </span>
                        }
                    </div>
                }
                @if (wims.Any(w => !w.IsUpbound))
                {
                    List<WIMScale> wimsDownbound = wims.Where(w => !w.IsUpbound).ToList();
                    string allIcon = wims.Count(w => !w.IsUpbound) == wimsDownbound.Count(w => selectedWIMScales.Contains(w.LaneNumber)) ? "fa-check-square" : "fa-square";
                    <div class="btn-group form-control p-0">
                        <span class="btn btn-sm btn-secondary text-left" @onclick="@(() => AllUpDownboundClicked(false))"><i class="fa @allIcon"></i> Downbound: </span>
                        @foreach (WIMScale item in wimsDownbound.OrderBy(w => w.LaneNumber))
                        {
                            string icon = selectedWIMScales.Contains(item.LaneNumber) ? "fa-check-square" : "fa-square";
                            <span class="btn btn-sm btn-secondary text-left" @onclick="@(()=>LaneClicked(item.LaneNumber))">
                                <i class="fa @icon"></i> @item.LaneNumber (@(((WIMType)Enum.ToObject(typeof(WIMType), item.Type)).ToDescription()))
                            </span>
                        }
                    </div>
                }
            }
            else
            {
                <div class="btn-group form-control p-0">
                    @foreach (string item in Enum.GetNames(typeof(WIMType)))
                    {
                        int value = (int)Enum.Parse(typeof(WIMType), item);
                        string allIcon = reportParameters.WIMType == value ? "fa-check-circle" : "fa-circle";
                        <span class="btn btn-sm btn-info text-left" @onclick="@(() => CommonWIMTypeClicked(value))">
                            <i class="fa @allIcon"></i>
                            @(((WIMType)Enum.ToObject(typeof(WIMType), value)).ToDescription())
                        </span>
                    }
                </div>
                <span class="btn-group form-control p-0">
                    <span class="btn btn-sm btn-primary text-left" @onclick="@(()=> CommonUpDownboundClicked(true))"><i class="fa @(reportParameters.UpboundDirection ? "fa-check-circle": "fa-circle")"></i> Upbound Direction</span>
                    <span class="btn btn-sm btn-secondary text-left" @onclick="@(()=> CommonUpDownboundClicked(false))"><i class="fa @(reportParameters.DownboundDirection ? "fa-check-circle": "fa-circle")"></i> Downbound Direction</span>
                    <span class="btn btn-sm btn-danger text-center" @onclick="@CommonWIMClear">Clear</span>
                </span>
                @* <span class="form-control">Not available</span> *@
            }
        </div>


        <div class="col-md-6">
            <label>@localizer["Report.NumberofAxle"]</label>
            @if (configuration is not null)
            {
                string allIcon = selectedNoOfAxle.Count() == (configuration.NumberOfAxle - 1) ? "fa-check-square" : "fa-square";
                <div class="btn-group form-control p-0">
                    <span class="btn btn-sm btn-primary text-left" @onclick="AllNofAxleClicked"><i class="fa @allIcon"></i> All: </span>
                    @foreach (int i in listOfNoOfAxle.OrderBy(a=>a))
                    {
                        string icon = selectedNoOfAxle.Contains(i) ? "fa-check-square" : "fa-square";
                        <span class="btn btn-sm btn-primary text-left" @onclick="@(()=>NofAxleClicked(i))">
                            <i class="fa @icon"></i> @i
                        </span>
                    }
                </div>
            }
        </div>

        <div class="col-md-2">
            <label>@localizer["Report.ClassStatus"]</label>
            <select class="form-control" @bind="@reportParameters.ClassStatus">
                <option value="0">-No Filter-</option>
                @foreach (ClassStatus status in ListClassStatus)
                {
                    <option value="@status.Id">@status.Name</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label for="wheelBase">@localizer["Report.WheelBase"]</label>
            <input type="number" @bind="@reportParameters.Wheelbase" class="form-control" placeholder="Wheel Base" id="wheelBase" min="0" max="@configuration.WheelBaseMaximum" />
        </div>
        @* <div class="col-md-6">

        </div>*@
        <div class="col-md-2">
            <label>@localizer["Report.FilterByWeight"]</label>
            <select class="form-control" @bind="@reportParameters.WeightFilterColumn">
                <option value="">-No Filter-</option>
                <option value="GrossVehicleWeight">Gross Vehicle Weight</option>
                <option value="Axle1">Axle 1</option>
                <option value="Axle2">Axle 2</option>
                <option value="Axle3">Axle 3</option>
                <option value="Axle4">Axle 4</option>
                <option value="Axle5">Axle 5</option>
                <option value="Axle6">Axle 6</option>
                <option value="Axle7">Axle 7</option>
                <option value="AxleRemaining">Remaining</option>
            </select>
        </div>
        @if (!string.IsNullOrEmpty(reportParameters.WeightFilterColumn))
        {
            <div class="col-md-2">
                <div class="form-group">
                    <label for="WeightMin">@localizer["Report.WeightMin"]</label>
                    <input type="number" @bind="@reportParameters.WeightMin" class="form-control" placeholder="Weight Minimum" id="WeightMin" min="0" max="@(reportParameters.WeightMax-1)" />
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label for="WeightMax">@localizer["Report.WeightMax"]</label>
                    <input type="number" @bind="@reportParameters.WeightMax" class="form-control" placeholder="Weight Maximum" id="WeightMax" min="100000" />
                </div>
            </div>
        }

        <div class="@(string.IsNullOrEmpty(reportParameters.WeightFilterColumn) ? "col-md-6": "col-md-2")">
            <div class="form-group">
                <label class="form-label">&nbsp;</label>
                <div class="form-control btn-group p-0">
                    @if (selectedStations is not null && selectedStations.Any())
                    {
                        <button class="btn btn-primary" @onclick="SelectionComplete">@localizerResources["Button.Save"]</button>
                    }
                    <button class="btn btn-primary" @onclick="SelectionCancel">@localizerResources["Button.Cancel"]</button>
                </div>
            </div>
        </div>
    </div>
}
else if (reportParameters.Stations is not null)
{
    <div class="row" @onclick="EnableChange" title="Click to change selection" style="cursor:pointer;">
        @if (reportParameters.Stations.Count() == 0)
        {
            <span class="text text-danger">No ALCS is selected</span>
        }
        else
        {
            string wimText = String.Empty;
            if (reportParameters.WIMType > 0 || reportParameters.UpboundDirection || reportParameters.DownboundDirection)
            {
                if (reportParameters.WIMType > 0)
                {
                    wimText += ((WIMType)Enum.ToObject(typeof(WIMType), reportParameters.WIMType)).ToDescription();
                }
                else if (reportParameters.UpboundDirection)
                {
                    wimText += "Upbound Direction";
                }
                else if (reportParameters.DownboundDirection)
                {
                    wimText += "Downbound Direction";
                }
            }
            else if (reportParameters.Stations.Count() == 1 && reportParameters.WIMScales is not null && reportParameters.WIMScales.Count() > 0)
            {
                wimText = "Lane No: " + string.Join(", ", reportParameters.WIMScales.OrderBy(w => w.LaneNumber).Select(w => w.LaneNumber));
            }
            <div class="col-md-12">
                <label>@reportParameters.Stations?.Count() station(s) selected: </label>
                @foreach (Station item in stations.Where(s => reportParameters.Stations.Contains(s.StationId)).ToList().OrderBy(s => s.StationName))
                {
                    <span class="badge bg-success"> @item.StationName</span>
                }
                @if (!string.IsNullOrEmpty(wimText))
                {
                    <label>, Lane No. (WIM Scale): @wimText</label>
                }
            </div>
            <div class="col-md-6">
                <label>Date: <span class="badge bg-success">@reportParameters.DateStart.ToString("dd MMM yy, dddd")</span> to <span class="badge bg-success">@reportParameters.DateEnd.ToString("dd MMM yy, dddd")</span></label>
            </div>
            @if (reportParameters.TimeStart != reportParameters.TimeEnd)
            {
                <div class="col-md-3">
                    <label>Time Range: <span class="badge bg-success">@reportParameters.TimeStart</span> to <span class="badge bg-success">@reportParameters.TimeEnd</span></label>
                </div>
            }
            @if (reportParameters.NumberOfAxle is not null && reportParameters.NumberOfAxle.Any())
            {
                string strNoOfAxle = String.Join(",", reportParameters.NumberOfAxle.OrderBy(a => a));
                <div class="col-md-3">
                    <label>Axle: </label>
                    <span class="badge bg-success">@strNoOfAxle</span>
                </div>
            }
            @if (reportParameters.ClassStatus > 0 && ListClassStatus is not null)
            {
                var classStatus = ListClassStatus.FirstOrDefault(l => l.Id == reportParameters.ClassStatus);
                string name = classStatus?.Name ?? ""; 

                @if (!string.IsNullOrEmpty(name))
                {
                    <div class="col-md-3">
                        <label>, Class Status:<span class="badge bg-success">@name</span></label>
                    </div>
                }
            }
            @if (reportParameters.Wheelbase > 0)
            {
                <div class="col-md-3">
                    <label>Wheelbase: <span class="badge bg-success">@reportParameters.Wheelbase</span></label>
                </div>
            }
            @if (!string.IsNullOrEmpty(reportParameters.WeightFilterColumn))
            {
                string message = "";

                message += "Min: " + reportParameters.WeightMin.ToString("N0");
                message += (string.IsNullOrEmpty(message) ? "" : " - ") + "Max: " + reportParameters.WeightMax.ToString("N0");
                message = System.Text.RegularExpressions.Regex.Replace(reportParameters.WeightFilterColumn, "(\\B[A-Z0-9])", " $1", System.Text.RegularExpressions.RegexOptions.Compiled).Trim()
                + " (" + message + ")";

                <div class="col-md-3">
                    <label>Weight: <span class="badge bg-success">@message</span></label>
                </div>
            }

            <div class="col align-self-end">
                <div class="form-group float-right align-bottom">
                    <label class="form-label">&nbsp;</label>
                    <button class="btn btn-primary float-right" @onclick="EnableChange">@localizerResources["Button.ChangeSelection"]</button>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public EventCallback<bool> OnParametersChanged { get; set; }

    private IEnumerable<Station>? stations;
    private List<Station>? selectedStations;
    private List<int> selectedWIMScales { get; set; } = new();
    private List<int> listOfNoOfAxle { get; set; } = new();
    private List<int> selectedNoOfAxle { get; set; } = new();
    private IEnumerable<ClassStatus> ListClassStatus { get; set; }
    private IEnumerable<WIMScale>? wims;
    private bool selectionEnabled { get; set; } = false;
    private string selectedType { get; set; } = "Daily";
    public Configuration configuration { get; set; }
    private ReportParameters reportParameters { get; set; } = new();
    private (DateTime? StartDate, DateTime? EndDate)? selectedDateRange;

    protected override async Task OnInitializedAsync()
    {
        stations = await stationService.Get();
        //selectedStations = stations.Where(s => reportParameters.Stations.Contains(s.StationId)).ToList();
        ListClassStatus = await classStatusService.GetClassStatusList();
        configuration = await configurationService.GetConfiguration();

        for (int i = 2; i <= configuration.NumberOfAxle; i++)
        {
            listOfNoOfAxle.Add(i);
        }

        reportParameters = await appState.GetReportParameters();
        if (reportParameters.WIMScales is not null)
        {
            selectedWIMScales = reportParameters.WIMScales.Select(w => w.LaneNumber).ToList();
        }
        if (reportParameters.NumberOfAxle is not null)
        {
            selectedNoOfAxle = reportParameters.NumberOfAxle;
        }

        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        User currentUser = await customStateProvider.GetAuthorizedUser();
        stations = await stationAccessService.GetStationAccessByUserId(currentUser.Id);
    }
    public ReportParameters GetSelection()
    {
        return reportParameters;
    }
    private async Task EnableChange()
    {
        reportParameters = await appState.GetReportParameters();
        if (stations is not null && stations.Any(s => reportParameters.Stations.Contains(s.StationId)))
        {
            selectedStations = stations.Where(s => reportParameters.Stations.Contains(s.StationId)).ToList();
        }
        if (reportParameters.NumberOfAxle is not null)
        {
            selectedNoOfAxle = reportParameters.NumberOfAxle;
        }
        selectionEnabled = true;

        await LoadWIMScales();

        await OnParametersChanged.InvokeAsync(selectionEnabled);
    }
    private void onTimeStartChange(Syncfusion.Blazor.Calendars.ChangeEventArgs<TimeOnly> args)
    {
        reportParameters.TimeStart = args.Value;
        StateHasChanged();
    }
    private void onTimeEndChange(Syncfusion.Blazor.Calendars.ChangeEventArgs<TimeOnly> args)
    {
        reportParameters.TimeEnd = args.Value;
        StateHasChanged();
    }
    private void AllStationClicked()
    {
        if (stations?.Count() == selectedStations?.Count())
        {
            selectedStations = new();
        }
        else
        {
            selectedStations = new();
            selectedStations.AddRange(stations);
        }

        selectedWIMScales = new();
    }
    private async Task StationClicked(Station item)
    {
        if (selectedStations is null)
        {
            selectedStations = new();
        }
        if (selectedStations.Any(s => s.StationId == item.StationId))
        {
            selectedStations.Remove(selectedStations.FirstOrDefault(s => s.StationId == item.StationId));
        }
        else
        {
            selectedStations.Add(item);
        }

        selectedWIMScales = new();

        await LoadWIMScales();
    }
    private async Task LoadWIMScales()
    {
        if (selectedStations?.Count() == 1)
        {
            wims = await wimService.GetByStation(new WIMScale() { StationId = selectedStations.FirstOrDefault().StationId });
            if (wims is not null && wims.Count() == 1)
            {
                selectedWIMScales = new();
                selectedWIMScales.Add(wims.FirstOrDefault().LaneNumber);
            }
        }
        else
        {
            wims = null;
            reportParameters.WIMScales = new();
        }
    }
    private void OnDateRangeChanged(RangePickerEventArgs<DateTime?> args)
    {
        reportParameters.DateStart = args.StartDate ?? DateTime.Now;
        reportParameters.DateEnd = args.EndDate ?? DateTime.Now;
    }
    private async Task SelectionComplete()
    {
        if (selectedStations?.Count() == 0)
        {
            appState.SetNotification(this, "Select ALCS", Notification.NotificationType.Warning);
            return;
        }
        if (reportParameters.Wheelbase > configuration.WheelBaseMaximum)
        {
            appState.SetNotification(this, "Maximum Wheelbase Number " + configuration.WheelBaseMaximum, Notification.NotificationType.Warning);
            return;
        }

        reportParameters.Stations = new();
        if (selectedStations is not null && selectedStations.Any())
        {
            reportParameters.Stations = selectedStations.Select(s => s.StationId).ToList();
        }

        reportParameters.WIMScales = new();
        if (wims is not null && wims.Any(w => selectedWIMScales.Contains(w.LaneNumber)))
        {
            var matchingWIMScales = wims.Where(w => selectedWIMScales.Contains(w.LaneNumber)).ToList();

            if (matchingWIMScales is not null)
            {
                reportParameters.WIMScales.AddRange(matchingWIMScales);
            }
        }

        reportParameters.NumberOfAxle = selectedNoOfAxle;

        await appState.SetReportParameters(reportParameters);
        selectionEnabled = false;
        await OnParametersChanged.InvokeAsync(selectionEnabled);
    }
    private async Task SelectionCancel()
    {
        selectionEnabled = false;
        reportParameters = await appState.GetReportParameters();
        await OnParametersChanged.InvokeAsync(selectionEnabled);
    }
    private void TypeChanged(string type)
    {
        selectedType = type;
    }

    private void LaneClicked(int laneNumber)
    {
        if (selectedWIMScales.Contains(laneNumber))
        {
            selectedWIMScales.Remove(laneNumber);
        }
        else
        {
            selectedWIMScales.Add(laneNumber);
        }
    }
    private void AllUpDownboundClicked(bool isUpbound)
    {
        reportParameters.WIMType = 0;
        List<WIMScale> shortlist = wims.Where(w => w.IsUpbound == isUpbound).ToList();
        if (shortlist.Count() == shortlist.Count(w => selectedWIMScales.Contains(w.LaneNumber)))
        {
            foreach (WIMScale item in shortlist)
            {
                selectedWIMScales.Remove(item.LaneNumber);
            }
        }
        else
        {
            foreach (WIMScale item in shortlist.Where(w => !selectedWIMScales.Contains(w.LaneNumber)))
            {
                selectedWIMScales.Add(item.LaneNumber);
            }
        }
    }
    private void AllWIMTypeClicked(int type)
    {
        List<WIMScale> shortlist = wims.Where(w => w.Type == type).ToList();
        if (shortlist.Count() == shortlist.Count(w => selectedWIMScales.Contains(w.LaneNumber)))
        {
            foreach (WIMScale item in shortlist)
            {
                selectedWIMScales.Remove(item.LaneNumber);
            }
        }
        else
        {
            foreach (WIMScale item in shortlist.Where(w => !selectedWIMScales.Contains(w.LaneNumber)))
            {
                selectedWIMScales.Add(item.LaneNumber);
            }
        }
    }

    private void CommonUpDownboundClicked(bool isUpbound)
    {
        reportParameters.WIMType = 0;
        
        if (isUpbound)
        {
            reportParameters.UpboundDirection = !reportParameters.UpboundDirection;
            if (reportParameters.UpboundDirection)
            {
                reportParameters.DownboundDirection = false;
            }
        }
        else
        {
            reportParameters.DownboundDirection = !reportParameters.DownboundDirection;
            if (reportParameters.DownboundDirection)
            {
                reportParameters.UpboundDirection = false;
            }
        }
    }
    private void CommonWIMTypeClicked(int type)
    {
        reportParameters.UpboundDirection = false;
        reportParameters.DownboundDirection = false;
        reportParameters.WIMType = type;
    }
    private void CommonWIMClear()
    {
        reportParameters.UpboundDirection = false;
        reportParameters.DownboundDirection = false;
        reportParameters.WIMType = 0;
    }

    private void NofAxleClicked(int noOfAxle)
    {
        if (selectedNoOfAxle.Contains(noOfAxle))
        {
            selectedNoOfAxle.Remove(noOfAxle);
        }
        else
        {
            selectedNoOfAxle.Add(noOfAxle);
        }
    }
    private void AllNofAxleClicked()
    {
        if (selectedNoOfAxle.Count() == (configuration.NumberOfAxle - 1))
        {
            selectedNoOfAxle = new();
        }
        else
        {
            selectedNoOfAxle = new();
            for (int i = 2; i <= configuration.NumberOfAxle; i++)
            {
                selectedNoOfAxle.Add(i);
            }
        }
    }
}
