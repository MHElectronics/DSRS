@inject IStationService stationService
@inject IWIMScaleService wimService
@rendermode InteractiveServer

<div class="card">
    <div class="card-body">
        @if (selectionEnabled)
        {
            <div class="row">
                <div class="col-md-12">
                    @if (stations is not null)
                    {
                        <div class="btn-group">
                            @foreach (Station item in stations.OrderBy(s => s.StationName))
                            {
                                @if (selectedStations is not null && selectedStations.Any(s => s.StationId == item.StationId))
                                {
                                    <span class="btn btn-primary" @onclick="@(() => StationClicked(item))">@item.StationName</span>
                                }
                                else
                                {
                                    <span class="btn btn-outline-primary" @onclick="@(() => StationClicked(item))">@item.StationName</span>
                                }
                            }
                        </div>

                    }
                    else
                    {
                        <Loader />
                    }
                </div>
                @if (wims is null || wims.Count() == 0)
                {
                    <p>No WIM found</p>
                }
                else if (wims.Count() > 0)
                {
                    <div class="col-md-6">

                        <select class="form-control" @bind="@wimId">
                            <option value="0">-Select WIM-</option>
                            @foreach (WIMScale item in wims)
                            {
                                <option value="@item.Id">@item.LaneNumber - @item.LaneDirection</option>
                            }
                        </select>
                    </div>
                }

                <div class="col-md-3">
                    <input type="date" class="form-control" @bind="@startDate" max="@DateTime.Today" placeholder="Start Date" />
                </div>
                <div class="col-md-3">
                    <input type="date" class="form-control" @bind="@endDate" max="@DateTime.Today" placeholder="End Date" />
                </div>
                <div class="col-md-6 btn-group">
                    <span class="btn @(selectedType == "Daily" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Daily"))">Daily</span>
                    <span class="btn @(selectedType == "Weekly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Weekly"))">Weekly</span>
                    <span class="btn @(selectedType == "Monthly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Monthly"))">Monthly</span>
                    <span class="btn @(selectedType == "Quarterly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Quarterly"))">Quarterly</span>
                    <span class="btn @(selectedType == "SemiAnnual" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("SemiAnnual"))">Semi Annual</span>
                    <span class="btn @(selectedType == "Annual" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Annual"))">Annual</span>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col">
                    <label>@selectedStations?.Count() station(s) selected</label>
                    @foreach (Station item in selectedStations ?? new())
                    {
                        <span class="badge badge-primary">@item.StationName</span>
                    }
                </div>
            </div>
        }
    </div>
    <div class="card-footer">
        <span class="btn btn-primary" @onclick="SelectionComplete">Change</span>
    </div>
</div>

@code {
    private IEnumerable<Station>? stations;
    private List<Station>? selectedStations;
    private IEnumerable<WIMScale>? wims;

    private bool selectionEnabled { get; set; } = false;
    private int wimId { get; set; } = 0;
    private DateTime startDate { get; set; } = DateTime.Today;
    private DateTime endDate { get; set; } = DateTime.Today;
    private string selectedType { get; set; } = "Daily";

    protected override async Task OnInitializedAsync()
    {
        stations = await stationService.Get();
    }
    private async Task StationClicked(Station item)
    {
        if (selectedStations is null)
        {
            selectedStations = new();
        }
        if (selectedStations.Any(s => s.StationId == item.StationId))
        {
            selectedStations.Remove(item);
        }
        else
        {
            selectedStations.Add(item);
        }

        if (selectedStations.Count() == 1)
        {
            wims = await wimService.GetByStation(new WIMScale() { StationId = item.StationId });
            if (wims is not null && wims.Count() == 1)
            {
                wimId = wims.FirstOrDefault().Id;
            }
        }
        else
        {
            wims = null;
        }
    }
    private void SelectionComplete()
    {
        selectionEnabled = !selectionEnabled;
    }
    private void StationSelected(List<Station> selectedStations)
    {

    }
    private void TypeChanged(string type)
    {
        selectedType = type;
    }
}
