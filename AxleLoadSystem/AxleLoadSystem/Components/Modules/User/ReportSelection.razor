@inject IStationService stationService
@inject IWIMScaleService wimService
@inject IConfiguration configuration
@inject IClassStatusService classStatusService
@inject IAppState appState
@using BOL.CustomModels
@using Syncfusion.Blazor.Calendars
@rendermode InteractiveServer

@if (appState is null)
{
    return;
}
<div class="card">
    <div class="card-body">
        @if (selectionEnabled && reportParameters is not null)
        {
            <div class="row">
                <div class="col-md-12">
                    @if (stations is not null)
                    {
                        <div class="btn-group">
                            @foreach (Station item in stations.OrderBy(s => s.StationName))
                            {
                                @if (reportParameters.Stations is not null && reportParameters.Stations.Any(s => s.StationId == item.StationId))
                                {
                                    <span class="btn btn-primary" @onclick="@(() => StationClicked(item))">
                                        <i class="fas fa-check-square"></i><span class="ms-2">&nbsp; @item.StationName</span>
                                    </span>
                                }
                                else
                                {
                                    <span class="btn btn-outline-primary" @onclick="@(() => StationClicked(item))">
                                        <i class="fas fa-square"></i><span class="ms-2">&nbsp; @item.StationName</span>
                                    </span>
                                }
                            }
                        </div>
                    }
                    else
                    {
                        <Loader />
                    }
                </div>
                <div class="col-md-6">
                    <label>Select Date Range </label>
                    <SfDateRangePicker TValue="DateTime?" StartDate="@reportParameters.DateStart" EndDate="@reportParameters.DateEnd">
                        <DateRangePickerEvents TValue="DateTime?" ValueChange="@OnDateRangeChanged"></DateRangePickerEvents>
                    </SfDateRangePicker>
                </div>
                @if (wims is not null && wims.Count() > 0)
                {
                    <div class="col-md-6">
                        <label>List of WIM Scale Information</label>
                        <select class="form-control" @bind="@reportParameters.WIMScaleId">
                            <option value="0">-Select WIM-</option>
                            @foreach (WIMScale item in wims)
                            {
                                <option value="@item.Id">@item.LaneNumber - @item.LaneDirection</option>
                            }
                        </select>
                    </div>
                }
            </div>

            <div class="row mt-3">
                <div class="col-md-3">
                    <label>Number of Axles</label>
                    <select class="form-control" @bind="@reportParameters.NumberOfAxle">
                        <option value="0">-No Filter-</option>
                        @for (int i = 2; i <= MaxNoOfAxle; i++)
                        {
                            <option value="@i">@i Axle</option>
                        }
                    </select>
                </div>
                
                <div class="col-md-3">
                    <label>Class Status</label>
                    <select class="form-control" @bind="@reportParameters.ClassStatus">
                        <option value="0">-No Filter-</option>
                        @foreach (ClassStatus status in ListClassStatus)
                        {
                            <option value="@status.Id">@status.Name</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="wheelBase">Wheel Base</label>
                    <input type="number" @bind="@reportParameters.Wheelbase" class="form-control" placeholder="Wheel Base" id="wheelBase" min="0" max="100" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">&nbsp;</label>
                    <div class="form-check">
                        <div class="icheck-primary d-inline">
                            <input type="checkbox" @bind="reportParameters.IsOverloaded" id="chkIsOverloaded" />
                            <label for="chkIsOverloaded"></label>
                        </div>
                        <label class="form-check-label" for="chkIsOverloaded">Show only overloads?</label>
                    </div>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-3">
                    <label>Filter by Weight</label>
                    <select class="form-control" @bind="@reportParameters.WeightFilterColumn">
                        <option value="">-No Filter-</option>
                        <option value="GrossVehicleWeight">Gross Vehicle Weight</option>
                        <option value="Axle1">Axle 1</option>
                        <option value="Axle2">Axle 2</option>
                        <option value="Axle3">Axle 3</option>
                        <option value="Axle4">Axle 4</option>
                        <option value="Axle5">Axle 5</option>
                        <option value="Axle6">Axle 6</option>
                        <option value="Axle7">Axle 7</option>
                        <option value="AxleRemaining">Remaining</option>
                    </select>
                </div>
                @if (!string.IsNullOrEmpty(reportParameters.WeightFilterColumn))
                {
                    <div class="col-md-3">
                        <label for="WeightMin">Weight Minimum</label>
                        <input type="number" @bind="@reportParameters.WeightMin" class="form-control" placeholder="Weight Minimum" id="WeightMin" min="0" />
                    </div>
                    <div class="col-md-3">
                        <label for="WeightMax">Weight Maximum</label>
                        <input type="number" @bind="@reportParameters.WeightMax" class="form-control" placeholder="Weight Maximum" id="WeightMax" min="0" />
                    </div>
                }
               @*  <div class="col-md-3">
                    <label class="form-label">&nbsp;</label>
                    <div class="form-check">
                        <div class="icheck-primary d-inline">
                            <input type="checkbox" @bind="reportParameters.CheckWeightCalculation" id="CheckWeightCalculation" />
                            <label for="CheckWeightCalculation"></label>
                        </div>
                        <label class="form-check-label" for="CheckWeightCalculation">Check Weight Calculation?</label>
                    </div>
                </div> *@
            </div>               
        }
        else
        {
            <div class="row">
                <div class="col">
                    <label>@reportParameters.Stations?.Count() station(s) selected: </label>
                    @foreach (Station item in reportParameters.Stations ?? new())
                    {
                        <span class="badge badge-primary">@item.StationName</span>
                    }
                    @if (reportParameters.WIMScaleId > 0)
                    {
                        <label>, WIM Scale <span class="badge badge-primary">@reportParameters.WIMScaleId</span> selected</label>
                    }
                    <br /><label>Date range: @reportParameters.DateStart.ToString("dd MMM yy") to @reportParameters.DateEnd.ToString("dd MMM yy")</label>
                    @if (reportParameters.NumberOfAxle > 0)
                    {
                        <label>, Axle <span class="badge badge-primary">@reportParameters.NumberOfAxle</span> selected</label>
                    }
                    @if (reportParameters.ClassStatus > 0)
                    {
                        string name = ListClassStatus.Where(l => l.Id == reportParameters.ClassStatus).FirstOrDefault().Name.ToString();
                        <label>, <span class="badge badge-primary">@name</span> selected</label>
                    }
                    @if (reportParameters.IsOverloaded)
                    {
                        <label>, <span class="badge badge-primary">Overloaded</span> selected</label>
                    }
                    @if (reportParameters.Wheelbase > 0)
                    {
                        <label>, <span class="badge badge-primary">@reportParameters.Wheelbase</span> Wheelbase selected</label>
                    }
                    @if (reportParameters.WeightFilterColumn is not null)
                    {
                        string message = "";
                        @if (reportParameters.WeightMin > 0)
                        {
                            message += "Min: " + reportParameters.WeightMin.ToString("N0");
                        }
                        @if (reportParameters.WeightMax > 0)
                        {
                            message += (string.IsNullOrEmpty(message) ? "" : " - ") + "Max: " + reportParameters.WeightMax.ToString("N0");
                        }
                        message = "(" + message + ")";
                        <br/><label>Weight: <span class="badge badge-primary">@reportParameters.WeightFilterColumn @message</span></label>
                    }
                    
                    @if (reportParameters.CheckWeightCalculation)
                    {
                        <label>, <span class="badge badge-primary">Check Weight Calculation</span> selected.</label>
                    }
                </div>
            </div>
            @if (reportParameters.Stations is not null)
            {
                <div class="row">
                    <div class="col-md-6 btn-group">
                        <span class="btn @(selectedType == "Daily" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Daily"))">Daily</span>
                        <span class="btn @(selectedType == "Weekly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Weekly"))">Weekly</span>
                        <span class="btn @(selectedType == "Monthly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Monthly"))">Monthly</span>
                        <span class="btn @(selectedType == "Quarterly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Quarterly"))">Quarterly</span>
                        <span class="btn @(selectedType == "SemiAnnual" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("SemiAnnual"))">Semi Annual</span>
                        <span class="btn @(selectedType == "Annual" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Annual"))">Annual</span>
                    </div>
                </div>
            }
        }
    </div>
    <div class="card-footer">
        <button class="btn btn-primary" @onclick="SelectionComplete">Change</button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<ReportParameters?> OnParametersChanged { get; set; }

    private IEnumerable<Station>? stations;
    //private List<Station>? selectedStations;
    private IEnumerable<ClassStatus> ListClassStatus { get; set; }
    private IEnumerable<WIMScale>? wims;
    private int MaxNoOfAxle { get; set; } 
    private bool selectionEnabled { get; set; } = false;
    private int wimId { get; set; } = 0;
    private string selectedType { get; set; } = "Daily";

    private ReportParameters reportParameters { get; set; } = new();
    private (DateTime? StartDate, DateTime? EndDate)? selectedDateRange;

    protected override async Task OnInitializedAsync()
    {
        reportParameters = await appState.GetReportParameters();
        stations = await stationService.Get();
        ListClassStatus = await classStatusService.GetClassStatusList();
        MaxNoOfAxle = Convert.ToInt32(configuration.GetSection("CustomSettings:MaxNoOfAxle").Value);
        reportParameters.DateEnd = DateTime.Today;
        reportParameters.DateStart = DateTime.Now.AddMonths(-1);
    }
    private async Task StationClicked(Station item)
    {
        if (reportParameters.Stations is null)
        {
            reportParameters.Stations = new();
        }
        if (reportParameters.Stations.Any(s => s.StationId == item.StationId))
        {
            reportParameters.Stations.Remove(item);
        }
        else
        {
            reportParameters.Stations.Add(item);
        }

        if (reportParameters.Stations.Count() == 1)
        {
            wims = await wimService.GetByStation(new WIMScale() { StationId = item.StationId });
            if (wims is not null && wims.Count() == 1)
            {
                wimId = wims.FirstOrDefault().Id;
            }
        }
        else
        {
            wims = null;
            reportParameters.WIMScaleId = 0;
        }
    }
    private async Task OnDateRangeChanged(RangePickerEventArgs<DateTime?> args)
    { 
        reportParameters.DateStart = args.StartDate ?? DateTime.Now;
        reportParameters.DateEnd = args.EndDate ?? DateTime.Now;  
    }
    private async Task SelectionComplete()
    {
        await appState.SetReportParameters(reportParameters);
        selectionEnabled = !selectionEnabled;
        await OnParametersChanged.InvokeAsync(reportParameters);
    }
    private void StationSelected(List<Station> selectedStations)
    {

    }
    private void TypeChanged(string type)
    {
        selectedType = type;
    }
}
