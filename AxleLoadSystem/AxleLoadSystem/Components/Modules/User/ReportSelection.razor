@inject IStationService stationService
@inject IWIMScaleService wimService
@inject IConfiguration configuration
@inject IClassStatusService classStatusService
@inject IAppState appState
@using BOL.CustomModels
@using Syncfusion.Blazor.Calendars
@rendermode InteractiveServer

@if (appState is null)
{
    return;
}

@if (selectionEnabled && reportParameters is not null)
{
    <div class="row">
        <div class="col-12">
            <div class="btn-group">
                @if (selectedStations is not null && selectedStations.Any())
                {
                    <button class="btn btn-primary" @onclick="SelectionComplete">Save Selection</button>
                }
                <button class="btn btn-primary" @onclick="SelectionCancel">Cancel</button>
            </div>

        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            @if (stations is not null)
            {
                string strIconAll = "fa-square";
                if (stations?.Count() == selectedStations?.Count())
                {
                    strIconAll = "fa-check-square";
                }
                <div class="btn-group">
                    <span class="btn btn-outline-primary" @onclick="@(() => AllStationClicked())" title="Select/Unselect All ALCS">
                        <i class="fas @strIconAll"></i><span class="ms-2">&nbsp;All</span>
                    </span>
                    @foreach (Station item in stations.OrderBy(s => s.StationName))
                    {
                        string strIcon = "fa-square";
                        @if (selectedStations is not null && selectedStations.Any(s => s.StationId == item.StationId))
                        {
                            strIcon = "fa-check-square";
                        }
                        <span class="btn btn-outline-primary" @onclick="@(() => StationClicked(item))">
                            <i class="fas @strIcon"></i><span class="ms-2">&nbsp; @item.StationName</span>
                        </span>
                    }
                </div>
            }
            else
            {
                <Loader />
            }
        </div>
        <div class="col-md-6">
            <label>Select Date Range </label>
            <SfDateRangePicker TValue="DateTime?" StartDate="@reportParameters.DateStart" EndDate="@reportParameters.DateEnd" Format="dd MMM yy">
                <DateRangePickerEvents TValue="DateTime?" ValueChange="@OnDateRangeChanged"></DateRangePickerEvents>
            </SfDateRangePicker>
        </div>
        @if (wims is not null && wims.Count() > 0)
        {
            <div class="col-md-6">
                <label>List of WIM Scale Information</label>
                <select class="form-control" @bind="@reportParameters.WIMScaleId">
                    <option value="0">-Select WIM-</option>
                    @foreach (WIMScale item in wims)
                    {
                        <option value="@item.Id">@item.LaneNumber - @item.LaneDirection</option>
                    }
                </select>
            </div>
        }
    </div>

    <div class="row mt-3">
        <div class="col-md-3">
            <label>Number of Axles</label>
            <select class="form-control" @bind="@reportParameters.NumberOfAxle">
                <option value="0">-No Filter-</option>
                @for (int i = 2; i <= MaxNoOfAxle; i++)
                {
                    <option value="@i">@i Axle</option>
                }
            </select>
        </div>

        <div class="col-md-3">
            <label>Class Status</label>
            <select class="form-control" @bind="@reportParameters.ClassStatus">
                <option value="0">-No Filter-</option>
                @foreach (ClassStatus status in ListClassStatus)
                {
                    <option value="@status.Id">@status.Name</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label for="wheelBase">Wheel Base</label>
            <input type="number" @bind="@reportParameters.Wheelbase" class="form-control" placeholder="Wheel Base" id="wheelBase" min="0" max="100" />
        </div>
        <div class="col-md-3">
            <label class="form-label">&nbsp;</label>
            <div class="form-check">
                <div class="icheck-primary d-inline">
                    <input type="checkbox" @bind="reportParameters.IsOverloaded" id="chkIsOverloaded" />
                    <label for="chkIsOverloaded"></label>
                </div>
                <label class="form-check-label" for="chkIsOverloaded">Show only overloads?</label>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-3">
            <label>Filter by Weight</label>
            <select class="form-control" @bind="@reportParameters.WeightFilterColumn">
                <option value="">-No Filter-</option>
                <option value="GrossVehicleWeight">Gross Vehicle Weight</option>
                <option value="Axle1">Axle 1</option>
                <option value="Axle2">Axle 2</option>
                <option value="Axle3">Axle 3</option>
                <option value="Axle4">Axle 4</option>
                <option value="Axle5">Axle 5</option>
                <option value="Axle6">Axle 6</option>
                <option value="Axle7">Axle 7</option>
                <option value="AxleRemaining">Remaining</option>
            </select>
        </div>
        @if (!string.IsNullOrEmpty(reportParameters.WeightFilterColumn))
        {
            <div class="col-md-3">
                <label for="WeightMin">Weight Minimum</label>
                <input type="number" @bind="@reportParameters.WeightMin" class="form-control" placeholder="Weight Minimum" id="WeightMin" min="0" />
            </div>
            <div class="col-md-3">
                <label for="WeightMax">Weight Maximum</label>
                <input type="number" @bind="@reportParameters.WeightMax" class="form-control" placeholder="Weight Maximum" id="WeightMax" min="0" />
            </div>
        }
        @*  <div class="col-md-3">
    <label class="form-label">&nbsp;</label>
    <div class="form-check">
    <div class="icheck-primary d-inline">
    <input type="checkbox" @bind="reportParameters.CheckWeightCalculation" id="CheckWeightCalculation" />
    <label for="CheckWeightCalculation"></label>
    </div>
    <label class="form-check-label" for="CheckWeightCalculation">Check Weight Calculation?</label>
    </div>
    </div> *@
    </div>
}
else
{
    <div class="row" @onclick="EnableChange" title="Click to change" style="cursor:context-menu;">
        @if (reportParameters.Stations is null || reportParameters.Stations.Count() == 0)
        {
            <span class="text text-danger">No ALCS is selected</span>
        }
        else
        {
            <div class="col-md-10">
                <label>@reportParameters.Stations?.Count() station(s) selected: </label>
                @foreach (Station item in stations.Where(s => reportParameters.Stations.Contains(s.StationId)).ToList())
                {
                    <span class="badge badge-primary">@item.StationName</span>
                }
                @if (reportParameters.WIMScaleId > 0)
                {
                    <label>, WIM Scale <span class="badge badge-primary">@reportParameters.WIMScaleId</span> selected</label>
                }
            </div>
            <div class="col-md-2">
                <button class="btn btn-primary float-right" @onclick="EnableChange">Change Selection</button>
            </div>
            <div class="col-md-3">
                <label>Date range: <span class="badge badge-primary">@reportParameters.DateStart.ToString("dd MMM yy")</span> to <span class="badge badge-primary">@reportParameters.DateEnd.ToString("dd MMM yy")</span></label>
            </div>
            @if (reportParameters.NumberOfAxle > 0)
            {
                <div class="col-md-3">
                    <label>, Axle <span class="badge badge-primary">@reportParameters.NumberOfAxle</span> selected</label>
                </div>
            }
            @if (reportParameters.ClassStatus > 0)
            {
                string name = ListClassStatus.Where(l => l.Id == reportParameters.ClassStatus).FirstOrDefault().Name.ToString();
                <div class="col-md-3">
                    <label>, <span class="badge badge-primary">@name</span> selected</label>
                </div>
            }
            @if (reportParameters.IsOverloaded)
            {
                <div class="col-md-3">
                    <label>, <span class="badge badge-primary">Overloaded</span> selected</label>
                </div>
            }
            @if (reportParameters.Wheelbase > 0)
            {
                <div class="col-md-3">
                    <label>, <span class="badge badge-primary">@reportParameters.Wheelbase</span> Wheelbase selected</label>
                </div>
            }
            @if (!string.IsNullOrEmpty(reportParameters.WeightFilterColumn))
            {
                string message = "";
                @if (reportParameters.WeightMin > 0)
                {
                    message += "Min: " + reportParameters.WeightMin.ToString("N0");
                }
                @if (reportParameters.WeightMax > 0)
                {
                    message += (string.IsNullOrEmpty(message) ? "" : " - ") + "Max: " + reportParameters.WeightMax.ToString("N0");
                }
                message = "(" + message + ")";

                <div class="col-md-3">
                    <label>Weight: <span class="badge badge-primary">@reportParameters.WeightFilterColumn @message</span></label>
                </div>
            }

            @if (reportParameters.CheckWeightCalculation)
            {
                <div class="col-md-3">
                    <label>, <span class="badge badge-primary">Check Weight Calculation</span> selected.</label>
                </div>
            }
        }
    </div>
    @* @if (selectedStations is not null)
    {
        <div class="row">
            <div class="col-md-6 btn-group">
                <span class="btn @(selectedType == "Daily" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Daily"))">Daily</span>
                <span class="btn @(selectedType == "Weekly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Weekly"))">Weekly</span>
                <span class="btn @(selectedType == "Monthly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Monthly"))">Monthly</span>
            </div>
        </div>
    } *@
}

@code {
    [Parameter]
    public EventCallback<ReportParameters?> OnParametersChanged { get; set; }

    private IEnumerable<Station>? stations;
    private List<Station>? selectedStations;
    private IEnumerable<ClassStatus> ListClassStatus { get; set; }
    private IEnumerable<WIMScale>? wims;
    private int MaxNoOfAxle { get; set; }
    private bool selectionEnabled { get; set; } = false;
    private int wimId { get; set; } = 0;
    private string selectedType { get; set; } = "Daily";

    private ReportParameters reportParameters { get; set; } = new();
    private (DateTime? StartDate, DateTime? EndDate)? selectedDateRange;

    protected override async Task OnInitializedAsync()
    {
        stations = await stationService.Get();

        reportParameters = await appState.GetReportParameters();
        selectedStations = stations.Where(s => reportParameters.Stations.Contains(s.StationId)).ToList();

        ListClassStatus = await classStatusService.GetClassStatusList();
        MaxNoOfAxle = Convert.ToInt32(configuration.GetSection("CustomSettings:MaxNoOfAxle").Value);
        reportParameters.DateEnd = DateTime.Today;
        reportParameters.DateStart = DateTime.Now.AddMonths(-1);
    }
    private async Task AllStationClicked()
    {
        if(stations?.Count() == selectedStations?.Count())
        {
            selectedStations = new();
        }
        else
        {
            selectedStations = new();
            selectedStations.AddRange(stations);
        }
    }
    private async Task StationClicked(Station item)
    {
        if (selectedStations is null)
        {
            selectedStations = new();
        }
        if (selectedStations.Any(s => s.StationId == item.StationId))
        {
            selectedStations.Remove(selectedStations.FirstOrDefault(s => s.StationId == item.StationId));
        }
        else
        {
            selectedStations.Add(item);
        }

        if (selectedStations.Count() == 1)
        {
            wims = await wimService.GetByStation(new WIMScale() { StationId = selectedStations.FirstOrDefault().StationId });
            if (wims is not null && wims.Count() == 1)
            {
                wimId = wims.FirstOrDefault().Id;
            }
        }
        else
        {
            wims = null;
            reportParameters.WIMScaleId = 0;
        }
    }
    private async Task OnDateRangeChanged(RangePickerEventArgs<DateTime?> args)
    {
        reportParameters.DateStart = args.StartDate ?? DateTime.Now;
        reportParameters.DateEnd = args.EndDate ?? DateTime.Now;
    }
    private async Task EnableChange()
    {
        reportParameters = await appState.GetReportParameters();
        selectedStations = stations.Where(s => reportParameters.Stations.Contains(s.StationId)).ToList();
        selectionEnabled = true;
    }
    private async Task SelectionComplete()
    {
        if (selectedStations?.Count() == 0)
        {
            appState.SetNotification(this, "Select ALCS", Notification.NotificationType.Warning);
            return;
        }

        reportParameters.Stations = new();
        if (selectedStations is not null && selectedStations.Any())
        {
            reportParameters.Stations = selectedStations.Select(s => s.StationId).ToList();
        }

        await appState.SetReportParameters(reportParameters);
        selectionEnabled = false;
        await OnParametersChanged.InvokeAsync(reportParameters);
    }
    private async Task SelectionCancel()
    {
        selectionEnabled = false;
        //await OnParametersChanged.InvokeAsync(reportParameters);
    }

    private void TypeChanged(string type)
    {
        selectedType = type;
    }
}
