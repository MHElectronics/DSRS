@page "/datasearch"
@page "/dataanalysis"
@page "/datavisualization"
@page "/sqldirectsearch"
@using BOL.Helpers
@using Services
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.PdfExport;
@* @using ThemeHelper *@
@using Syncfusion.Blazor.Charts
@using System.Globalization
@inject IAxleLoadService loadService
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col">
        <h5>Page is under construction. </h5>
    </div>
</div>

<ReportSelection OnParametersChanged="HandleParametersChanged" />

<div class="control-section" align='center'>
    <SfChart @ref="@chartInstance" Title="Number of overweight vehicles -" Width="@Width" Theme="@Theme">
        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
        <ChartEvents OnAxisLabelRender="axisLabel"></ChartEvents>
        <ChartPrimaryXAxis Title="Number of Axle (Allowable Weight)" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelIntersectAction="LabelIntersectAction.Rotate45">
            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryXAxis>
        <ChartPrimaryYAxis Title="Number of Overloaded Vehicles (Units)">
            <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            <ChartAxisMinorTickLines Width="0"></ChartAxisMinorTickLines>
            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
        </ChartPrimaryYAxis>
        <ChartSeriesCollection>
            <ChartSeries ColumnWidth="0.5" DataSource="@ChartData" XName="NumberofAxle" YName="GrossVehicleWeight" Width="2" Name="WeekDay" Type=ChartSeriesType.StackingColumn>
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
            @* <ChartSeries ColumnWidth="0.5" DataSource="@ChartData" XName="GrossVehicleWeight" YName="NumberofAxle" Width="2" Name="Honda" Type="ChartSeriesType.Bar">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries ColumnWidth="0.5" DataSource="@ChartData" XName="GrossVehicleWeight" YName="NumberofAxle" Width="2" Name="Suzuki" Type="ChartSeriesType.Bar">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries>
            <ChartSeries ColumnWidth="0.5" DataSource="@ChartData" XName="GrossVehicleWeight" YName="NumberofAxle" Width="2" Name="BMW" Type="ChartSeriesType.Bar">
                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
            </ChartSeries> *@
        </ChartSeriesCollection>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
    </SfChart>
    <SfButton Id="button" Content="Export" @onclick="Export" IsPrimary="true" CssClass="e-flat"></SfButton>
</div>
@code {
    private Theme Theme { get; set; } = 0;
    public string Width { get; set; } = "90%";
    private SfChart chartInstance;
    public string FileName { get; set; } = "Charts";
    public string Format { get; set; } = "{value} GW";
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;

    public DateTime startDate { get; set; }
    public DateTime endDate { get; set; }
    public int NumberofAxle { get; set; }
    public int ClassStatus { get; set; }
    public int WheelBase { get; set; }
    public bool IsOverloaded { get; set; }

    public IEnumerable<AxleLoadReport> ChartData { get; set; }

    public IQueryable<List<LoadData>> listLoadData { get; set; }

    public Station station { get; set; }

    protected override async void OnInitialized()
    {
        // Theme = ThemeHelper.GetCurrentTheme(NavigationManager.Uri);
        // if (SampleService.IsDevice)
        // {
        //     Width = "100%";
        // }
    }
    void axisLabel(AxisLabelRenderEventArgs args)
    {
        if (args.Value > 999999 || args.Value < -999999)
        {
            args.Text = args.Value.ToString("0,,.##M", CultureInfo.InvariantCulture);
        }
    }

    private async Task Export(MouseEventArgs args)
    {
        await chartInstance.ExportAsync(ExportType.PNG, FileName, allowDownload: true, isBase64: true);
    }

    public void ExportComplete(ExportEventArgs exportEventArgs)
    {
        string base64 = exportEventArgs.Base64;
    }

    private async Task HandleParametersChanged(ReportParameters parameters)
    {
        this.station = parameters.SelectedStation;
        this.startDate = parameters.StartDate;
        this.endDate = parameters.EndDate;
        this.NumberofAxle = parameters.AxleNumber;
        this.ClassStatus = parameters.ClassStatus;
        this.WheelBase = parameters.WheelBase;
        this.IsOverloaded = parameters.IsOverloaded;
        await LoadChartData(); 
    }
    private async Task LoadChartData()
    {
        ChartData = await loadService.GetDateWise(station, startDate, endDate); 
    }
}