@page "/BRTA"
@using AxleLoadSystem.Helpers
@using System.Text.Json
@using Newtonsoft.Json
@using System.Text.RegularExpressions
@inject IRHDApiHelper apiHelper
@inject IAppState appState
@inject IStringLocalizer<Locales.Reports> localizer
@rendermode InteractiveServer

<PageTitleComponent Title="@localizer["Report.BRTAApiTest"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="name" class="form-label">@localizer["Report.UserName"]</label>
                    <input type="text" @bind-value="payloadBRTA.userName" required class="form-control" placeholder="User Name" id="name" disabled />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="name" class="form-label">@localizer["Report.Password"]</label>
                    <input type="password" @bind-value="payloadBRTA.password" required class="form-control" placeholder="Password" id="name" disabled />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="name" class="form-label">@localizer["Report.BridgeOid"]</label>
                    <input type="text" @bind-value="payloadBRTA.bridgeOid" required class="form-control" placeholder="Bridge Oid" id="name" disabled />
                </div>
            </div>
            <div class="col-md-9">
                <div class="form-group">
                    <label for="rfid" class="form-label">@localizer["Report.RFID"]</label>
                    <input type="text" @bind-value="payloadBRTA.rfid" class="form-control" placeholder="RFID" id="rfid" />
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="form-label">&nbsp;</label>
                    <div class="form-control m-0 p-0">
                        <button class="btn btn-primary w-100" type="button" @onclick="ShowBrtaInfoByRfid">@localizer["Report.ShowbyRFID"]</button>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="zone" class="form-label">@localizer["Report.PlateZone"]</label>
                    <input type="text" @bind-value="payloadBRTA.zone" class="form-control" placeholder="zone" id="zone" />
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="series" class="form-label">@localizer["Report.PlateSeries"]</label>
                    <input type="text" @bind-value="payloadBRTA.series" class="form-control" placeholder="Series" id="series" />
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="number" class="form-label">@localizer["Report.PlateNumber"]</label>
                    <input type="text" @bind-value="payloadBRTA.Number" class="form-control" placeholder="Vehicle Number" id="number" />
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="form-label">&nbsp;</label>
                    <div class="form-control m-0 p-0">
                        <button class="btn btn-primary w-100" type="button" @onclick="ShowBrtaInfoByRegistrationNumber">@localizer["Report.ShowbyRegistrationNumber"]</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@if (result is not null)
{
    <div class="card card-primary card-outline">
        <div class="card-body">
            <div class="row">
                @foreach (KeyValuePair<string, JsonElement> item in result)
                {
                    string filedTitle = Regex.Replace(item.Key, "(\\B[A-Z])", " $1");
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="form-label" style="text-transform: capitalize;">@filedTitle</label>
                            <label class="form-control">@item.Value</label>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private PayloadBRTA payloadBRTA { get; set; } = new() { userName = "AxleLoad", password = "Ax$@23L", bridgeOid = "3", rfid = "42525441FF021A151D6A0001", zone = "KHULNA METRO", series = "LA", Number = "12-9358" };
    private Dictionary<string, JsonElement> result { get; set; } = null;

    private async Task ShowBrtaInfoByRfid()
    {
        try
        {
            // string resultString = await apiHelper.GetBRTAInformationByRFID(payloadBRTA);
            string resultString = @"{""rhdClass"": {""className"": ""PICKUP"",""regSeries"": ""I"",
        ""seriesBnName"": ""ঝ""
    },
    ""brtaClass"": {
        ""className"": ""Private Passenger (Jeep/st. Wagn)"",
        ""regSeries"": ""GHA"",
        ""regSeriesBnName"": ""ঘ"",
        ""seriesStartNumber"": 11,
        ""seriesEndNumber"": 99
    },
    ""vehicleInfo"": {
        ""vehicleRegistrationNumber"": ""DHAKA METRO-GHA-21-7530"",
        ""noOfAxle"": ""2"",
        ""unladenWeight"": ""1840"",
        ""vehicleCC"": ""1990"",
        ""ladenWeight"": ""2115"",
        ""ownerName"": ""MINIMAX ENTERPRISE"",
        ""vehicleType"": ""HARD JEEP"",
        ""seatingCapacity"": ""5"",
        ""rfid"": ""42525441FF021A151D6A0001"",
        ""chassisNo"": ""GG****4967""
    },
    ""fareRate"": 90.00,
    ""bridgeName"": ""MEGHNA AND MEGHNA-GOMOTI BRIDGE"",
    ""bridgeOid"": ""3"",
    ""returnFrom"": ""RHD""
}";
            // result = JsonConvert.DeserializeObject<Dictionary<string, JsonElement>>(resultString);
            BRTAInfo info = JsonConvert.DeserializeObject<BRTAInfo>(resultString);
        }
        catch (Exception ex)
        {
            Notification notification = new(ex.Message, Notification.NotificationType.Failure);
            appState.SetNotification(this, notification);
        }
    }
    private async Task ShowBrtaInfoByRegistrationNumber()
    {
        try
        {
            string resultString = await apiHelper.GetBRTAInformationByRegistrationNumber(payloadBRTA);
            result = JsonConvert.DeserializeObject<Dictionary<string, JsonElement>>(resultString);
        }
        catch (Exception ex)
        {
            Notification notification = new(ex.Message, Notification.NotificationType.Failure);
            appState.SetNotification(this, notification);
        }
    }

    private class BRTAInfo
    {
        public RhdClass rhdClass;
        public BrtaClass brtaClass;
        public VehicleInfo vehicleInfo;

        public string fareRate;
        public string bridgeName;
        public string bridgeOid;
        public string returnFrom;
    }
    private class RhdClass
    {
        public string className;
        public string regSeries;
        public string seriesBnName;
    }
    private class BrtaClass
    {
        public string className;
        public string regSeries;
        public string regSeriesBnName;
        public string seriesStartNumber;
        public string seriesEndNumber;
    }
    private class VehicleInfo
    {
        public string vehicleRegistrationNumber;
        public string noOfAxle;
        public string unladenWeight;
        public string vehicleCC;
        public string ladenWeight;
        public string ownerName;
        public string vehicleType;
        public string seatingCapacity;
        public string rfid;
        public string chassisNo;
    }
}
