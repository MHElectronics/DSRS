@page "/BRTA"
@using AxleLoadSystem.Helpers
@using Newtonsoft.Json
@inject IRHDApiHelper apiHelper
@inject IAppState appState
@inject IStringLocalizer<Locales.Reports> localizer
@rendermode InteractiveServer

<PageTitleComponent Title="@localizer["Report.BRTAApiTest"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="name" class="form-label">User Name</label>
                    <input type="text" @bind-value="payloadBRTA.userName" required class="form-control" placeholder="User Name" id="name" disabled />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="name" class="form-label">Password</label>
                    <input type="password" @bind-value="payloadBRTA.password" required class="form-control" placeholder="Password" id="name" disabled />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="name" class="form-label">Bridge Oid</label>
                    <input type="text" @bind-value="payloadBRTA.bridgeOid" required class="form-control" placeholder="Bridge Oid" id="name" disabled />
                </div>
            </div>
            <div class="col-md-12">
                <div class="form-group">
                    <label for="rfid" class="form-label">RFID</label>
                    <input type="text" @bind-value="payloadBRTA.rfid" class="form-control" placeholder="RFID" id="rfid" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="zone" class="form-label">Zone</label>
                    <input type="text" @bind-value="payloadBRTA.zone" class="form-control" placeholder="zone" id="zone" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="series" class="form-label">Series</label>
                    <input type="text" @bind-value="payloadBRTA.series" class="form-control" placeholder="Series" id="series" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="number" class="form-label">Vehicle Number</label>
                    <input type="text" @bind-value="payloadBRTA.Number" class="form-control" placeholder="Vehicle Number" id="number" />
                </div>
            </div>

            <div class="col-12">
                <button class="btn btn-primary" type="button" @onclick="ShowBrtaInfoByRfid">Show By RFID</button>
                <button class="btn btn-primary" type="button" @onclick="ShowBrtaInfoByRegistrationNumber">Show by Registration Number</button>
            </div>
        </div>
        @if(result is not null)
        {
            <dl class="row">
                @foreach(KeyValuePair<string, string> item in result)
                {
                    <dt class="col-sm-4">@item.Key</dt>
                    <dd class="col-sm-8">@item.Value</dd>
                }
            </dl>
        }
    </div>
</div>

@code {
    private PayloadBRTA payloadBRTA { get; set; } = new() { userName = "AxleLoad", password = "Ax$@23L", bridgeOid = "3", rfid = "42525441FF021A151D6A0001", zone = "KHULNA METRO", series = "LA", Number = "12-9358" };
    private Dictionary<string, string> result { get; set; } = null;

    private async Task ShowBrtaInfoByRfid()
    {
        try
        {
            string resultString = await apiHelper.GetBRTAInformationByRFID(payloadBRTA);
            result = JsonConvert.DeserializeObject<Dictionary<string, string>>(resultString);
        }
        catch (Exception ex)
        {
            Notification notification = new(ex.Message, Notification.NotificationType.Failure);
            appState.SetNotification(this, notification);
        }
    }
    private async Task ShowBrtaInfoByRegistrationNumber()
    {
        try
        {
            string resultString = await apiHelper.GetBRTAInformationByRegistrationNumber(payloadBRTA);
            result = JsonConvert.DeserializeObject<Dictionary<string, string>>(resultString);
        }
        catch (Exception ex)
        {
            Notification notification = new(ex.Message, Notification.NotificationType.Failure);
            appState.SetNotification(this, notification);
        }
    }
}
