@page "/map"
@using static System.Runtime.InteropServices.JavaScript.JSType
@inherits BasePageComponent
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject IStationService stationService
@inject IWIMScaleService wimScaleService
@rendermode InteractiveServer

<div class="row">
    <div class="col">
        <div class="img-overlay-wrap">
            <img src="./images/Bangladesh_High_Resolution.jpg">
            <svg id="svgMap" viewBox="0 0 1325 1872">
                <defs>
                    <filter x="0" y="0" width="1" height="2" id="solid">
                        <feFlood flood-color="rgba(0,0,255,0.5)" result="bg" />
                        <feMerge>
                            <feMergeNode in="bg" />
                            <feMergeNode in="SourceGraphic" />
                        </feMerge>
                    </filter>

                    <filter id="rounded-corners" x="-5%" width="110%" y="0%" height="110%">
                        <feFlood flood-color="green" />
                        <feGaussianBlur stdDeviation="2" />
                        <feComponentTransfer>
                            <feFuncA type="table" tableValues="0 0 0 1" />
                        </feComponentTransfer>

                        <feComponentTransfer>
                            <feFuncA type="table" tableValues="0 1 1 1 1 1 1 1" />
                        </feComponentTransfer>
                        <feComposite operator="over" in="SourceGraphic" />
                    </filter>
                </defs>
                @if (stations is not null && wimScales is not null)
                {                   
                    foreach (Station item in stations.Where(s => !string.IsNullOrEmpty(s.MapX)))
                    {
                        List<WIMScale> stationWIMScales = wimScales.Where(w => w.StationId == item.StationId).ToList();
                        bool hasUpbound = stationWIMScales.Any(w => w.IsUpbound);
                        bool hasDownbound = stationWIMScales.Any(w => !w.IsUpbound);

                        <g class="alcs" transform="matrix(1 0 0 1 @item.MapX @item.MapY)"
                           data-id="@item.StationId" data-name="@item.StationName">

                            @if (hasDownbound)
                            {
                                <g transform="matrix(1 0 0 1 -10 50)" role="button">
                                    <polygon points="30,0 15,30 45,30" style="fill:green;stroke:purple;stroke-width:3" @onclick="(() => MapClicked(item, false))" />
                                    @* <path d="M12 10 L5 30 L20 30 Z" style="fill:green;stroke:green;stroke-width:3" @onclick="(() => MapClicked(item, false))"/> *@
                                    <title>Downbound - Lane: @string.Join(",", stationWIMScales.Where(w => !w.IsUpbound).Select(w => w.LaneNumber))</title>
                                </g>
                            }

                            @if (hasUpbound)
                            {
                                <circle r="15" cx="@(hasDownbound ? "-10" : "15")" cy="65" fill="red" @onclick="(() => MapClicked(item, true))" role="button">
                                    <title>Upbound - Lane: @string.Join(",", stationWIMScales.Where(w => w.IsUpbound).Select(w => w.LaneNumber))</title>
                                </circle>
                            }

                            <text filter="url(#rounded-corners)" x="40" y="50" style="font-size:12pt;fill:white;">
                                <tspan x="40" dy="1.2em">@item.StationName</tspan>

                                @* @if (hasDownbound)
                                {
                                    <tspan x="40" dy="1.2em" @onclick="(() => MapClicked(item, false))">Lane No: @string.Join(", ", stationWIMScales.Where(w => !w.IsUpbound).Select(w => w.LaneNumber)) (Downbound)</tspan>
                                }

                                @if (hasUpbound)
                                {
                                    <tspan x="40" dy="1.2em" @onclick="(() => MapClicked(item, true))">Lane No: @string.Join(", ", stationWIMScales.Where(w => w.IsUpbound).Select(w => w.LaneNumber)) (Upbound)</tspan>
                                } *@
                            </text>
                        </g>
                    }
                }
            </svg>
        </div>
    </div>
    <div class="col">
        @if(station is not null)
        {
            <ALCSInformation Station="@station" IsUpbound="@isUpbound" @rendermode="InteractiveServer"></ALCSInformation>
        }
        else
        {
            <CustomNotification Notification="@(new("Click on Station to view information", Notification.NotificationType.Info ))"/>
        }
    </div>
</div>

<style>
    #svgMap{
        /* border:1px solid red; */
    }
    .img-overlay-wrap {
        position: relative;
        display: inline-block; /* shrinks container to image size */
        transition: transform 150ms ease-in-out;
        /* width:500px; */
    }

    .img-overlay-wrap img { /* optional, for responsiveness */
        display: block;
        max-width: 100%;
        max-height: auto;
    }

    .img-overlay-wrap svg {
        position: absolute;
        top: 0;
        left: 0;
    }
</style>

@code {
    private IEnumerable<Station> stations { get; set; }
    private IEnumerable<WIMScale> wimScales { get; set; }
    private Station station { get; set; }
    private bool isUpbound{ get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Initialize the dialog events the first time th ecomponent is rendered
        if (firstRender)
        {
            // IJSObjectReference module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/map.js");
            // await module.InvokeVoidAsync("InitMap");
        }
    }
    protected override async Task OnInitializedAsync()
    {
        stations = await stationService.Get();
        wimScales = await wimScaleService.GetAll();
    }
    private void MapClicked(Station item, bool isUpboundSelected)
    {
        station = item;
        isUpbound = isUpboundSelected;
    }
}
