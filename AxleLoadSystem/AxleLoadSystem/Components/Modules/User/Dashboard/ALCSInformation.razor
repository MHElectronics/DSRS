@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@inject IStationService stationService
@inject IFileService fileService
@inject IAxleLoadService loadService
@inject IWIMScaleService wimScaleService
@inject IAppState appState
@inject IStringLocalizer<Locales.Resource> localizerResource

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">ALCS Information</h3>
    </div>
    <div class="card-body">
        @if (Station is null)
        {
            <Loader />
        }
        else
        {
            <div class="row">
                <div class="col-12">
                    <table class="table">
                        <tr>
                            <td>ALCS</td>
                            <td>@Station.StationName</td>
                        </tr>
                        <tr>
                            <td>Address</td>
                            <td>@Station.Address</td>
                        </tr>
                        @if (files is not null && files.Any())
                        {
                            <tr>
                                <td>Last file uploaded</td>
                                <td>@files.Max(f => f.Date).ToString("dd MMM yy")</td>
                            </tr>
                            <tr>
                                <td>Total Files uploaded</td>
                                <td>@files.Count().ToString("N0")</td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td>Last file uploaded</td>
                                <td>NA</td>
                            </tr>
                            <tr>
                                <td>Total Files uploaded</td>
                                <td>0</td>
                            </tr>
                        }
                    </table>
                    @if (!string.IsNullOrEmpty(Summary))
                    {
                        <label class="text-danger">@Summary</label>
                    }
                </div>
                <div class="col-12">
                    @if (loadCounts is null)
                    {
                        <Loader />
                    }
                    else if (loadCounts.Count() == 0)
                    {
                        <p>No Data Found</p>
                    }
                    else
                    {
                        <div class="col-md-12 col-sm-12">
                            <label class="text"> Data Analysis Chart</label>
                            <div class="col-md-12 btn-group">
                                <button class="btn @(selectedType == "Daily" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Daily"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Daily"]</button>
                                <button class="btn @(selectedType == "Weekly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Weekly"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Weekly"]</button>
                                <button class="btn @(selectedType == "Monthly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Monthly"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Monthly"]</button>
                            </div>
                            <br/>
                            @if (chartview)
                            {
                                <div class="col-md-12 col-sm-12">
                                    <SfChart @ref="@chartInstance" Title="@ChartTitle" Width="@Width" Theme="@Theme">
                                        <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>

                                        <ChartPrimaryXAxis Title="@XAxisTitle" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="90">
                                            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                        </ChartPrimaryXAxis>

                                        <ChartPrimaryYAxis Title="@YAxisTitle">
                                            <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                                        </ChartPrimaryYAxis>

                                        <ChartAxes>
                                            <ChartAxis Name="SecondaryYAxis" OpposedPosition="true" Title="Overloading Ratio (%)" LabelFormat="{value}%">
                                                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                                <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                            </ChartAxis>
                                        </ChartAxes>

                                        <ChartSeriesCollection>
                                            <ChartSeries Name="Overloaded Vehicles" ColumnWidth="0.5" DataSource="@ChartData"
                                                         XName="DateUnitName" YName="OverloadVehicle" Width="2"
                                                         Type="ChartSeriesType.Column" EnableTooltip="true">
                                                <ChartMarker>
                                                    <ChartDataLabel Visible="false" Position="LabelPosition.Top">
                                                        <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                    </ChartDataLabel>
                                                </ChartMarker>
                                                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                            </ChartSeries>

                                            <ChartSeries Name="Total number of measured Vehicles" ColumnWidth="0.5" DataSource="@ChartData"
                                                         XName="DateUnitName" YName="TotalVehicle" Width="2"
                                                         Type="ChartSeriesType.Column" EnableTooltip="true">
                                                <ChartMarker>
                                                    <ChartDataLabel Visible="false" Position="LabelPosition.Top">
                                                        <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                    </ChartDataLabel>
                                                </ChartMarker>
                                                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                            </ChartSeries>

                                            @{
                                                var ratioData = ChartData.Select(data => new
                                                {
                                                    data.DateUnitName,
                                                    Ratio = data.TotalVehicle > 0 ? (data.OverloadVehicle / (double)data.TotalVehicle) * 100 : 0
                                                }).ToList();
                                            }

                                            <ChartSeries Name="Overload Ratio (%)"
                                                         DataSource="@ratioData"
                                                         XName="DateUnitName"
                                                         YName="Ratio"
                                                         Width="2"
                                                         Type="ChartSeriesType.Line"
                                                         EnableTooltip="true"
                                                         YAxisName="SecondaryYAxis">
                                                <ChartMarker Visible="false" Height="10" Width="10"></ChartMarker>
                                            </ChartSeries>
                                        </ChartSeriesCollection>

                                        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                        <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                                    </SfChart>

                                </div>
                                
                            }
                        </div>
                    }
                </div>              
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Station Station { get; set; }

    private IEnumerable<UploadedFile> files { get; set; }
    private IEnumerable<AxleLoadCount> loadCounts { get; set; } = null;

    private (IEnumerable<AxleLoadReport>, bool, string) report { get; set; }
    private Theme Theme { get; set; } = 0;
    private SfChart chartInstance;
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;
    public IEnumerable<AxleLoadReport> ChartData { get; set; }
    private ChartSeriesType chartSeriesType { get; set; } = ChartSeriesType.StackingColumn;
    public string Width { get; set; } = "100%";
    public string FileName { get; set; } = "Charts";
    public string Format { get; set; } = "{value} GW";
    public string ChartTitle { get; set; } = "";
    public string XAxisTitle { get; set; } = "";
    public string YAxisTitle { get; set; } = "";
    private string Summary { get; set; } = "";
    private string selectedType { get; set; } 
    private ReportParameters reportParameters { get; set; } = new();
    private bool chartview { get; set; } = false;
    private bool redrawPaths = true;
    private bool animate = false;
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        files = await fileService.Get(Station.StationId);
        loadCounts = await loadService.GetDateWiseCount(Station, DateTime.Today.AddMonths(-1), DateTime.Today.AddDays(-1));
        await TypeChanged("Daily");
    }
    private async Task TypeChanged(string type)
    {
        selectedType = type;
        isLoading = true;
        await LoadChart();
    }
    private async Task LoadChart()
    {
        if (Station.StationId > 0 && !reportParameters.Stations.Contains(Station.StationId))
        {
            reportParameters.Stations.Add(Station.StationId);
            IEnumerable<WIMScale> wimScales = await wimScaleService.GetByStationId(Station.StationId);
            reportParameters.WIMScales = wimScales.ToList();
        }
        if (selectedType == "Monthly")
        {
            reportParameters.DateStart = DateTime.Now.AddMonths(-12);
            reportParameters.DateEnd = DateTime.Now;
            report = await loadService.GetMonthlyOverloadedReport(reportParameters);
            if (report.Item2)
            {
                if (report.Item1.Count() > 0)
                {
                    ChartData = report.Item1;
                }
                else
                {
                    chartview = false;
                    Summary = "No value is available";
                }
            }
            else
            {
                Summary = report.Item3;
            }
        }
        else if (selectedType == "Weekly")
        {
            reportParameters.DateStart = DateTime.Now.AddMonths(-3);
            reportParameters.DateEnd = DateTime.Now;
            report = await loadService.GetWeeklyOverloadedReport(reportParameters);
            if (report.Item2)
            {
                if (report.Item1.Count() > 0)
                {
                    ChartData = report.Item1;
                }
                else
                {
                    chartview = false;
                    Summary = "No value is available";
                }
            }
            else
            {
                Summary = report.Item3;
            }
        }
        else if (selectedType == "Daily")
        {
            reportParameters.DateStart = DateTime.Now.AddMonths(-1);
            reportParameters.DateEnd = DateTime.Now;
            //report = await loadService.GetHourlyOverloadedReport(reportParameters);
            
            report = await loadService.GetDailyOverloadedReport(reportParameters);
            if (report.Item2)
            {
                if (report.Item1.Count() > 0)
                {
                    ChartData = report.Item1;
                }
                else
                {
                    chartview = false;
                    Summary = "No value is available";
                }
            }
            else
            {
                Summary = report.Item3;
            }
        }
        ChartTitle = "Number of Overloaded Vehicle " + "( " + reportParameters.DateStart.ToString("dd MMM yyy") + " to " + reportParameters.DateEnd.ToString("dd MMM yyy") + " )";
        YAxisTitle = "Number of Vehicles (Units)";
        XAxisTitle = selectedType;
        chartview = true;
        isLoading = false;
    }
}
