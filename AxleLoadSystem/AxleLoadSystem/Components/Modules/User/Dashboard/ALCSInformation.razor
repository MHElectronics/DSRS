@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@inject IStationService stationService
@inject IFileService fileService
@inject IAxleLoadService loadService
@inject IOverloadReportService reportService
@inject IWIMScaleService wimScaleService
@inject IAppState appState
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.CommonPages> localizerCommon

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">@localizerCommon["Dashboard.ALCSInformation"]</h3>
    </div>
    <div class="card-body">
        @if (Station is null)
        {
            <Loader />
        }
        else
        {
            <div class="row">
                <div class="col-12">
                    <table class="table">
                        <tr>
                            <td>@localizerCommon["Dashboard.ALCSName"]</td>
                            <td>@Station.StationName</td>
                        </tr>
                        <tr>
                            <td>@localizerCommon["Dashboard.Address"]</td>
                            <td>@Station.Address</td>
                        </tr>
                        <tr>
                            <td>@localizerCommon["Dashboard.DrivingDirection"]</td>
                            <td>@(IsUpbound ? "Upbound" : "Downbound")</td>
                        </tr>
                        @if (wims is not null && wims.Any())
                        {
                            <tr>
                                <td>@localizerCommon["Dashboard.LaneNumber"]</td>
                                <td>
                                    @(String.Join(",", wims.Where(w => w.IsUpbound == IsUpbound)
                                        .OrderBy(w => w.LaneNumber)
                                        .Select(w => w.LaneNumber)))
                                </td>
                            </tr>
                        }
                    </table>
                    @if (!string.IsNullOrEmpty(Summary))
                    {
                        <label class="text-danger">@Summary</label>
                    }
                </div>
                <div class="col-12">
                    @if (loadCounts is null)
                    {
                        <Loader />
                    }
                    else
                    {
                        @if (chartview)
                        {
                            <div class="col-md-12 col-sm-12">
                                <label class="text">@localizerCommon["Dashboard.DataAnalysisChart"] </label>
                            <div class="col-md-12 btn-group">
                                <button class="btn @(selectedType == "Daily" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Daily"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Daily"]</button>
                                <button class="btn @(selectedType == "Day-of-week" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Day-of-week"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Weekly"]</button>
                                <button class="btn @(selectedType == "Monthly" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Monthly"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Monthly"]</button>
                            </div>
                            <br/>

                            <div class="col-md-12 col-sm-12">
                                <SfChart @ref="@chartInstance" Title="@ChartTitle" Width="@Width" Theme="@Theme" EnableAnimation="true">
                                    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>

                                    <ChartPrimaryXAxis Title="@XAxisTitle" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="90">
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                    </ChartPrimaryXAxis>

                                    <ChartPrimaryYAxis Title="@YAxisTitle">
                                        <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                                    </ChartPrimaryYAxis>

                                    <ChartAxes>
                                            <ChartAxis Name="SecondaryYAxis" OpposedPosition="true" Title="Overloaded Vehicle Ratio (%)" LabelFormat="{value}%">
                                            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                        </ChartAxis>
                                    </ChartAxes>

                                    <ChartSeriesCollection>
                                        <ChartSeries Name="Overloaded Vehicles" ColumnWidth="0.5" DataSource="@ChartData.OrderBy(x=>x.DateUnit)" XName="DateUnitName" YName="OverloadVehicle" Width="2" Type="chartSeriesType" EnableTooltip="true">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="false" Position="LabelPosition.Top">
                                                    <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                </ChartDataLabel>
                                            </ChartMarker>
                                            <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                        </ChartSeries>

                                        <ChartSeries Name="Total Number of measured Vehicles" ColumnWidth="0.5" DataSource="@ChartData.OrderBy(x=>x.DateUnit)" XName="DateUnitName" YName="TotalVehicle" Width="2" Type="chartSeriesType" EnableTooltip="true">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="false" Position="LabelPosition.Top">
                                                    <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                </ChartDataLabel>
                                            </ChartMarker>
                                            <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                        </ChartSeries>

                                        @* Calculate Overloading Ratio *@
                                        @{
                                            var overloadingRatioData = ChartData.Select(x => new
                                            {
                                                x.DateUnit,
                                                x.DateUnitName,
                                                OverloadingRatio = (x.OverloadVehicle / (double)x.TotalVehicle) * 100
                                            }).ToList();
                                        }

                                        <ChartSeries Name="Overloaded Vehicle Ratio (%)" DataSource="@overloadingRatioData.OrderBy(x=>x.DateUnit)" XName="DateUnitName" YName="OverloadingRatio" YAxisName="SecondaryYAxis" Width="2" Type="ChartSeriesType.Line" EnableTooltip="true">
                                            <ChartMarker Visible="true" Height="10" Width="10"></ChartMarker>
                                        </ChartSeries>
                                    </ChartSeriesCollection>

                                    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                    <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                                </SfChart>
                            </div>
                        </div>
                        }
                    }
                </div>              
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Station Station { get; set; }
    [Parameter]
    public bool IsUpbound { get; set; }

    private IEnumerable<WIMScale> wims { get; set; }
    private IEnumerable<AxleLoadCount> loadCounts { get; set; } = null;

    private (IEnumerable<AxleLoadReport>, bool, string) report { get; set; }
    private Theme Theme { get; set; } = 0;
    private SfChart chartInstance;
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;
    public List<AxleLoadReport> ChartData { get; set; }
    public List<AxleLoadReport> ChartDataByAxle { get; set; }
    private ChartSeriesType chartSeriesType { get; set; } = ChartSeriesType.Column;
    public string Width { get; set; } = "100%";
    public string FileName { get; set; } = "Charts";
    public string Format { get; set; } = "{value} GW";
    public string ChartTitle { get; set; } = "";
    public string XAxisTitle { get; set; } = "";
    public string YAxisTitle { get; set; } = "";
    private string Summary { get; set; } = "";
    private string selectedType { get; set; } 
    private ReportParameters reportParameters { get; set; } = new();
    private bool chartview { get; set; } = false;
    private bool redrawPaths = true;
    private bool animate = false;
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        wims = await wimScaleService.GetByStation(new WIMScale() { StationId = this.Station.StationId });
        loadCounts = await loadService.GetDateWiseCount(Station, DateTime.Today.AddMonths(-1), DateTime.Today.AddDays(-1));
        await TypeChanged("Daily");
    }
    private async Task TypeChanged(string type)
    {
        selectedType = type;
        isLoading = true;
        await LoadChart();
    }
    private async Task LoadChart()
    {
        Summary = "";
        if (Station.StationId > 0)
        {
            reportParameters.Stations = new();
            reportParameters.WIMScales = new();
            reportParameters.Stations.Add(Station.StationId);
            reportParameters.WIMScales.AddRange(wims.Where(w => w.IsUpbound == IsUpbound).ToList());
        }

        if (selectedType == "Monthly")
        {
            reportParameters.DateStart = DateTime.Now.AddMonths(-12);
            reportParameters.DateEnd = DateTime.Now;
            report = await reportService.GetMonthlyOverloadedTimeSeriesReport(reportParameters);
        }
        else if (selectedType == "Day-of-week")
        {
            reportParameters.DateStart = DateTime.Now.AddMonths(-3);
            reportParameters.DateEnd = DateTime.Now;
            report = await reportService.GetWeeklyOverloadedTimeSeriesReport(reportParameters);
        }
        else if (selectedType == "Daily")
        {
            reportParameters.DateStart = DateTime.Now.AddMonths(-1);
            reportParameters.DateEnd = DateTime.Now;

            report = await reportService.GetDailyOverloadedTimeSeriesReport(reportParameters);            
        }
        if (report.Item2)
        {
            if (report.Item1.Count() > 0)
            {
                ChartDataByAxle = report.Item1.ToList();
                IEnumerable<int> dataUnits = ChartDataByAxle.Select(d => d.DateUnit).Distinct();
                ChartData = new();
                foreach (int dataUnit in dataUnits.OrderBy(x => x))
                {
                    AxleLoadReport item = new();
                    item.DateUnit = ChartDataByAxle.FirstOrDefault(d => d.DateUnit == dataUnit).DateUnit;
                    item.DateUnitName = ChartDataByAxle.FirstOrDefault(d => d.DateUnit == dataUnit).DateUnitName;
                    item.OverloadVehicle = ChartDataByAxle.Where(d => d.DateUnit == dataUnit).Sum(x => x.OverloadVehicle);
                    item.NotOverloadVehicle = ChartDataByAxle.Where(d => d.DateUnit == dataUnit).Sum(x => x.NotOverloadVehicle);
                    item.TotalVehicle = ChartDataByAxle.Where(d => d.DateUnit == dataUnit).Sum(x => x.TotalVehicle);

                    ChartData.Add(item);
                }

                // ChartData = report.Item1.ToList();

                XAxisTitle = dataTypeTitle2();
                chartview = true;
            }
            else
            {
                chartview = false;
                Summary = "No value is available";
            }
        }
        else
        {
            Summary = report.Item3;
        }
        ChartTitle = "Transition of Overloaded Vehicle " + "( " + reportParameters.DateStart.ToString("dd MMM yyy") + " to " + reportParameters.DateEnd.ToString("dd MMM yyy") + " )";
        YAxisTitle = "Number of vehicles";
        XAxisTitle = selectedType;
        isLoading = false;
    }

    private string dataTypeTitle2()
    {
        if (selectedType == "Month")
        {
            return "Month";
        }
        else if (selectedType == "Day")
        {
            return "Day";
        }
        else if (selectedType == "Hour")
        {
            return "Hour";
        }
        else if (selectedType == "Year")
        {
            return "Year";
        }
        else if (selectedType == "Day-of-week")
        {
            return "Day-of-week";
        }

        return "";
    }
}
