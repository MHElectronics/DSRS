@page "/Report/NumberOfAxle"
@using BOL.Helpers
@using Services
@using Services.Helpers
@using Syncfusion.Blazor
@using Syncfusion.PdfExport;
@using Syncfusion.Blazor.Charts
@using System.Globalization
@inject IOverloadReportService reportService
@inject IAppState appState
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IExportHelper exportHelper

<PageTitleComponent Title="@localizer["ReportTitle.Overweight"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <ReportSelection @ref="refReportSelection" OnParametersChanged="HandleParametersChanged" />
    </div>
    @if (!selectionEnabled)
    {
        <div class="card-footer">
            @if (appState is not null && showReportGroupSelection)
            {
                <div class="row">
                    <div class="col-md-12 btn-group">
                        <button class="btn @(selectedType == "Hour" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Hour"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Hourly"]</button>
                        <button class="btn @(selectedType == "Day" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Day"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Daily"]</button>
                        <button class="btn @(selectedType == "Day-of-week" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Day-of-week"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Weekly"]</button>
                        <button class="btn @(selectedType == "Month" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Month"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Monthly"]</button>
                        <button class="btn @(selectedType == "Year" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Year"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Yearly"]</button>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(summary))
            {
                <label class="text-danger">@summary</label>
            }
        </div>
    }
</div>
@if (showChart && data is not null)
{
    <div class="card card-primary">
        <div class="card-header">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" data-toggle="pill" href="#tab_graph" role="tab" aria-selected="true">@localizer["Report.Graph"]</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="pill" href="#tab_table" role="tab" aria-selected="false">@localizer["Report.Table"]</a>
                </li>
                <li class="nav-item dropdown">
                    <span class="nav-link dropdown-toggle" id="navbarDropdown" role="button" data-toggle="dropdown" aria-expanded="false">
                        @localizer["Report.Export"]
                    </span>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <li><span class="dropdown-item" @onclick="@(() => Export("csv"))">@localizer["Report.CSV"]</span></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><span class="dropdown-item" @onclick="@(() => Export("chart"))">@localizer["Report.Graph"]</span></li>
                    </ul>
                </li>
            </ul>
        </div>
        <div class="card-body">
            <div class="tab-content">
                <div class="tab-pane active" id="tab_graph">
                    <div class="row">
                        <div class="col-md-12 btn-group">
                            <button class="btn @(chartSeriesType == ChartSeriesType.StackingColumn ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => chartSeriesType = ChartSeriesType.StackingColumn)">@localizer["Report.StackingColumnChart"]</button>
                            <button class="btn @(chartSeriesType == ChartSeriesType.Line ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => chartSeriesType = ChartSeriesType.Line)">@localizer["Report.LineChart"]</button>
                        </div>
                    </div>
                    <div class="col-md-12 col-sm-12 text-center" style="padding-top:10px;">
                        @if (showChart)
                        {
                            @* Calculate Overloading Ratio *@
                            var overloadingRatioData = data
                            .GroupBy(x => x.NumberofAxle)
                            .Where(group => group.Key != 0)  // Filter out groups with NumberofAxle = 0
                            .Select(group => new
                            {
                                NumberofAxle = group.Key,
                                OverloadingRatio = group.Sum(x => x.OverloadVehicle) > 0
                            ? (group.Sum(x => x.OverloadVehicle) / (double)group.Sum(x => x.TotalVehicle)) * 100
                            : 0
                            })
                            .ToList();

                            <SfChart @ref="@chartInstance" Title="@ChartTitle" Width="100%" Height="100%" Theme="@Theme">
                                <ChartArea>
                                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                                </ChartArea>

                                <ChartPrimaryXAxis Title="Vehicle Type" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="90">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                </ChartPrimaryXAxis>

                                <ChartPrimaryYAxis Title="Number of Overloaded Vehicles">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                                </ChartPrimaryYAxis>

                                <ChartAxes>
                                    <ChartAxis Name="SecondaryYAxis" OpposedPosition="true" Title="Overloaded Vehicle Ratio (%)" LabelFormat="{value}%">
                                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                    </ChartAxis>
                                </ChartAxes>

                                <ChartSeriesCollection>
                                    @foreach (var dayGroup in data.GroupBy(x => x.DateUnit))
                                    {
                                        if (dayGroup.Any(x => x.NumberofAxle != 0))
                                        {
                                            <ChartSeries Name="@dayGroup.First().DateUnitName"
                                                         ColumnWidth="0.5"
                                                         DataSource="@dayGroup.Where(x => x.NumberofAxle != 0).OrderBy(x => x.NumberofAxle)"
                                                         XName="NumberofAxle"
                                                         YName="OverloadVehicle"
                                                         Type="chartSeriesType"
                                                         EnableTooltip="true">
                                                <ChartMarker>
                                                    <ChartDataLabel Visible="false" Position="LabelPosition.Top">
                                                        <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                    </ChartDataLabel>
                                                </ChartMarker>
                                                <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                            </ChartSeries>
                                        }
                                    }

                                    <ChartSeries Name="Overloaded Vehicle Ratio (%)"
                                                 DataSource="@overloadingRatioData.OrderBy(x=>x.NumberofAxle)"
                                                 XName="NumberofAxle"
                                                 YName="OverloadingRatio"
                                                 YAxisName="SecondaryYAxis"
                                                 Type="ChartSeriesType.Line"
                                                 EnableTooltip="true">
                                        <ChartMarker Visible="true" Height="10" Width="10"></ChartMarker>
                                    </ChartSeries>
                                </ChartSeriesCollection>

                                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                            </SfChart>

                        }
                    </div>
                </div>
                <div class="tab-pane" id="tab_table">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th class="text-right">Vehicle Type</th>
                                <th>@selectedType</th>
                                <th class="text-right">Overloaded Vehicle</th>
                                <th class="text-right">Total Number of Mesured Vehicles</th>
                                <th class="text-right">Overloaded Vehicle Ratio by Axle</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (int numberOfAxle in data.Select(d => d.NumberofAxle).Distinct().OrderBy(d => d))
                            {
                                int sumOverloadedVehicle = data.Where(d => d.NumberofAxle == numberOfAxle).Sum(d => d.OverloadVehicle);
                                int sumTotalVehicle = data.Where(d => d.NumberofAxle == numberOfAxle).Sum(d => d.TotalVehicle);

                                decimal ratio = (decimal)sumOverloadedVehicle / sumTotalVehicle;

                                <tr>
                                    <th class="text-right">@numberOfAxle</th>
                                    <td></td> 
                                    <td class="text-right">@sumOverloadedVehicle.ToString("N0")</td>
                                    <td class="text-right">@sumTotalVehicle.ToString("N0")</td>
                                    <td class="text-right">@ratio.ToString("P2")</td>
                                </tr>
                                @foreach (AxleLoadReport item in data.Where(d => d.NumberofAxle == numberOfAxle).OrderBy(d => d.DateUnit).ThenBy(d => d.NumberofAxle))
                                {
                                    <tr>
                                        <td></td>
                                        <td>@item.DateUnitName</td>
                                        <td class="text-right">@item.OverloadVehicle.ToString("N0")</td>
                                        <td class="text-right">@item.TotalVehicle.ToString("N0")</td>
                                        <td class="text-right">@(((decimal)item.OverloadVehicle / (decimal)item.TotalVehicle).ToString("P2"))</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>

                </div>
            </div>
        </div>
    </div>
}

@code {
    private Theme Theme { get; set; } = 0;
    private SfChart chartInstance;
    private LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;

    private IEnumerable<AxleLoadReport> data { get; set; }
    private ReportSelection refReportSelection { get; set; }

    private ChartSeriesType chartSeriesType { get; set; } = ChartSeriesType.StackingColumn;
    private string Format { get; set; } = "{value} GW";
    private string ChartTitle { get; set; } = "";
    private string selectedType { get; set; } = "";
    private string summary { get; set; } = "";
    private bool showReportGroupSelection { get; set; } = false;
    private bool showChart { get; set; }
    private bool isLoading = false;
    private bool selectionEnabled = false;

    protected override async Task OnInitializedAsync()
    {
        showReportGroupSelection = await appState.IsReportParametersSet();
    }

    private async Task Export(string type)
    {
        List<(string Header, string FieldName, Type FieldType)> fields = new();
        fields.Add((selectedType, nameof(AxleLoadReport.DateUnitName), new AxleLoadReport().DateUnitName.GetType()));
        fields.Add(("Vehicle Type", nameof(AxleLoadReport.NumberofAxle), new AxleLoadReport().NumberofAxle.GetType()));
        fields.Add(("Overload Vehicle", nameof(AxleLoadReport.OverloadVehicle), new AxleLoadReport().OverloadVehicle.GetType()));
        fields.Add(("Total Number of Measured Vehicles", nameof(AxleLoadReport.TotalVehicle), new AxleLoadReport().TotalVehicle.GetType()));
        fields.Add(("Overloaded Vehicle Ratio by Axle", nameof(AxleLoadReport.OverloadingRatio), new AxleLoadReport().OverloadingRatio.GetType()));

        string fileName = "Number of axles";

        // if (type == "excel")
        // {
        //     byte[] fileByte = exportHelper.CreateSpreadsheetWorkbook<AxleLoadReport>(fields, data.ToList());

        //     MemoryStream ms = new MemoryStream(fileByte);

        //     using var streamRef = new DotNetStreamReference(ms);
        //     await jsRuntime.InvokeVoidAsync("downloadFileFromStream", "Test.xlsx", streamRef);
        // }
        // else 
        if (type == "csv")
        {
            MemoryStream stream = await exportHelper.GenerateCSVStream<AxleLoadReport>(fields, data.ToList(), refReportSelection.GetSelection());

            using var streamRef = new DotNetStreamReference(stream);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName + ".csv", streamRef);
        }
        else if (type == "chart")
        {
            await chartInstance.ExportAsync(ExportType.PNG, fileName, allowDownload: true, isBase64: true);
        }
        // else if (type == "pdf")
        // {
        //     MemoryStream stream = exportHelper.CreatePdf<AxleLoadReport>(data.ToList());

        //     using var streamRef = new DotNetStreamReference(stream);
        //     await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName + ".pdf", streamRef);
        // }
    }

    public void ExportComplete(ExportEventArgs exportEventArgs)
    {
        string base64 = exportEventArgs.Base64;
    }
    private void HandleParametersChanged(bool parameters)
    {
        selectionEnabled = parameters;
    }
    private async Task TypeChanged(string type)
    {
        selectedType = type;
        isLoading = true;
        ReportParameters reportParameters = refReportSelection.GetSelection();
        if (reportParameters.Stations is not null)
        {
            await LoadChart(reportParameters);
        }
        isLoading = false;
    }
    private async Task LoadChart(ReportParameters reportParameters)
    {
        summary = "";
        ChartTitle = "Number of overloaded vehicles for each vehicle type " + "( " + reportParameters.DateStart.ToString("dd MMM yyy") + " to " + reportParameters.DateEnd.ToString("dd MMM yyy") + " )";
        showChart = true;

        (IEnumerable<AxleLoadReport>, bool, string) report = new();
        if (selectedType == "Month")
        {
            report = await reportService.GetMonthlyOverloadedNumberOfAxlesReport(reportParameters);
        }
        else if (selectedType == "Day-of-week")
        {
            report = await reportService.GetWeeklyOverloadedNumberOfAxlesReport(reportParameters);
        }
        else if (selectedType == "Hour")
        {
            report = await reportService.GetHourlyOverloadedNumberOfAxlesReport(reportParameters);
        }
        else if (selectedType == "Year")
        {
            report = await reportService.GetYearlyOverloadedNumberOfAxlesReport(reportParameters);
        }
        else if (selectedType == "Day")
        {
            report = await reportService.GetDailyOverloadedNumberOfAxlesReport(reportParameters);
        }

        if (report.Item2)
        {
            if (report.Item1 is not null && report.Item1.Count() > 0)
            {
                data = report.Item1;
            }
            else
            {
                showChart = false;
                summary = "No value is available";
            }
        }
        else
        {
            summary = report.Item3;
        }
    }
}
