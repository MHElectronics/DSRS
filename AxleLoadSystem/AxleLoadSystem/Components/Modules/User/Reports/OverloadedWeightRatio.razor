@page "/Report/OverloadedWeightRatio"
@using BOL.Helpers
@using Services
@using Services.Helpers
@using Syncfusion.Blazor
@using System.Globalization
@using System.Text
@using Syncfusion.Blazor.Charts
@inject IAxleLoadService loadService
@inject IOverloadReportService reportService
@inject IConfigurationService configurationService
@inject NavigationManager NavigationManager
@inject IAppState appState
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IExportHelper exportHelper

<PageTitleComponent Title="@localizer["ReportTitle.OverloadedWeightRatio"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <ReportSelection @ref="refReportSelection" OnParametersChanged="HandleParametersChanged" />
    </div>
    @if (!selectionEnabled)
    {
        <div class="card-footer">
            @if (appState is not null && showReportGroupSelection)
            {
                <div class="row">
                    <div class="col-md-4">
                        <button class="btn btn-primary" @onclick="ShowReport" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Show"]</button>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(Summary))
            {
                <label class="text-danger">@Summary</label>
            }
        </div>
    }
</div>
@if (data is not null)
{
    <div class="card card-primary">
        <div class="card-header">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" data-toggle="pill" href="#tab_graph" role="tab" aria-selected="true">@localizer["Report.Graph"]</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="pill" href="#tab_table" role="tab" aria-selected="false">@localizer["Report.Table"]</a>
                </li>
                <li class="nav-item dropdown">
                    <span class="nav-link dropdown-toggle" id="navbarDropdown" role="button" data-toggle="dropdown" aria-expanded="false">
                        @localizer["Report.Export"]
                    </span>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <li><span class="dropdown-item" @onclick="@(() => Export("csv"))">@localizer["Report.CSV"]</span></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><span class="dropdown-item" @onclick="@(() => Export("chart"))">@localizer["Report.Graph"]</span></li>
                    </ul>
                </li>
            </ul>
        </div>
        <div class="card-body">
            <div class="tab-content">
                <div class="tab-pane active" id="tab_graph">
                    <div class="col-md-12 col-sm-12 text-center" style="padding-top:10px;">
                        @{
                            var chartSeriesCollection = new List<ChartSeries>();

                            for (int axleCount = 2; axleCount <= maxNumberOfAxle; axleCount++)
                            {
                                var items = data.Where(d => d.DateUnit == axleCount);
                                var chartData = Enumerable.Range(1, 9).Select(range => new OverloadingFrequency
                            {
                                Range = GetRangeLabel(range),
                                Frequency = (items.Any(d => d.GrossVehicleWeightRange == range.ToString())
                                                ? items.First(d => d.GrossVehicleWeightRange == range.ToString()).OverloadingRatio
                                                : 0) * 100}).ToList();

                                chartSeriesCollection.Add(new ChartSeries
                                {
                                    Name = axleCount.ToString(),
                                    DataSource = chartData,
                                    XName = "Range",
                                    YName = "Frequency",
                                    Type = ChartSeriesType.Line,
                                    EnableTooltip = true
                                });
                            }
                        }

                        <SfChart @ref="chartInstance" Title="Distribution of Overload by Freight Vehicle Type" Width="100%" Height="100%">
                            <ChartArea>
                                <ChartAreaBorder Width="0"></ChartAreaBorder>
                            </ChartArea>

                            <ChartPrimaryXAxis Title="Percentage Overload" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="90">
                                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                            </ChartPrimaryXAxis>

                            <ChartPrimaryYAxis Title="Frequency (%)" LabelFormat="{value}">
                                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                            </ChartPrimaryYAxis>

                            <ChartSeriesCollection>
                                @foreach (var series in chartSeriesCollection)
                                {
                                    <ChartSeries Name="@series.Name"
                                    DataSource="@series.DataSource"
                                    XName="@series.XName"
                                    YName="@series.YName"
                                    Type="@series.Type"
                                    EnableTooltip="true">
                                        <ChartMarker Visible="true" Height="10" Width="10"></ChartMarker>
                                    </ChartSeries>
                                }
                            </ChartSeriesCollection>

                            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                            <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                        </SfChart>

                    </div>
                </div>

                <div class="tab-pane" id="tab_table">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Freight Vehicle Type</th>
                                @foreach (var label in GetRangeLabels())
                                {
                                    <th class="text-right">@label</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 2; i <= maxNumberOfAxle; i++)
                            {
                                var items = data.Where(d => d.DateUnit == i);
                                <tr>
                                    <td>@i</td>
                                    @foreach (var range in Enumerable.Range(1, 9))
                                    {
                                        var weightRatio = items.Any(d => d.GrossVehicleWeightRange == range.ToString())
                                        ? items.First(d => d.GrossVehicleWeightRange == range.ToString()).OverloadingRatio
                                        : 0;
                                        <td class="text-right" style="background-color:@GetGroupColor(weightRatio); color:black;">@weightRatio.ToString("P2")</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ReportSelection refReportSelection { get; set; }
    private SfChart chartInstance;
    private int maxNumberOfAxle;
    public List<AxleLoadReport> data { get; set; }
    private bool showReportGroupSelection = false;
    private string Summary { get; set; } = "";
    private bool isLoading = false;
    private bool selectionEnabled = false;

    public class OverloadingFrequency
    {
        public string Range { get; set; }
        public double Frequency { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        showReportGroupSelection = await appState.IsReportParametersSet();
        var reportConfiguration = await configurationService.GetConfiguration();
        if (reportConfiguration != null)
        {
            maxNumberOfAxle = reportConfiguration.NumberOfAxle;
        }
    }

    private string GetRangeLabel(int range)
    {
        return range switch
        {
            1 => "Less than 5%",
            2 => "5% - 10%",
            3 => "10% - 15%",
            4 => "15% - 20%",
            5 => "20% - 25%",
            6 => "25% - 30%",
            7 => "30% - 35%",
            8 => "35% - 40%",
            _ => "40% or more"
        };
    }

    private IEnumerable<string> GetRangeLabels()
    {
        return Enumerable.Range(1, 9).Select(GetRangeLabel);
    }

    private async Task Export(string type)
    {
        if (data == null) return;

        if (type == "csv")
        {
            var csvData = new StringBuilder();
            csvData.AppendLine("Freight Vehicle Type,Less than 5%,5% - 10%,10% - 15%,15% - 20%,20% - 25%,25% - 30%,30% - 35%,35% - 40%,40% or more");

            for (int i = 2; i <= maxNumberOfAxle; i++)
            {
                var items = data.Where(d => d.DateUnit == i);
                var row = new List<string> { i.ToString() };

                foreach (var range in Enumerable.Range(1, 9))
                {
                    var ratio = items.Any(d => d.GrossVehicleWeightRange == range.ToString())
                    ? items.First(d => d.GrossVehicleWeightRange == range.ToString()).OverloadingRatio
                    : 0;
                    row.Add(ratio.ToString("P2"));
                }

                csvData.AppendLine(string.Join(",", row));
            }

            var stream = exportHelper.GenerateCSVStreamFromString(csvData.ToString());
            using var streamRef = new DotNetStreamReference(stream);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", "Overloaded Weight Ratio.csv", streamRef);
        }
        else if (type == "chart")
        {
            await chartInstance.ExportAsync(Syncfusion.Blazor.Charts.ExportType.PNG, "Overloaded Weight Ratio_Freight Vehicle Type", allowDownload: true);
        }
    }

    private void HandleParametersChanged(bool parameters)
    {
        selectionEnabled = parameters;
    }
    private async Task ShowReport()
    {
        Summary = "";

        ReportParameters reportParameters = refReportSelection.GetSelection();
        (IEnumerable<AxleLoadReport>, bool, string) report = await reportService.GetOverloadedWeightRatioReport(reportParameters);

        if (report.Item2)
        {
            if (report.Item1.Count() > 0)
            {
                data = report.Item1.ToList();
            }
            else
            {
                Summary = "No value is available";
            }
        }
        else
        {
            Summary = report.Item3;
        }
    }

    private string GetGroupColor(double value)
    {
        // Handle the ranges in increments of 5%
        if (value >= 1.00) return "rgb(255, 0, 0)";   // 100%
        if (value >= 0.95) return "rgb(255, 13, 13)"; // 95%
        if (value >= 0.90) return "rgb(255, 26, 26)"; // 90%
        if (value >= 0.85) return "rgb(255, 38, 38)"; // 85%
        if (value >= 0.80) return "rgb(255, 51, 51)"; // 80%

        if (value >= 0.75) return "rgb(255, 64, 64)";  // 75%
        if (value >= 0.70) return "rgb(255, 77, 77)";  // 70%
        if (value >= 0.65) return "rgb(255, 90, 90)";  // 65%
        if (value >= 0.60) return "rgb(255, 102, 102)"; // 60%
        if (value >= 0.55) return "rgb(255, 115, 115)"; // 55%

        if (value >= 0.50) return "rgb(255, 128, 128)"; // 50%
        if (value >= 0.45) return "rgb(255, 141, 141)"; // 45%
        if (value >= 0.40) return "rgb(255, 154, 154)"; // 40%
        if (value >= 0.35) return "rgb(255, 166, 166)"; // 35%
        if (value >= 0.30) return "rgb(255, 179, 179)"; // 30%

        if (value >= 0.25) return "rgb(255, 192, 192)"; // 25%
        if (value >= 0.20) return "rgb(255, 204, 204)"; // 20%
        if (value >= 0.15) return "rgb(255, 217, 217)"; // 15%
        if (value >= 0.10) return "rgb(255, 230, 230)"; // 10%
        if (value >= 0.05) return "rgb(255, 243, 243)"; // 5%

        return "rgb(255, 255, 255)";
    }
}
