@page "/Report/OverloadedWeightRatio"
@using BOL.Helpers
@using Services
@using Services.Helpers
@using Syncfusion.Blazor
@using Syncfusion.PdfExport;
@using Syncfusion.Blazor.Charts
@using System.Globalization
@inject IAxleLoadService loadService
@inject IOverloadReportService reportService
@inject IConfigurationService configurationService
@inject NavigationManager NavigationManager
@inject IAppState appState
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IExportHelper exportHelper

<PageTitleComponent Title="@localizer["ReportTitle.OverloadedWeightRatio"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <ReportSelection @ref="refReportSelection" OnParametersChanged="HandleParametersChanged" />
    </div>
    @if (!selectionEnabled)
    {
        <div class="card-footer">
            @if (appState is not null && showReportGroupSelection)
            {
                <div class="row">
                    <div class="col-md-4">
                        <button class="btn btn-primary" @onclick="ShowReport" disabled="@(isLoading ? "disabled" : null)">Show</button>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(Summary))
            {
                <label class="text-danger">@Summary</label>
            }
        </div>
    }
</div>
@if (data is not null)
{
    <div class="card card-primary card-outline">
        <div class="card-body">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Freight Vehicle Type</th>
                        <th class="text-right">Less than 5%</th>
                        <th class="text-right">5% - 10%</th>
                        <th class="text-right">10% - 15%</th>
                        <th class="text-right">15% - 20%</th>
                        <th class="text-right">20% - 25%</th>
                        <th class="text-right">25% - 30%</th>
                        <th class="text-right">30% - 35%</th>
                        <th class="text-right">35% - 40%</th>
                        <th class="text-right">40% or more</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 2; i <= maxNumberOfAxle; i++)
                    {
                        IEnumerable<AxleLoadReport> items = data.Where(d => d.DateUnit == i);
                        double weightRatioGroup2 = items.Any(d => d.GrossVehicleWeightRange == "2") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "2").OverloadingRatio : 0;
                        double weightRatioGroup3 = items.Any(d => d.GrossVehicleWeightRange == "3") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "3").OverloadingRatio : 0;
                        double weightRatioGroup4 = items.Any(d => d.GrossVehicleWeightRange == "4") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "4").OverloadingRatio : 0;
                        double weightRatioGroup5 = items.Any(d => d.GrossVehicleWeightRange == "5") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "5").OverloadingRatio : 0;
                        double weightRatioGroup6 = items.Any(d => d.GrossVehicleWeightRange == "6") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "6").OverloadingRatio : 0;
                        double weightRatioGroup7 = items.Any(d => d.GrossVehicleWeightRange == "7") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "7").OverloadingRatio : 0;
                        double weightRatioGroup8 = items.Any(d => d.GrossVehicleWeightRange == "8") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "8").OverloadingRatio : 0;
                        double weightRatioGroup9 = items.Any(d => d.GrossVehicleWeightRange == "9") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "9").OverloadingRatio : 0;
                        double weightRatioGroup10 = items.Any(d => d.GrossVehicleWeightRange == "10") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "10").OverloadingRatio : 0;

                        <tr>
                            <td>@i</td>
                            @if (items is not null)
                            {
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup2);">@weightRatioGroup2.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup3);">@weightRatioGroup3.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup4);">@weightRatioGroup4.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup5);">@weightRatioGroup5.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup6);">@weightRatioGroup6.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup7);">@weightRatioGroup7.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup8);">@weightRatioGroup8.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup9);">@weightRatioGroup9.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup10);">@weightRatioGroup10.ToString("P2")</td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private ReportSelection refReportSelection { get; set; }

    private int maxNumberOfAxle { get; set; } = 7;
    public List<AxleLoadReport> data { get; set; }

    private string Summary { get; set; } = "";
    private bool showReportGroupSelection { get; set; } = false;
    private bool isLoading = false;
    private bool selectionEnabled = false;

    protected override async Task OnInitializedAsync()
    {
        showReportGroupSelection = await appState.IsReportParametersSet();
        Configuration reportConfiguration = await configurationService.GetConfiguration();
        if (reportConfiguration is not null)
        {
            maxNumberOfAxle = reportConfiguration.NumberOfAxle;
        }
    }

    private async Task Export(string type)
    {
        List<(string Header, string FieldName, Type FieldType)> fields = new();
        //fields.Add((selectedType, nameof(AxleLoadReport.DateUnitName), new AxleLoadReport().DateUnitName.GetType()));
        fields.Add(("Overload Vehicle", nameof(AxleLoadReport.OverloadVehicle), new AxleLoadReport().OverloadVehicle.GetType()));
        fields.Add(("Total Vehicle", nameof(AxleLoadReport.TotalVehicle), new AxleLoadReport().TotalVehicle.GetType()));
        fields.Add(("Overloaded Ratio", nameof(AxleLoadReport.OverloadingRatio), new AxleLoadReport().OverloadingRatio.GetType()));

        string fileName = "Overloaded Weight Ratio";
        if (type == "excel")
        {
            byte[] fileByte = exportHelper.CreateSpreadsheetWorkbook<AxleLoadReport>(fields, data.ToList());

            MemoryStream ms = new MemoryStream(fileByte);

            using var streamRef = new DotNetStreamReference(ms);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName + ".xlsx", streamRef);
        }
        else if (type == "csv")
        {
            MemoryStream stream = await exportHelper.GenerateCSVStream<AxleLoadReport>(fields, data.ToList(), refReportSelection.GetSelection());

            using var streamRef = new DotNetStreamReference(stream);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName + ".csv", streamRef);
        }
    }

    public void ExportComplete(ExportEventArgs exportEventArgs)
    {
        string base64 = exportEventArgs.Base64;
    }
    private void HandleParametersChanged(bool parameters)
    {
        selectionEnabled = parameters;
    }
    private async Task ShowReport()
    {
        Summary = "";

        ReportParameters reportParameters = refReportSelection.GetSelection();
        (IEnumerable<AxleLoadReport>, bool, string) report = new();
        report = await reportService.GetOverloadedWeightRatioReport(reportParameters);
        //report = await reportService.TestGetOverloadedWeightRatioReport(reportParameters);

        if (report.Item2)
        {
            if (report.Item1.Count() > 0)
            {
                data = report.Item1.ToList();
            }
            else
            {
                Summary = "No value is available";
            }
        }
        else
        {
            Summary = report.Item3;
        }
    }

    private string GetGroupColor(double value)
    {
        if(value > 0.9)
        {
            return "rgb(255,0,0)";
        }
        else if(value > 0.8)
        {
            return "rgb(240,0,0)";
        }
        else if (value > 0.7)
        {
            return "rgb(220,0,0)";
        }
        else if (value > 0.6)
        {
            return "rgb(200,0,0)";
        }
        else if (value > 0.5)
        {
            return "rgb(180,0,0)";
        }
        else if (value > 0.4)
        {
            return "rgb(160,0,0)";
        }
        else if (value > 0.3)
        {
            return "rgb(140,0,0)";
        }
        else if (value > 0.2)
        {
            return "rgb(120,0,0)";
        }
        else if (value > 0.1)
        {
            return "rgb(100,0,0)";
        }

        return "green";
    }
}
