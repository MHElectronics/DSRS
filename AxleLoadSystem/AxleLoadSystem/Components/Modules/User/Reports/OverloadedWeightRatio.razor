@page "/Report/OverloadedWeightRatio"
@using BOL.Helpers
@using Services
@using Services.Helpers
@using Syncfusion.Blazor
@using System.Globalization
@using System.Text
@inject IAxleLoadService loadService
@inject IOverloadReportService reportService
@inject IConfigurationService configurationService
@inject NavigationManager NavigationManager
@inject IAppState appState
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IExportHelper exportHelper

<PageTitleComponent Title="@localizer["ReportTitle.OverloadedWeightRatio"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <ReportSelection @ref="refReportSelection" OnParametersChanged="HandleParametersChanged" />
    </div>
    @if (!selectionEnabled)
    {
        <div class="card-footer">
            @if (appState is not null && showReportGroupSelection)
            {
                <div class="row">
                    <div class="col-md-4">
                        <button class="btn btn-primary" @onclick="ShowReport" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Show"]</button>
                        <button class="btn btn-primary" @onclick="Export" disabled="@((isLoading || data is null) ? "disabled" : null)">@localizer["Report.Export"] @localizer["Report.CSV"]</button>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(Summary))
            {
                <label class="text-danger">@Summary</label>
            }
        </div>
    }
</div>
@if (data is not null)
{
    <div class="card card-primary card-outline">
        <div class="card-body">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Freight Vehicle Type</th>
                        <th class="text-right">Less than 5%</th>
                        <th class="text-right">5% - 10%</th>
                        <th class="text-right">10% - 15%</th>
                        <th class="text-right">15% - 20%</th>
                        <th class="text-right">20% - 25%</th>
                        <th class="text-right">25% - 30%</th>
                        <th class="text-right">30% - 35%</th>
                        <th class="text-right">35% - 40%</th>
                        <th class="text-right">40% or more</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 2; i <= maxNumberOfAxle; i++)
                    {
                        IEnumerable<AxleLoadReport> items = data.Where(d => d.DateUnit == i);
                        if(items is null)
                        {
                            <tr>
                                <td>@i</td>
                            </tr>
                        }
                        else
                        {
                            double weightRatioGroup2 = items.Any(d => d.GrossVehicleWeightRange == "1") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "1").OverloadingRatio : 0;
                            double weightRatioGroup3 = items.Any(d => d.GrossVehicleWeightRange == "2") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "2").OverloadingRatio : 0;
                            double weightRatioGroup4 = items.Any(d => d.GrossVehicleWeightRange == "3") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "3").OverloadingRatio : 0;
                            double weightRatioGroup5 = items.Any(d => d.GrossVehicleWeightRange == "4") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "4").OverloadingRatio : 0;
                            double weightRatioGroup6 = items.Any(d => d.GrossVehicleWeightRange == "5") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "5").OverloadingRatio : 0;
                            double weightRatioGroup7 = items.Any(d => d.GrossVehicleWeightRange == "6") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "6").OverloadingRatio : 0;
                            double weightRatioGroup8 = items.Any(d => d.GrossVehicleWeightRange == "7") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "7").OverloadingRatio : 0;
                            double weightRatioGroup9 = items.Any(d => d.GrossVehicleWeightRange == "8") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "8").OverloadingRatio : 0;
                            double weightRatioGroup10 = items.Any(d => d.GrossVehicleWeightRange == "9") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "9").OverloadingRatio : 0;

                            <tr>
                                <td>@i</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup2); color:black;">@weightRatioGroup2.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup3); color:black;">@weightRatioGroup3.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup4); color:black;">@weightRatioGroup4.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup5); color:black;">@weightRatioGroup5.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup6); color:black;">@weightRatioGroup6.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup7); color:black;">@weightRatioGroup7.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup8); color:black;">@weightRatioGroup8.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup9); color:black;">@weightRatioGroup9.ToString("P2")</td>
                                <td class="text-right" style="background-color:@GetGroupColor(weightRatioGroup10); color:black;">@weightRatioGroup10.ToString("P2")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private ReportSelection refReportSelection { get; set; }

    private int maxNumberOfAxle { get; set; } = 7;
    public List<AxleLoadReport> data { get; set; }

    private string Summary { get; set; } = "";
    private bool showReportGroupSelection { get; set; } = false;
    private bool isLoading = false;
    private bool selectionEnabled = false;

    protected override async Task OnInitializedAsync()
    {
        showReportGroupSelection = await appState.IsReportParametersSet();
        Configuration reportConfiguration = await configurationService.GetConfiguration();
        if (reportConfiguration is not null)
        {
            maxNumberOfAxle = reportConfiguration.NumberOfAxle;
        }
    }

    private async Task Export()
    {
        if(data is null)
        {
            Summary = "No data to export";
            return;
        }

        StringBuilder sb = new StringBuilder();

        sb.AppendLine("Freight Vehicle Type,Less than 5%,5% - 10%,10% - 15%,15% - 20%,20% - 25%,25% - 30%,30% - 35%,35% - 40%,40% or more");

        for (int i = 2; i <= maxNumberOfAxle; i++)
        {
            IEnumerable<AxleLoadReport> items = data.Where(d => d.DateUnit == i);
            double weightRatioGroup2 = items.Any(d => d.GrossVehicleWeightRange == "1") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "1").OverloadingRatio : 0;
            double weightRatioGroup3 = items.Any(d => d.GrossVehicleWeightRange == "2") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "2").OverloadingRatio : 0;
            double weightRatioGroup4 = items.Any(d => d.GrossVehicleWeightRange == "3") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "3").OverloadingRatio : 0;
            double weightRatioGroup5 = items.Any(d => d.GrossVehicleWeightRange == "4") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "4").OverloadingRatio : 0;
            double weightRatioGroup6 = items.Any(d => d.GrossVehicleWeightRange == "5") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "5").OverloadingRatio : 0;
            double weightRatioGroup7 = items.Any(d => d.GrossVehicleWeightRange == "6") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "6").OverloadingRatio : 0;
            double weightRatioGroup8 = items.Any(d => d.GrossVehicleWeightRange == "7") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "7").OverloadingRatio : 0;
            double weightRatioGroup9 = items.Any(d => d.GrossVehicleWeightRange == "8") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "8").OverloadingRatio : 0;
            double weightRatioGroup10 = items.Any(d => d.GrossVehicleWeightRange == "9") ? items.FirstOrDefault(d => d.GrossVehicleWeightRange == "9").OverloadingRatio : 0;

            sb.AppendLine($"{i},{weightRatioGroup2.ToString("P2")},{weightRatioGroup3.ToString("P2")},{weightRatioGroup4.ToString("P2")},{weightRatioGroup5.ToString("P2")},{weightRatioGroup6.ToString("P2")},{weightRatioGroup7.ToString("P2")},{weightRatioGroup8.ToString("P2")},{weightRatioGroup9.ToString("P2")},{weightRatioGroup10.ToString("P2")}");
        }

        string fileName = "Overloaded Weight Ratio";
        
        MemoryStream stream = exportHelper.GenerateCSVStreamFromString(sb.ToString());

        using var streamRef = new DotNetStreamReference(stream);
        await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName + ".csv", streamRef);
    }

    private void HandleParametersChanged(bool parameters)
    {
        selectionEnabled = parameters;
    }
    private async Task ShowReport()
    {
        Summary = "";

        ReportParameters reportParameters = refReportSelection.GetSelection();
        (IEnumerable<AxleLoadReport>, bool, string) report = await reportService.GetOverloadedWeightRatioReport(reportParameters);

        if (report.Item2)
        {
            if (report.Item1.Count() > 0)
            {
                data = report.Item1.ToList();
            }
            else
            {
                Summary = "No value is available";
            }
        }
        else
        {
            Summary = report.Item3;
        }
    }

    private string GetGroupColor(double value)
    {
        // Handle the ranges in increments of 5%
        if (value >= 1.00) return "rgb(255, 0, 0)";   // 100%
        if (value >= 0.95) return "rgb(255, 13, 13)"; // 95%
        if (value >= 0.90) return "rgb(255, 26, 26)"; // 90%
        if (value >= 0.85) return "rgb(255, 38, 38)"; // 85%
        if (value >= 0.80) return "rgb(255, 51, 51)"; // 80%

        if (value >= 0.75) return "rgb(255, 64, 64)";  // 75%
        if (value >= 0.70) return "rgb(255, 77, 77)";  // 70%
        if (value >= 0.65) return "rgb(255, 90, 90)";  // 65%
        if (value >= 0.60) return "rgb(255, 102, 102)"; // 60%
        if (value >= 0.55) return "rgb(255, 115, 115)"; // 55%

        if (value >= 0.50) return "rgb(255, 128, 128)"; // 50%
        if (value >= 0.45) return "rgb(255, 141, 141)"; // 45%
        if (value >= 0.40) return "rgb(255, 154, 154)"; // 40%
        if (value >= 0.35) return "rgb(255, 166, 166)"; // 35%
        if (value >= 0.30) return "rgb(255, 179, 179)"; // 30%

        if (value >= 0.25) return "rgb(255, 192, 192)"; // 25%
        if (value >= 0.20) return "rgb(255, 204, 204)"; // 20%
        if (value >= 0.15) return "rgb(255, 217, 217)"; // 15%
        if (value >= 0.10) return "rgb(255, 230, 230)"; // 10%
        if (value >= 0.05) return "rgb(255, 243, 243)"; // 5%
        
        return "rgb(255, 255, 255)";
    }
    
}
