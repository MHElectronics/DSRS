@page "/Report/overloadedratio"
@using BOL.Helpers
@using Services
@using Services.Helpers
@using Syncfusion.Blazor
@using Syncfusion.PdfExport;
@using Syncfusion.Blazor.Charts
@using System.Globalization
@inject IAxleLoadService loadService
@inject IOverloadReportService reportService
@inject NavigationManager NavigationManager
@inject IAppState appState
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IExportHelper exportHelper

<PageTitleComponent Title="@localizer["ReportTitle.OverloadedRatio"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <ReportSelection @ref="refReportSelection" OnParametersChanged="HandleParametersChanged" />
    </div>
    @if (!selectionEnabled)
    {
        <div class="card-footer">
            @if (appState is not null && showReportGroupSelection)
            {
                <div class="row">
                    <div class="col-md-4">
                        <button class="btn btn-primary" @onclick="@(() => TypeChanged(true))" disabled="@(isLoading ? "disabled" : null)">Calculated Overload</button>
                        <button class="btn btn-primary" @onclick="@(() => TypeChanged(false))" disabled="@(isLoading ? "disabled" : null)">Raw Data Overload</button>
                    </div>

                </div>
            }
            @if (!string.IsNullOrEmpty(validationSummary))
            {
                <label class="text-danger">@validationSummary</label>
            }
        </div>
    }
</div>
@if (showChart && data is not null)
{
    <div class="card card-primary">
        <div class="card-header">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" data-toggle="pill" href="#tab_graph" role="tab" aria-selected="true">@localizer["Report.Graph"]</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="pill" href="#tab_table" role="tab" aria-selected="false">@localizer["Report.Table"]</a>
                </li>
                <li class="nav-item dropdown">
                    <span class="nav-link dropdown-toggle" id="navbarDropdown" role="button" data-toggle="dropdown" aria-expanded="false">
                        @localizer["Report.Export"]
                    </span>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                        @*  <li><span class="dropdown-item" @onclick="@(() => Export("excel"))">Excel</span></li> *@
                        <li><span class="dropdown-item" @onclick="@(() => Export("csv"))">@localizer["Report.CSV"]</span></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><span class="dropdown-item" @onclick="@(() => Export("chart"))">@localizer["Report.Graph"]</span></li>
                        @*  <li><span class="dropdown-item" @onclick="@(() => Export("pdf"))">Pdf</span></li> *@
                    </ul>
                </li>
            </ul>
        </div>
        <div class="card-body">
            <div class="tab-content">
                <div class="tab-pane active" id="tab_graph">
                    <div class="row">
                        <div class="col-md-12 btn-group">
                            <button class="btn @(chartType == "column" ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => chartType = "column")">@localizer["Report.ColumnChart"]</button>
                            <button class="btn @(chartType == "line" ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => chartType = "line")">@localizer["Report.LineChart"]</button>
                            <button class="btn @(chartType == "pie" ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => chartType = "pie")">@localizer["Report.PieChart"]</button>
                        </div>
                    </div>
                    <div class="col-md-12 col-sm-12 text-center" style="padding-top:10px;">
                        @if (!string.IsNullOrEmpty(chartType))
                        {
                            var overloadingRatioData = data
                            .GroupBy(x => x.NumberofAxle)
                            .Where(group => group.Key != 0)
                            .Select(group => new
                            {
                                NumberofAxle = group.Key,
                                OverloadingRatio = group.Sum(x => x.OverloadVehicle) > 0
                            ? (group.Sum(x => x.OverloadVehicle) / (double)group.Sum(x => x.TotalVehicle))
                            : 0
                            })
                            .ToList().OrderBy(x => x.NumberofAxle);

                            if (chartType.ToLower() == "pie")
                            {
                                <SfAccumulationChart Title="Overloading Ratio by Axle">
                                    <AccumulationChartSeriesCollection>
                                        <AccumulationChartSeries DataSource="@overloadingRatioData"
                                                                 XName="NumberofAxle"
                                                                 YName="OverloadingRatio"
                                                                 Name="Overloading Ratio (%)">
                                            <AccumulationDataLabelSettings Visible="true" Name="Text" Format="P2" >
                                                <AccumulationChartDataLabelFont Size="14px" Color="Black"></AccumulationChartDataLabelFont>
                                            </AccumulationDataLabelSettings>
                                        </AccumulationChartSeries>
                                    </AccumulationChartSeriesCollection>

                                    <AccumulationChartLegendSettings Visible="true"></AccumulationChartLegendSettings>
                                </SfAccumulationChart>
                            }
                            else
                            {
                                var overloadingRatioDataMutiplly100 = data
                                .GroupBy(x => x.NumberofAxle)
                                .Where(group => group.Key != 0)
                                .Select(group => new
                                {
                                    NumberofAxle = group.Key,
                                    OverloadingRatio = group.Sum(x => x.OverloadVehicle) > 0
                                ? (group.Sum(x => x.OverloadVehicle) / (double)group.Sum(x => x.TotalVehicle)) * 100
                                : 0
                                })
                                .ToList().OrderBy(x => x.NumberofAxle);
                                ChartSeriesType chartSeriesType = ChartSeriesType.Column;
                                if (chartType.ToLower() == "line")
                                {
                                    chartSeriesType = ChartSeriesType.Line;
                                }

                                <SfChart @ref="@chartInstance" Title="@chartTitle" Width="100%" Height="100%">
                                    <ChartArea>
                                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                                    </ChartArea>

                                    <ChartPrimaryXAxis Title="Vehicle Type" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="90">
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                    </ChartPrimaryXAxis>

                                    <ChartPrimaryYAxis Name="SecondaryYAxis" Title="Overloaded Vehicle Ratio (%)" LabelFormat="{value}%">
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                                    </ChartPrimaryYAxis>

                                    <ChartSeriesCollection>
                                        <ChartSeries Name="Overloaded Vehicle Ratio (%)"
                                                     DataSource="@overloadingRatioDataMutiplly100"
                                                     XName="NumberofAxle"
                                                     YName="OverloadingRatio"
                                                     YAxisName="SecondaryYAxis"
                                                     Type="chartSeriesType"
                                                     EnableTooltip="true">
                                            <ChartMarker Visible="true" Height="10" Width="10"></ChartMarker>
                                        </ChartSeries>
                                    </ChartSeriesCollection>

                                    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                    <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                                </SfChart>
                            }
                        }
                    </div>
                </div>
                <div class="tab-pane" id="tab_table">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th class="text-right">Number of Axle</th>
                                <th class="text-right">Overloaded Vehicle</th>
                                <th class="text-right">Total Vehicle</th>
                                <th class="text-right">Overloading Ratio</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in data.OrderBy(x => x.NumberofAxle))
                            {
                                decimal overloadingRatio = item.TotalVehicle == 0 ? 0 : ((decimal)item.OverloadVehicle / (decimal)item.TotalVehicle);
                                <tr>
                                    <td class="text-right">@item.NumberofAxle.ToString("N0")</td>
                                    <td class="text-right">@item.OverloadVehicle.ToString("N0")</td>
                                    <td class="text-right">@item.TotalVehicle.ToString("N0")</td>
                                    <td class="text-right">@overloadingRatio.ToString("P2")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td class="text-right">Total:</td>
                                <td class="text-right">@data.Sum(d => d.OverloadVehicle).ToString("N0")</td>
                                <td class="text-right">@data.Sum(d => d.TotalVehicle).ToString("N0")</td>
                                <td class="text-right">@(data.Sum(d => d.TotalVehicle) == 0 ? "0.00%" : ((decimal)data.Sum(d => d.OverloadVehicle) / (decimal)data.Sum(d => d.TotalVehicle)).ToString("P2"))</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private SfChart chartInstance;

    private ReportSelection refReportSelection { get; set; }
    public IEnumerable<AxleLoadReport>? data { get; set; }
    public string chartTitle { get; set; } = "";
    private string validationSummary { get; set; } = "";
    private string chartType { get; set; } = "column";
    private bool showReportGroupSelection { get; set; } = false;
    private bool showChart { get; set; }
    private bool isLoading = false;
    private bool selectionEnabled = false;

    protected override async Task OnInitializedAsync()
    {
        showReportGroupSelection = await appState.IsReportParametersSet();
    }

    private async Task Export(string type)
    {
        if (data is null)
        {
            validationSummary = "No Data Found";
            return;
        }

        List<(string Header, string FieldName, Type FieldType)> fields = new();
        fields.Add(("Number of Axle", nameof(AxleLoadReport.NumberofAxle), new AxleLoadReport().NumberofAxle.GetType()));
        fields.Add(("Overload Vehicle", nameof(AxleLoadReport.OverloadVehicle), new AxleLoadReport().OverloadVehicle.GetType()));
        fields.Add(("Total Vehicle", nameof(AxleLoadReport.TotalVehicle), new AxleLoadReport().TotalVehicle.GetType()));
        fields.Add(("Overloaded Ratio by Axle", nameof(AxleLoadReport.OverloadingRatio), new AxleLoadReport().OverloadingRatio.GetType()));

        string fileName = "Overload Ratio";

        if (type == "excel")
        {
            byte[] fileByte = exportHelper.CreateSpreadsheetWorkbook<AxleLoadReport>(fields, data.ToList());

            MemoryStream ms = new MemoryStream(fileByte);

            using var streamRef = new DotNetStreamReference(ms);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", "Test.xlsx", streamRef);
        }
        else if (type == "csv")
        {
            MemoryStream stream = await exportHelper.GenerateCSVStream<AxleLoadReport>(fields, data.ToList(), refReportSelection.GetSelection());

            using var streamRef = new DotNetStreamReference(stream);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", "Test.csv", streamRef);
        }
        else if (type == "chart")
        {
            await chartInstance.ExportAsync(Syncfusion.Blazor.Charts.ExportType.PNG, fileName, allowDownload: true, isBase64: true);
        }
        else if (type == "pdf")
        {
            MemoryStream stream = exportHelper.CreatePdf<AxleLoadReport>(data.ToList());

            using var streamRef = new DotNetStreamReference(stream);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName + ".pdf", streamRef);
        }
    }

    public void ExportComplete(ExportEventArgs exportEventArgs)
    {
        string base64 = exportEventArgs.Base64;
    }
    private void HandleParametersChanged(bool parameters)
    {
        selectionEnabled = parameters;
    }
    private async Task TypeChanged(bool isCalculated)
    {
        isLoading = true;
        ReportParameters reportParameters = refReportSelection.GetSelection();
        if (reportParameters.Stations is not null)
        {
            await LoadChart(reportParameters, isCalculated);
        }
        isLoading = false;
    }
    private async Task LoadChart(ReportParameters reportParameters, bool isCalculated)
    {
        //Reset chart type to solve pie chart re-render hang issue
        chartType = "column";
        validationSummary = "";
        chartTitle = "Overloaded vehicle percentage for each vehicle type " + "( " + reportParameters.DateStart.ToString("dd MMM yyy") + " to " + reportParameters.DateEnd.ToString("dd MMM yyy") + " )";

        (IEnumerable<AxleLoadReport>, bool, string) report = await reportService.GetOverloadedRatioReport(reportParameters, isCalculated);
        if (report.Item2)
        {
            if (report.Item1.Count() > 0)
            {
                data = report.Item1;
                showChart = true;
            }
            else
            {
                showChart = false;
                validationSummary = "No value is available";
            }
        }
        else
        {
            validationSummary = report.Item3;
        }
    }
}
