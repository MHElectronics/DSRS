@page "/Report/AxleWiseHistogram"
@using BOL.Helpers
@using Services
@using Services.Helpers
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts
@using System.Globalization
@inject IAxleLoadService loadService
@inject IOverloadReportService reportService
@inject NavigationManager NavigationManager
@inject IAppState appState
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IExportHelper exportHelper

<PageTitleComponent Title="@localizer["ReportTitle.AxleWiseHistogram"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <ReportSelection @ref="refReportSelection" OnParametersChanged="HandleParametersChanged" />
    </div>
    @if (!selectionEnabled)
    {
        <div class="card-footer">
            @if (appState is not null && showReportGroupSelection)
            {
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="name" class="form-label">@localizer["Report.EquivalentAxleLoad"]</label>
                            <input type="number" @bind-value="@equivalentAxleLoad" step=".01" required class="form-control" placeholder="Equivalent Axle Load" />
                        </div>
                    </div>
                    <div class="col-md-4 form-group">
                        <label>&nbsp;</label>
                        <button class="btn btn-primary w-100" @onclick="@ShowReport" disabled="@(isLoading ? "disabled" : null)">
                            @localizerResource["Button.Show"]
                            @if (isLoading)
                            {
                                <span>&nbsp;<Loader IsSmall="true" /></span>
                            }
                        </button>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(Summary))
            {
                <label class="text-danger">@Summary</label>
            }
        </div>
    }
</div>
@if (isLoading)
{
    <Loader/>
}
else if (Chartview && ChartData is not null)
{
    <div class="card card-primary">
        <div class="card-header">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" data-toggle="pill" href="#tab_graph" role="tab" aria-selected="true">@localizer["Report.Graph"]</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="pill" href="#tab_table" role="tab" aria-selected="false">@localizer["Report.Table"]</a>
                </li>
                <li class="nav-item dropdown">
                    <span class="nav-link dropdown-toggle" id="navbarDropdown" role="button" data-toggle="dropdown" aria-expanded="false">
                        @localizer["Report.Export"]
                    </span>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <li><span class="dropdown-item" @onclick="@(() => Export("csv"))">@localizer["Report.CSV"]</span></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><span class="dropdown-item" @onclick="@(() => Export("chart"))">@localizer["Report.Graph"]</span></li>
                    </ul>
                </li>
            </ul>
        </div>
        <div class="card-body">
            <div class="tab-content">
                <div class="tab-pane active" id="tab_graph">
                    <div class="row">
                        <div class="col-md-12 btn-group">
                            <button class="btn @(chartType == "TotalNumberOfAxles" ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => ChartChanged("TotalNumberOfAxles"))">Cummilative Number of Axle</button>
                            <button class="btn @(chartType == "Influence" ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => ChartChanged("Influence"))">Influence</button>
                            <button class="btn @(chartType == "Influence_2" ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => ChartChanged("Influence_2"))">Equivalent to @(selectedEquivalentAxleLoad)t Axle</button>
                        </div>
                    </div>
                    <div class="col-md-12 col-sm-12 text-center" style="padding-top:10px;">
                        @if (ChartData is not null)
                        {
                            <SfChart @ref="@chartInstance" Title="@ChartTitle" Width="100%" Height="100%" Theme="@Theme">
                                <ChartArea>
                                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                                </ChartArea>

                                <ChartPrimaryXAxis Title="Single Axle Load Range (Ton)" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="90">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                </ChartPrimaryXAxis>

                                <ChartPrimaryYAxis Title="@YAxisTitle" LabelFormat="{value}">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                                </ChartPrimaryYAxis>

                                <ChartSeriesCollection>
                                    <ChartSeries Name="@YAxisTitle"
                                                 ColumnWidth="0.5"
                                                 DataSource="@ChartData"
                                                 XName="GrossVehicleWeightRange"
                                                 YName="@chartType"
                                                 Type="ChartSeriesType.Column"
                                                 EnableTooltip="true">
                                        <ChartMarker>
                                            <ChartDataLabel Visible="false" Position="LabelPosition.Top">
                                                <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                            </ChartDataLabel>
                                        </ChartMarker>
                                        <ChartSeriesBorder Width="1"></ChartSeriesBorder>
                                    </ChartSeries>
                                </ChartSeriesCollection>
                                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                            </SfChart>
                        }
                    </div>
                </div>
                <div class="tab-pane" id="tab_table">
                    @if (ChartData is not null)
                    {
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th class="text-right">Weight Range in Ton</th>
                                    <th class="text-right">Medium Weight</th>
                                    <th class="text-right">Cummilative Number of Axles</th>
                                    <th class="text-right">Influence</th>
                                    <th class="text-right">Equivalent to @(selectedEquivalentAxleLoad)t Axle</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (AxleLoadReport item in ChartData)
                                {
                                    <tr>
                                        <td class="text-right">@item.GrossVehicleWeightRange</td>
                                        <td class="text-right">@item.MediumWeight.ToString("N2")</td>
                                        <td class="text-right">@item.TotalNumberOfAxles.ToString("N0")</td>
                                        <td class="text-right">@item.Influence.ToString("N2")</td>
                                        <td class="text-right">@item.Influence_2.ToString("N2")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
}
@code {
    private Theme Theme { get; set; } = 0;
    private SfChart chartInstance;
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;

    public IEnumerable<AxleLoadReport> ChartData { get; set; }
    public IQueryable<List<LoadData>> listLoadData { get; set; }
    private Dictionary<string, IEnumerable<AxleLoadReport>> FilteredChartData;
    private ChartSeriesType chartSeriesType { get; set; } = ChartSeriesType.StackingColumn;
    private decimal equivalentAxleLoad { get; set; } = 10;
    private decimal selectedEquivalentAxleLoad { get; set; } = (decimal)10.00;
    private ReportSelection refReportSelection { get; set; }

    public string Format { get; set; } = "{value} GW";
    public string ChartTitle { get; set; } = "";
    public string YAxisTitle { get; set; } = "";
    private string Summary { get; set; } = "";
    private string chartType { get; set; } = "TotalNumberOfAxles";
    private string fileName { get; set; } = "Test";
    private bool showReportGroupSelection { get; set; } = false;
    private bool Chartview { get; set; }
    private bool isLoading = false;
    private bool selectionEnabled = false;
    
    protected override async Task OnInitializedAsync()
    {
        showReportGroupSelection = await appState.IsReportParametersSet();
    }

    private async Task Export(string type)
    {
        List<(string Header, string FieldName, Type FieldType)> fields = new();
        fields.Add(("Single Axle Load Range (Ton)", nameof(AxleLoadReport.GrossVehicleWeightRange), new AxleLoadReport().GrossVehicleWeightRange?.GetType() ?? typeof(string)));
        fields.Add(("Medium Weight", nameof(AxleLoadReport.MediumWeight), new AxleLoadReport().MediumWeight.GetType()));
        fields.Add(("Cumulative Number Of Axles", nameof(AxleLoadReport.TotalNumberOfAxles), new AxleLoadReport().TotalNumberOfAxles.GetType()));
        fields.Add(("Influence", nameof(AxleLoadReport.Influence), new AxleLoadReport().Influence.GetType()));
        fields.Add(("Equivalent to " + selectedEquivalentAxleLoad + "t Axle", nameof(AxleLoadReport.Influence_2), new AxleLoadReport().Influence_2.GetType()));
        
        if (chartType == "TotalNumberOfAxles")
        {
            fileName = "Single Axle Load_Cummilative";
        }
        else if (chartType == "Influence")
        {
            fileName = "Single Axle Load_Influence";
        }
        else if (chartType == "Influence_2")
        {
            fileName = "Single Axle Load_Equivalent";
        }
        if (type == "csv")
        {
            MemoryStream stream = await exportHelper.GenerateCSVStream<AxleLoadReport>(fields, ChartData.ToList(), refReportSelection.GetSelection());

            using var streamRef = new DotNetStreamReference(stream);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName + ".csv", streamRef);
        }
        else if (type == "chart")
        {
            await chartInstance.ExportAsync(Syncfusion.Blazor.Charts.ExportType.PNG, fileName, allowDownload: true, isBase64: true);
        }
    }

    public void ExportComplete(ExportEventArgs exportEventArgs)
    {
        string base64 = exportEventArgs.Base64;
    }
    private void ChartChanged(string type)
    {
        ReportParameters reportParameters = refReportSelection.GetSelection();
        if (type == "TotalNumberOfAxles")
        {
            ChartTitle = "Cumulative Number of Axles " + "(" + reportParameters.DateStart.ToString("dd MMM yyy") + " to " + reportParameters.DateEnd.ToString("dd MMM yyy") + ")";
            YAxisTitle = "Cumulative Number of Axles";
        }
        else if (type == "Influence")
        {
            ChartTitle = "Influence Degree to the Pavement " + "(" + reportParameters.DateStart.ToString("dd MMM yyy") + " to " + reportParameters.DateEnd.ToString("dd MMM yyy") + ")";
            YAxisTitle = "Influence Degree to the Pavement";
        }
        else if (type == "Influence_2")
        {
            ChartTitle = "Influence Degree to the Pavement Equivalent to " + selectedEquivalentAxleLoad + "t Axle (" + reportParameters.DateStart.ToString("dd MMM yyy") + " to " + reportParameters.DateEnd.ToString("dd MMM yyy") + ")";
            YAxisTitle = "Equivalent to " + selectedEquivalentAxleLoad + "t Axle";
        }

        chartType = type;
    }
    private async Task HandleParametersChanged(bool parameters)
    {
        selectionEnabled = parameters;
    }
    private async Task ShowReport()
    {
        isLoading = true;
        // ReportParameters reportParameters = await appState.GetReportParameters();
        ReportParameters reportParameters = refReportSelection.GetSelection();
        if (reportParameters.Stations is not null)
        {
            await LoadData(reportParameters);
        }
        isLoading = false;
    }
    private async Task LoadData(ReportParameters reportParameters)
    {
        Summary = "";
        ChartTitle = "Cumulative Number of Axles " + "(" + reportParameters.DateStart.ToString("dd MMM yyy") + " to " + reportParameters.DateEnd.ToString("dd MMM yyy") + ")";
        YAxisTitle = "Cumulative Number of Axles";
        Chartview = true;

        selectedEquivalentAxleLoad = equivalentAxleLoad;

        (IEnumerable<AxleLoadReport>, bool, string) report = await reportService.GetAxleWiseHistogramReport(reportParameters, equivalentAxleLoad);
        if (report.Item2)
        {
            if (report.Item1.Count() > 0)
            {
                ChartData = report.Item1;
            }
            else
            {
                Chartview = false;
                Summary = "No value is available";
            }
        }
        else
        {
            Summary = report.Item3;
        }
    }
}
