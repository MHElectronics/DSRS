@page "/Report/TimeSeries"
@using BOL.Helpers
@using Services
@using Services.Helpers
@using Syncfusion.Blazor
@using Syncfusion.PdfExport;
@using Syncfusion.Blazor.Charts
@using System.Globalization
@inject IAxleLoadService loadService
@inject IOverloadReportService reportService
@inject IConfigurationService configurationService
@inject NavigationManager NavigationManager
@inject IAppState appState
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IExportHelper exportHelper

<PageTitleComponent Title="@localizer["ReportTitle.Overloaded"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <ReportSelection @ref="refReportSelection" OnParametersChanged="HandleParametersChanged" />
    </div>
    @if (!selectionEnabled)
    {
        <div class="card-footer">
            @if (appState is not null && showReportGroupSelection)
            {
                <div class="row">
                    <div class="col-md-12 btn-group">
                        <button class="btn @(selectedType == "Hour" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Hour"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Hourly"]</button>
                        <button class="btn @(selectedType == "Day" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Day"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Daily"]</button>
                        <button class="btn @(selectedType == "Day-of-week" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Day-of-week"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Weekly"]</button>
                        <button class="btn @(selectedType == "Month" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Month"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Monthly"]</button>
                        <button class="btn @(selectedType == "Year" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Year"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Yearly"]</button>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(Summary))
            {
                <label class="text-danger">@Summary</label>
            }
        </div>
    }
</div>
@if (Chartview && ChartData is not null)
{
    <div class="card card-primary">
        <div class="card-header">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" data-toggle="pill" href="#tab_graph" role="tab" aria-selected="true">@localizer["Report.Graph"]</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="pill" href="#tab_table" role="tab" aria-selected="false">@localizer["Report.Table"]</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="pill" href="#tab_table2" role="tab" aria-selected="false">Breakdown Table</a>
                </li>
                <li class="nav-item dropdown">
                    <span class="nav-link dropdown-toggle" id="navbarDropdown" role="button" data-toggle="dropdown" aria-expanded="false">
                        @localizer["Report.Export"]
                    </span>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                        @*  <li><span class="dropdown-item" @onclick="@(() => Export("excel"))">Excel</span></li> *@
                        <li><span class="dropdown-item" @onclick="@(() => Export("csv"))">@localizer["Report.CSV"]</span></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><span class="dropdown-item" @onclick="@(() => Export("chart"))">@localizer["Report.Graph"]</span></li>
                        @*  <li><span class="dropdown-item" @onclick="@(() => Export("pdf"))">Pdf</span></li> *@
                    </ul>
                </li>
            </ul>
        </div>
        <div class="card-body">
            <div class="tab-content">
                <div class="tab-pane active" id="tab_graph">
                    <div class="row">
                        <div class="col-md-12 btn-group">
                            <button class="btn @(chartType == "column" ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => ChartChanged("column"))">@localizer["Report.ColumnChart"]</button>
                            <button class="btn @(chartType == "line" ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => ChartChanged("line"))">@localizer["Report.LineChart"]</button>
                        </div>
                        <div class="col-md-12 col-sm-12 text-center" style="padding-top:10px;">
                            @if (!string.IsNullOrEmpty(chartType))
                            {
                                <SfChart @ref="@chartInstance" Title="@ChartTitle" Width="100%" Theme="@Theme" EnableAnimation="true" Height="100%">
                                    <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>

                                    <ChartPrimaryXAxis Title="@XAxisTitle" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="90">
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                    </ChartPrimaryXAxis>

                                    <ChartPrimaryYAxis Title="@YAxisTitle">
                                        <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                                    </ChartPrimaryYAxis>

                                    <ChartAxes>
                                        <ChartAxis Name="SecondaryYAxis" OpposedPosition="true" Title="Overloaded Vehicle Ratio (%)" LabelFormat="{value}%">
                                            <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                            <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                        </ChartAxis>
                                    </ChartAxes>

                                    <ChartSeriesCollection>
                                        <ChartSeries Name="Overloaded Vehicles" ColumnWidth="0.5" DataSource="@ChartData.OrderBy(x=>x.DateUnit)" XName="DateUnitName" YName="OverloadVehicle" Width="2" Type="chartSeriesType" EnableTooltip="true">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="false" Position="LabelPosition.Top">
                                                    <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                </ChartDataLabel>
                                            </ChartMarker>
                                            <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                        </ChartSeries>

                                        <ChartSeries Name="Total number of mesured Vehicles" ColumnWidth="0.5" DataSource="@ChartData.OrderBy(x=>x.DateUnit)" XName="DateUnitName" YName="TotalVehicle" Width="2" Type="chartSeriesType" EnableTooltip="true">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="false" Position="LabelPosition.Top">
                                                    <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                </ChartDataLabel>
                                            </ChartMarker>
                                            <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                        </ChartSeries>

                                        @* Calculate Overloading Ratio *@
                                        @{
                                            var overloadingRatioData = ChartData.Select(x => new
                                            {
                                                x.DateUnit,
                                                x.DateUnitName,
                                                OverloadingRatio = (x.OverloadVehicle / (double)x.TotalVehicle) * 100
                                            }).ToList();
                                        }

                                        <ChartSeries Name="Overloaded Vehicle Ratio (%)" DataSource="@overloadingRatioData.OrderBy(x=>x.DateUnit)" XName="DateUnitName" YName="OverloadingRatio" YAxisName="SecondaryYAxis" Width="2" Type="ChartSeriesType.Line" EnableTooltip="true">
                                            <ChartMarker Visible="true" Height="10" Width="10"></ChartMarker>
                                        </ChartSeries>
                                    </ChartSeriesCollection>

                                    <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                    <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                                </SfChart>
                            }
                        </div>
                    </div>
                </div>
                <div class="tab-pane" id="tab_table">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>@selectedType</th>
                                <th class="text-right">Overloaded Vehicle</th>
                                <th class="text-right">Not Overloaded Vehicle</th>
                                <th class="text-right">Total Vehicle</th>
                                <th class="text-right">Overloading Ratio</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (AxleLoadReport item in ChartData)
                            {
                                <tr>
                                    <td>@item.DateUnitName</td>
                                    <td class="text-right">@item.OverloadVehicle.ToString("N0")</td>
                                    <td class="text-right">@item.NotOverloadVehicle.ToString("N0")</td>
                                    <td class="text-right">@item.TotalVehicle.ToString("N0")</td>
                                    <td class="text-right">
                                        @{
                                            // Calculate overloading ratio for the current item
                                            item.OverloadingRatio = item.TotalVehicle > 0
                                            ? (item.OverloadVehicle / (double)item.TotalVehicle) * 100
                                            : 0;
                                        }
                                        @($"{item.OverloadingRatio:N2}%")
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="tab-pane" id="tab_table2">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th rowspan="2" class="border-right">@selectedType</th>
                                <th colspan="@(maxNumberOfAxle + 1)" class="text-center border-right">Breakdown of Total Number of Measured Vehicles by Axle</th>
                                <th colspan="@(maxNumberOfAxle + 1)" class="text-center border-right">Breakdown of Overloaded Vehicle by Axle</th>
                                <th rowspan="2" class="text-right">Overloaded Vehicle Ratio (%)</th>
                            </tr>
                            <tr>
                                <th class="text-right">Total</th>
                                @for(int i=2; i<=maxNumberOfAxle; i++)
                                {
                                    <th class="text-right">@i</th>
                                }
                                <th class="text-right border-right">More than @maxNumberOfAxle</th>

                                <th class="text-right">Total</th>
                                @for (int i = 2; i <= maxNumberOfAxle; i++)
                                {
                                    <th class="text-right">@i</th>
                                }
                                <th class="text-right border-right">More than @maxNumberOfAxle</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (AxleLoadReport item in ChartData)
                            {
                                <tr>
                                    <td class="border-right">@item.DateUnitName</td>
                                    <td class="text-right">@item.TotalVehicle.ToString("N0")</td>
                                    @for (int i = 2; i <= maxNumberOfAxle; i++)
                                    {
                                        <td class="text-right">@(ChartDataByAxle.Where(d => d.DateUnit == item.DateUnit && d.NumberofAxle == i).Sum(d => d.TotalVehicle).ToString("N0"))</td>
                                    }
                                    <td class="text-right border-right">@(ChartDataByAxle.Where(d => d.DateUnit == item.DateUnit && (d.NumberofAxle < 2 || d.NumberofAxle > 7)).Sum(d => d.TotalVehicle).ToString("N0"))</td>

                                    <td class="text-right">@item.OverloadVehicle.ToString("N0")</td>
                                    @for (int i = 2; i <= maxNumberOfAxle; i++)
                                    {
                                        <td class="text-right">@(ChartDataByAxle.Where(d => d.DateUnit == item.DateUnit && d.NumberofAxle == i).Sum(d => d.OverloadVehicle).ToString("N0"))</td>
                                    }
                                    <td class="text-right border-right">@(ChartDataByAxle.Where(d => d.DateUnit == item.DateUnit && (d.NumberofAxle < 2 || d.NumberofAxle > 7)).Sum(d => d.OverloadVehicle).ToString("N0"))</td>

                                    <td class="text-right overloading-ratio">
                                        @{
                                            // Calculate overloading ratio for the current item
                                            item.OverloadingRatio = item.TotalVehicle > 0
                                            ? (item.OverloadVehicle / (double)item.TotalVehicle) * 100
                                            : 0;
                                        }
                                        @($"{item.OverloadingRatio:N2}%")
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}
<style>
    .table-container {
        overflow-x: auto;
    }

    .table td, .table th {
        padding: 8px;
        white-space: nowrap;
    }

    .table th, .table td {
        text-align: right;
    }

    .overloading-ratio {
        width: 100px; /* Adjust width as necessary */
    }
</style>
@code {
    private Theme Theme { get; set; } = 0;
    private SfChart chartInstance;
    private ReportSelection refReportSelection { get; set; }
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;

    private int maxNumberOfAxle { get; set; } = 7;
    public List<AxleLoadReport> ChartData { get; set; }
    public List<AxleLoadReport> ChartDataByAxle { get; set; }

    private ChartSeriesType chartSeriesType { get; set; } = ChartSeriesType.Column;
    public string Format { get; set; } = "{value} GW";
    public string ChartTitle { get; set; } = "";
    public string XAxisTitle { get; set; } = "";
    public string YAxisTitle { get; set; } = "";
    private string selectedType { get; set; } = "";
    private string chartType { get; set; } = "column";
    private string Summary { get; set; } = "";
    private bool showReportGroupSelection { get; set; } = false;
    private bool Chartview { get; set; }
    private bool isLoading = false;
    private bool selectionEnabled = false;

    protected override async Task OnInitializedAsync()
    {
        showReportGroupSelection = await appState.IsReportParametersSet();
        Configuration reportConfiguration =await configurationService.GetConfiguration();
        if(reportConfiguration is not null)
        {
            maxNumberOfAxle = reportConfiguration.NumberOfAxle;
        }
    }

    private async Task Export(string type)
    {
        List<(string Header, string FieldName, Type FieldType)> fields = new();
        fields.Add((selectedType, nameof(AxleLoadReport.DateUnitName), new AxleLoadReport().DateUnitName.GetType()));
        fields.Add(("Overload Vehicle", nameof(AxleLoadReport.OverloadVehicle), new AxleLoadReport().OverloadVehicle.GetType()));
        fields.Add(("Total Vehicle", nameof(AxleLoadReport.TotalVehicle), new AxleLoadReport().TotalVehicle.GetType()));
        fields.Add(("Overloaded Ratio", nameof(AxleLoadReport.OverloadingRatio), new AxleLoadReport().OverloadingRatio.GetType()));
        string fileName = "Time Series";
        // if (type == "excel")
        // {
        //     byte[] fileByte = exportHelper.CreateSpreadsheetWorkbook<AxleLoadReport>(fields, ChartData.ToList());

        //     MemoryStream ms = new MemoryStream(fileByte);

        //     using var streamRef = new DotNetStreamReference(ms);
        //     await jsRuntime.InvokeVoidAsync("downloadFileFromStream", "Test.xlsx", streamRef);
        // }
        if (type == "csv")
        {
            MemoryStream stream = await exportHelper.GenerateCSVStream<AxleLoadReport>(fields, ChartData.ToList(), refReportSelection.GetSelection());

            using var streamRef = new DotNetStreamReference(stream);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName + ".csv", streamRef);
        }
        else if (type == "chart")
        {
            await chartInstance.ExportAsync(ExportType.PNG, fileName, allowDownload: true, isBase64: true);
        }
        // else if (type == "pdf")
        // {
        //     // MemoryStream stream = ExportHelper.CreatePdf<AxleLoadReport>(ChartData.ToList());
        //     // byte[] bytes = stream.ToArray();
        //     // await jsRuntime.InvokeVoidAsync("downloadFileFromString", "Test.pdf", Convert.ToBase64String(bytes));

        //     var html = await jsRuntime.InvokeAsync<string>("GetHTML", "#tab_2");
        //     MemoryStream stream = exportHelper.CreatePdfFromHtml(html);
        //     byte[] bytes = stream.ToArray();
        //     await jsRuntime.InvokeVoidAsync("downloadFileFromString", "Test.pdf", Convert.ToBase64String(bytes));
        // }
    }

    public void ExportComplete(ExportEventArgs exportEventArgs)
    {
        string base64 = exportEventArgs.Base64;
    }
    private async Task ChartChanged(string type)
    {
        if (type.ToLower() == "line")
        {
            chartSeriesType = ChartSeriesType.Line;
        }
        else if (type.ToLower() == "column")
        {
            chartSeriesType = ChartSeriesType.Column;
        }
        chartType = type;
    }
    private async Task HandleParametersChanged(bool parameters)
    {
        selectionEnabled = parameters;
    }
    private async Task TypeChanged(string type)
    {
        selectedType = type;
        isLoading = true;
        ReportParameters reportParameters = refReportSelection.GetSelection();
        if (reportParameters.Stations is not null)
        {
            await LoadChart(reportParameters);
        }
        isLoading = false;
    }

    private async Task LoadChart(ReportParameters reportParameters)
    {
        Summary = "";
        ChartTitle = "Number of vehicles measured for each time series " + "( " + reportParameters.DateStart.ToString("dd MMM yyy") + " to " + reportParameters.DateEnd.ToString("dd MMM yyy") + " )";
        YAxisTitle = "Number of vehicles";
        Chartview = true;

        (IEnumerable<AxleLoadReport>, bool, string) report = new();
        if (selectedType == "Month")
        {
            report = await reportService.GetMonthlyOverloadedTimeSeriesReport(reportParameters);
        }
        else if (selectedType == "Day-of-week")
        {
            report = await reportService.GetWeeklyOverloadedTimeSeriesReport(reportParameters);
        }
        else if (selectedType == "Hour")
        {
            report = await reportService.GetHourlyOverloadedTimeSeriesReport(reportParameters);
        }
        else if (selectedType == "Year")
        {
            report = await reportService.GetYearlyOverloadedTimeSeriesReport(reportParameters);
        }
        else if (selectedType == "Day")
        {
            report = await reportService.GetDailyOverloadedTimeSeriesReport(reportParameters);
        }

        if (report.Item2)
        {
            if (report.Item1.Count() > 0)
            {
                ChartDataByAxle = report.Item1.ToList();
                IEnumerable<int> dataUnits = ChartDataByAxle.Select(d => d.DateUnit).Distinct();
                ChartData = new();
                foreach (int dataUnit in dataUnits.OrderBy(x => x))
                {
                    AxleLoadReport item = new();
                    item.DateUnit = ChartDataByAxle.FirstOrDefault(d => d.DateUnit == dataUnit).DateUnit;
                    item.DateUnitName = ChartDataByAxle.FirstOrDefault(d => d.DateUnit == dataUnit).DateUnitName;
                    item.OverloadVehicle = ChartDataByAxle.Where(d => d.DateUnit == dataUnit).Sum(x => x.OverloadVehicle);
                    item.NotOverloadVehicle = ChartDataByAxle.Where(d => d.DateUnit == dataUnit).Sum(x => x.NotOverloadVehicle);
                    item.TotalVehicle = ChartDataByAxle.Where(d => d.DateUnit == dataUnit).Sum(x => x.TotalVehicle);

                    ChartData.Add(item);
                }

                // ChartData = report.Item1.ToList();

                XAxisTitle = dataTypeTitle2();

            }
            else
            {
                Chartview = false;
                Summary = "No value is available";
            }
        }
        else
        {
            Summary = report.Item3;
        }
    }
    private string dataTypeTitle2()
    {
        if (selectedType == "Month")
        {
            return "Month";
        }
        else if (selectedType == "Day")
        {
            return "Day";
        }
        else if (selectedType == "Hour")
        {
            return "Hour";
        }
        else if (selectedType == "Year")
        {
            return "Year";
        }
        else if (selectedType == "Day-of-week")
        {
            return "Day-of-week";
        }

        return "";
    }
}
