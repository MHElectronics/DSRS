@page "/grossweight"
@using BOL.Helpers
@using Services
@using Services.Helpers
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Charts
@using System.Globalization
@inject AuthenticationStateProvider authStateProvider
@inject IUserActivityService userActivityService
@inject IAxleLoadService loadService
@inject NavigationManager NavigationManager
@inject IAppState appState
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IExportHelper exportHelper

<PageTitleComponent Title="@localizer["ReportTitle.GrossWeight"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        <ReportSelection OnParametersChanged="HandleParametersChanged" />
    </div>
    @if (!selectionEnabled)
    {
        <div class="card-footer">
            @if (appState is not null && showReportGroupSelection)
            {
                <div class="row">
                    <div class="col-md-12 btn-group">
                        <button class="btn @(selectedType == "Hour" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Hour"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Hourly"]</button>
                        <button class="btn @(selectedType == "Day" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Day"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Daily"]</button>
                        <button class="btn @(selectedType == "Day-of-week" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Day-of-week"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Weekly"]</button>
                        <button class="btn @(selectedType == "Month" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Month"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Monthly"]</button>
                        <button class="btn @(selectedType == "Year" ? "btn-danger" : "btn-primary")" @onclick="@(() => TypeChanged("Year"))" disabled="@(isLoading ? "disabled" : null)">@localizerResource["Button.Yearly"]</button>
                    </div>
                </div>
            }
            @if (!string.IsNullOrEmpty(Summary))
            {
                <label class="text-danger">@Summary</label>
            }
        </div>
    } 
</div>
@if (Chartview && ChartData is not null)
{
    <div class="card card-primary">
        <div class="card-header">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" data-toggle="pill" href="#tab_graph" role="tab" aria-selected="true">@localizer["Report.Graph"]</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-toggle="pill" href="#tab_table" role="tab" aria-selected="false">@localizer["Report.Table"]</a>
                </li>
                <li class="nav-item dropdown">
                    <span class="nav-link dropdown-toggle" id="navbarDropdown" role="button" data-toggle="dropdown" aria-expanded="false">
                        @localizer["Report.Export"]
                    </span>
                    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                        @*  <li><span class="dropdown-item" @onclick="@(() => Export("excel"))">Excel</span></li> *@
                        <li><span class="dropdown-item" @onclick="@(() => Export("csv"))">@localizer["Report.CSV"]</span></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><span class="dropdown-item" @onclick="@(() => Export("chart"))">@localizer["Report.Graph"]</span></li>
                        @*  <li><span class="dropdown-item" @onclick="@(() => Export("pdf"))">Pdf</span></li> *@
                    </ul>
                </li>
            </ul>
        </div>
        <div class="card-body">
            <div class="tab-content">
                <div class="tab-pane active" id="tab_graph">
                    <div class="row">
                        <div class="col-md-12 btn-group">
                            <button class="btn @(chartType == "line" ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => ChartChanged("line"))">@localizer["Report.LineChart"]</button>
                            <button class="btn @(chartType == "stackingcolumn" ? "btn-outline-success" : "btn-outline-info")" @onclick="@(() => ChartChanged("stackingcolumn"))">@localizer["Report.StackingColumnChart"]</button>
                        </div>
                    </div>
                    <div class="col-md-12 col-sm-12 text-center" style="padding-top:10px;">
                        @if (!string.IsNullOrEmpty(chartType))
                        {
                            <SfChart @ref="@chartInstance" Title="@ChartTitle" Width="@Width" Height="@Height" Theme="@Theme">
                                <ChartArea>
                                    <ChartAreaBorder Width="0"></ChartAreaBorder>
                                </ChartArea>

                                <ChartPrimaryXAxis Title="@XAxisTitle" ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" LabelRotation="90">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                </ChartPrimaryXAxis>

                                <ChartPrimaryYAxis Title="@YAxisTitle" LabelFormat="{value}">
                                    <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                    <ChartAxisMinorGridLines Width="1"></ChartAxisMinorGridLines>
                                </ChartPrimaryYAxis>

                                <ChartAxes>
                                    <ChartAxis Name="SecondaryYAxis" OpposedPosition="true" Title="Overloading Ratio (%)" LabelFormat="{value}%">
                                        <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
                                        <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                                        <ChartAxisMinorGridLines Width="0"></ChartAxisMinorGridLines>
                                    </ChartAxis>
                                </ChartAxes>

                                <ChartSeriesCollection>
                                    @foreach (var dayGroup in ChartData.GroupBy(x => x.DateUnit))
                                    {
                                        <ChartSeries Name="@dayGroup.First().DateUnitName"
                                                     ColumnWidth="0.5"
                                                     DataSource="@dayGroup.OrderBy(x => x.GrossVehicleWeightRange)"
                                                     XName="GrossVehicleWeightRange"
                                                     YName="TotalVehicle"
                                                     YAxisName="PrimaryYAxis"
                                                     Type="chartSeriesType"
                                                     EnableTooltip="true">
                                            <ChartMarker>
                                                <ChartDataLabel Visible="false" Position="LabelPosition.Top">
                                                    <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                                                </ChartDataLabel>
                                            </ChartMarker>
                                            <ChartSeriesBorder Width="1" Color="#ffffff"></ChartSeriesBorder>
                                        </ChartSeries>
                                    }

                                    @* Calculate the Overloading Ratio *@
                                    @{
                                        var overloadingRatioData = ChartData
                                        .GroupBy(x => x.GrossVehicleWeightRange)
                                        .Select(g => new
                                        {
                                            GrossVehicleWeightRange = g.Key,
                                            OverloadingRatio = (g.Sum(x => x.OverloadVehicle) / (double)g.Sum(x => x.TotalVehicle)) * 100
                                        }).ToList();
                                    }

                                    <ChartSeries Name="Overloading Ratio (%)"
                                                 ColumnWidth="0.5"
                                                 DataSource="@overloadingRatioData.OrderBy(x =>x.GrossVehicleWeightRange)"
                                                 XName="GrossVehicleWeightRange"
                                                 YName="OverloadingRatio"
                                                 YAxisName="SecondaryYAxis"
                                                 Type="ChartSeriesType.Line"
                                                 Width="2"
                                                 Opacity="0.6"
                                                 EnableTooltip="true">
                                        <ChartMarker Visible="true" Height="10" Width="10"></ChartMarker>
                                    </ChartSeries>
                                </ChartSeriesCollection>

                                <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
                                <ChartLegendSettings Visible="true" EnableHighlight="true"></ChartLegendSettings>
                            </SfChart>


                        }
                    </div>
                </div>
                <div class="tab-pane" id="tab_table">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>@selectedType</th>
                                <th class="text-right">Gross Vehicle Weight Range</th>
                                <th class="text-right">Overloaded Vehicle</th>
                                <th class="text-right">Total Vehicle</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (AxleLoadReport item in ChartData)
                            {
                                <tr>
                                    <td>@item.DateUnitName</td>
                                    <td class="text-right">@item.GrossVehicleWeightRange</td>
                                    <td class="text-right">@item.OverloadVehicle.ToString("N0")</td>
                                    <td class="text-right">@item.TotalVehicle.ToString("N0")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private Theme Theme { get; set; } = 0;
    private SfChart chartInstance;
    public LabelIntersectAction Label { get; set; } = LabelIntersectAction.Trim;

    public IEnumerable<AxleLoadReport> ChartData { get; set; }
    public IQueryable<List<LoadData>> listLoadData { get; set; }
    private Dictionary<string, IEnumerable<AxleLoadReport>> FilteredChartData;
    private ChartSeriesType chartSeriesType { get; set; } = ChartSeriesType.StackingColumn;
    public string Height { get; set; } = "100%";
    public string Width { get; set; } = "100%";
    public string FileName { get; set; } = "Charts";
    public string Format { get; set; } = "{value} GW";
    public string ChartTitle { get; set; } = "";
    public string XAxisTitle { get; set; } = "";
    public string YAxisTitle { get; set; } = "";
    private string selectedType { get; set; } = "";
    private string Summary { get; set; } = "";
    private string chartType { get; set; } = "stackingcolumn";
    private User currentUser { get; set; }
    private bool showReportGroupSelection { get; set; } = false;    
    private bool Chartview { get; set; }
    private bool isLoading = false;
    private bool selectionEnabled = false;
    private (IEnumerable<AxleLoadReport>, bool, string) report { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        ReportParameters reportParameters = await appState.GetReportParameters();
        showReportGroupSelection = reportParameters is not null;
    }

    private async Task Export(string type)
    {
        List<(string Header, string FieldName, Type FieldType)> fields = new();
        fields.Add((selectedType, nameof(AxleLoadReport.DateUnitName), new AxleLoadReport().DateUnitName.GetType()));
        fields.Add(("Number of Axle", nameof(AxleLoadReport.NumberofAxle), new AxleLoadReport().NumberofAxle.GetType()));
        fields.Add(("Overload Vehicle", nameof(AxleLoadReport.OverloadVehicle), new AxleLoadReport().OverloadVehicle.GetType()));

        if (type == "excel")
        {
            byte[] fileByte = exportHelper.CreateSpreadsheetWorkbook<AxleLoadReport>(fields, ChartData.ToList());

            MemoryStream ms = new MemoryStream(fileByte);

            using var streamRef = new DotNetStreamReference(ms);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", "Test.xlsx", streamRef);
            await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = "Gross weight Excel report Downloaded", Activity = "Download" });
        }
        else if (type == "csv")
        {
            MemoryStream stream = await exportHelper.GenerateCSVStream<AxleLoadReport>(fields, ChartData.ToList(), await appState.GetReportParameters());

            using var streamRef = new DotNetStreamReference(stream);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", "Test.csv", streamRef);
            await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = "Gross weight CSV report Downloaded", Activity = "Download" });
        }
        else if (type == "chart")
        {
            await chartInstance.ExportAsync(Syncfusion.Blazor.Charts.ExportType.PNG, FileName, allowDownload: true, isBase64: true);
            await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = "Gross weight Graph report Downloaded", Activity = "Download" });
        }
        else if (type == "pdf")
        {
            MemoryStream stream = exportHelper.CreatePdf<AxleLoadReport>(ChartData.ToList());

            using var streamRef = new DotNetStreamReference(stream);
            await jsRuntime.InvokeVoidAsync("downloadFileFromStream", "Test.pdf", streamRef);
            await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = "Gross weight Pdf report Downloaded", Activity = "Download" });
        }
    }

    public void ExportComplete(ExportEventArgs exportEventArgs)
    {
        string base64 = exportEventArgs.Base64;
    }
    private async Task ChartChanged(string type)
    {
        if (type.ToLower() == "line")
        {
            chartSeriesType = ChartSeriesType.Line;
        }
        else if (type.ToLower() == "stackingcolumn")
        {
            chartSeriesType = ChartSeriesType.StackingColumn;
        }
        chartType = type;
    }
    private async Task HandleParametersChanged(bool parameters)
    {
        selectionEnabled = parameters;
    }
    private async Task TypeChanged(string type)
    {
        selectedType = type;
        isLoading = true;
        ReportParameters reportParameters = await appState.GetReportParameters();
        if (reportParameters.Stations is not null)
        {
            await LoadChart();
        }
        isLoading = false;
    }
    private async Task LoadChart()
    {
        ReportParameters reportParameters = await appState.GetReportParameters();
        Summary = "";
        ChartTitle = "Number of overloaded vehicles " + "(" + reportParameters.DateStart.ToString("dd MMM yyy") + " to " + reportParameters.DateEnd.ToString("dd MMM yyy") + ")";
        XAxisTitle = "Histogram (1t increments)";
        YAxisTitle = "Number of vehicles";
        Chartview = true;

        if (selectedType == "Month")
        {
            report = await loadService.GetMonthlyVehicleReport(reportParameters);
            if (report.Item2)
            {
                if (report.Item1.Count() > 0)
                {
                    ChartData = report.Item1;
                }
                else 
                {
                    Chartview = false;
                    Summary = "No value is available";
                }
            }
            else
            {
                Summary = report.Item3;    
            }
        }
        else if (selectedType == "Day-of-week")
        {
            report = await loadService.GetWeeklyVehicleReport(reportParameters);
            if (report.Item2)
            {
                if (report.Item1.Count() > 0)
                {
                    ChartData = report.Item1;
                }
                else
                {
                    Chartview = false;
                    Summary = "No value is available";
                }
            }
            else
            {
                Summary = report.Item3;
            }
        }
        else if (selectedType == "Hour")
        {
            report = await loadService.GetHourlyVehicleReport(reportParameters);
            if (report.Item2)
            {
                if (report.Item1.Count() > 0)
                {
                    ChartData = report.Item1;
                }
                else
                {
                    Chartview = false;
                    Summary = "No value is available";
                }
            }
            else
            {
                Summary = report.Item3;
            }
        }
        else if (selectedType == "Year")
        {
            report = await loadService.GetYearlyVehicleReport(reportParameters);
            if (report.Item2)
            {
                if (report.Item1.Count() > 0)
                {
                    ChartData = report.Item1;
                }
                else
                {
                    Chartview = false;
                    Summary = "No value is available";
                }
            }
            else
            {
                Summary = report.Item3;
            }
        }
        else if (selectedType == "Day")
        {
            report = await loadService.GetDailyVehicleReport(reportParameters);
            if (report.Item2)
            {
                if (report.Item1.Count() > 0)
                {
                    ChartData = report.Item1;
                }
                else
                {
                    Chartview = false;
                    Summary = "No value is available";
                }
            }
            else
            {
                Summary = report.Item3;
            }
        }
    }
}
