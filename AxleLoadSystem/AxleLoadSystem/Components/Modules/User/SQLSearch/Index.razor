@page "/sqldirectsearch"
@using System.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.RegularExpressions;
@inject IAppState appState
@inject AuthenticationStateProvider authStateProvider
@inject ISQLSearchService sqlSearchService
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.CommonPages> localizerCommon

<PageTitleComponent Title="@localizerCommon["SQLDirectSearch"]">
</PageTitleComponent>

<div class="card card-primary card-outline">
    @if (sqlSearch is not null)
    {
        <div class="card-body">
            @* <EditForm EditContext="@editContext" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-md-12 col-sm-12">
                        <label for="sql" class="form-label">SQL Query</label>
                        <textarea @bind="@sqlSearch.Query" class="form-control" placeholder="Please write SQL query only..." id="sql" style="field-sizing: content;"></textarea>
                    </div>

                    @if (!string.IsNullOrEmpty(Summary))
                    {
                        <div class="col-md-12">
                            <label class="text-danger">@Summary</label>
                        </div>
                    }
                    <div class="col-md-12 col-sm-12">
                        <div class="btn btn-group">
                            <button type="submit" class="btn btn-primary" disabled="@(showLoading ? "disabled" : null)">@localizerResource["Button.Execute"]</button>
                        </div>
                    </div>
                </div>
            </EditForm> *@
            <div class="row">
                <div class="col-md-12 col-sm-12">
                    <label for="sql" class="form-label">SQL Query</label>
                    <textarea @bind="@sqlSearch.Query" class="form-control" placeholder="Please write SQL query only..." id="sql" style="field-sizing: content;"></textarea>
                </div>

                <div class="col-md-12">
                    <table class="table no-border">
                        <thead>
                            <tr>
                                <th>@localizerCommon["Parameter.Name"]</th>
                                <th>@localizerCommon["Parameter.Value"]</th>
                                <th style="width:20%;"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var param in sqlSearch.Parameters)
                            {
                                string prefix = "@";
                                <tr>
                                    <td>
                                        <div class="input-group">
                                            <span class="input-group-text" id="basic-addon1">@prefix</span>
                                            <input type="text" @bind="param.Name" class="form-control" placeholder="@localizerCommon["Parameter.Name"]" min="5" maxlength="300" />
                                        </div>
                                    </td>
                                    <td>
                                        <input type="text" @bind="param.Value" class="form-control" placeholder="@localizerCommon["Parameter.Value"]" min="1" maxlength="300" />
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-success" title="Add New Parameter" @onclick="ParameterAdd"><i class="fas fa-plus-circle"></i></button>
                                            @if (sqlSearch.Parameters.Count > 1)
                                            {
                                                <button type="button" class="btn btn-danger" title="Delete New Parameter" @onclick="@(() => ParameterDelete(param))"><i class="fas fa-trash"></i></button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (!string.IsNullOrEmpty(Summary))
                {
                    <div class="col-md-12">
                        <label class="text-danger">@Summary</label>
                    </div>
                }
                <div class="col-md-12 col-sm-12">
                    <div class="btn btn-group">
                        <button type="submit" class="btn btn-primary" disabled="@(showLoading ? "disabled" : null)" @onclick="Save">@localizerResource["Button.Execute"]</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (showLoading)
    {
        <Loader/>
    }
    else if (results != null)
    {
        <div class="card-body">
            <div class="enable-table-scroll">
                <QuickGrid TGridItem="DataRow" ItemsProvider="provider" Virtualize="true" ItemSize="35">
                    @foreach (DataColumn column in results.Columns)
                    {
                        <PropertyColumn Property="@(c => c[column.ColumnName])" Title="@column.ColumnName" Sortable="true">
                            @* <HeaderTemplate>
                                @column.ColumnName
                            </HeaderTemplate> *@
                        </PropertyColumn>
                    }
                </QuickGrid>
            </div>
        </div>
    }
</div>

@code {
    private SQLSearch sqlSearch { get; set; } = new();
    private EditContext editContext = default!;
    private User currentUser { get; set; }
    private DataTable results;
    private GridItemsProvider<DataRow>? provider;

    private bool showLoading { get; set; } = false;
    private string Summary { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(sqlSearch);
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        if (sqlSearch.Parameters.Count == 0)
        {
            sqlSearch.Parameters.Add(new SqlParameter { Name = "", Value = "" });
        }
    }
    private async Task OnValidSubmit(EditContext editContext)
    {
        showLoading = true;
        Summary = "";
        // sqlSearch.Date = DateTime.Now;
        // sqlSearch.UserId = currentUser.Id;
        try
        {
            await this.LoadData();
        }
        catch (Exception ex)
        {
            Summary = "Error: " + ex.Message;
        }
        finally
        {
            showLoading = false;
        }
    }
    private async Task Save()
    {
        Summary = "";
        // sqlSearch.Date = DateTime.Now;
        // sqlSearch.UserId = currentUser.Id;
        if (string.IsNullOrEmpty(sqlSearch.Query))
        {
            Summary = "Please enter query";
            return;
        }
        try
        {
            showLoading = true;
            await this.LoadData();
        }
        catch (Exception ex)
        {
            Summary = "Error: " + ex.Message;
        }
        finally
        {
            showLoading = false;
        }
    }
    private async Task LoadData()
    {
        results = await sqlSearchService.GetSQLSearch(sqlSearch);
        var rows = results.AsEnumerable().ToList();
        var providerResult = GridItemsProviderResult
            .From<DataRow>(rows, rows.Count);
        provider = req => ValueTask.FromResult(providerResult);
    }
    private void OnInvalidSubmit()
    {
        appState.SetNotification(this, "Please enter valid values", Notification.NotificationType.Failure);
    }
    private void ParameterAdd()
    {
        sqlSearch.Parameters.Add(new SqlParameter { Name = "", Value = "" });
    }

    private void ParameterDelete(SqlParameter param)
    {
        sqlSearch.Parameters.Remove(param);
    }
}
