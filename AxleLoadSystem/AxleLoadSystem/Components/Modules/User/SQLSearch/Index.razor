@page "/sqldirectsearch"
@using System.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.RegularExpressions;
@inject IAppState appState
@inject AuthenticationStateProvider authStateProvider
@inject ISQLSearchService sqlSearchService
@inject IUserActivityService userActivityService
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.CommonPages> localizerCommon

<PageTitleComponent Title="@localizerCommon["SQLDirectSearch"]">
</PageTitleComponent>

<div class="card card-primary card-outline">
    @if (sqlSearch is not null)
    {
        <div class="card-body">
            <EditForm EditContext="@editContext" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-md-12 col-sm-12">
                        <label for="sql" class="form-label">SQL Query</label>
                        <textarea @bind="@sqlSearch.Query" class="form-control" placeholder="Please write SQL query only..." id="sql" rows="5" maxlength="300"></textarea>
                    </div>

                    @if (!string.IsNullOrEmpty(Summary))
                    {
                        <label class="text-danger">@Summary</label>
                    }
                    <div class="col-md-12 col-sm-12">
                        <div class="btn btn-group">
                            <button type="submit" class="btn btn-primary">@localizerResource["Button.Execute"]</button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    }
    @if (results != null)
    {
        @* <table class="table table-hover">
    <thead>
    <tr>
    @foreach (DataColumn column in results.Columns)
    {
    <th>@column.ColumnName</th>
    }
    </tr>
    </thead>
    <tbody>
    @foreach (DataRow row in results.Rows)
    {
    <tr>
    @foreach (var item in row.ItemArray)
    {
    <td>@item</td>
    }
    </tr>
    }
    </tbody>
    </table> *@

        <div class="card-body">
            <div class="data-table-container">
                <QuickGrid TGridItem="DataRow" ItemsProvider="provider" Virtualize="true" ItemSize="35">
                    @foreach (DataColumn column in results.Columns)
                    {
                        <PropertyColumn Property="@(c => c[column.ColumnName])" Sortable="true">
                            <HeaderTemplate>
                                @column.ColumnName
                            </HeaderTemplate>
                        </PropertyColumn>
                    }
                </QuickGrid>
            </div>
        </div>
    }
    else
    {
        <p>No results to show.</p>
    }
</div>

@code {
    private SQLSearch sqlSearch { get; set; } = new();
    private EditContext editContext = default!;
    private User currentUser { get; set; }
    private DataTable results;
    private GridItemsProvider<DataRow>? provider;

    private string Summary { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(sqlSearch);
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
    }
    private async Task OnValidSubmit(EditContext editContext)
    {
        Summary = "";
        sqlSearch.Date = DateTime.Now;
        sqlSearch.UserId = currentUser.Id;
        if (await QueryValidation(sqlSearch.Query))
        {
            results = await sqlSearchService.GetSQLSearch(sqlSearch);
            await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = sqlSearch.Query, Activity = "GET" });
            var rows = results.AsEnumerable().ToList();
            var providerResult = GridItemsProviderResult
                .From<DataRow>(rows, rows.Count);
            provider = req => ValueTask.FromResult(providerResult);
        }
        else
        {
            Summary = "Query format is wrong";
        }
    }
    private void OnInvalidSubmit()
    {
        appState.SetNotification(this, "Please enter valid values", Notification.NotificationType.Failure);
    }
    private async Task<bool> QueryValidation(string query)
    {
        string upperQuery = query.ToUpper();
        Regex selectRegex = new Regex(@"\bSELECT\b", RegexOptions.IgnoreCase);
        Regex fromRegex = new Regex(@"\bFROM\b", RegexOptions.IgnoreCase);
        Regex keywordsRegex = new Regex(@"\b(AXLELOAD|CLASSSTATUS|FINEPAYMENT|STATIONS|WIMSCALE)\b", RegexOptions.IgnoreCase);
        
        if (selectRegex.IsMatch(upperQuery) && fromRegex.IsMatch(upperQuery) && keywordsRegex.IsMatch(upperQuery))
        {
            return true;
        }
        
        return false;
    }
}
