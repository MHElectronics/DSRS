@page "/filelist"
@inherits BasePageComponent
@using AxleLoadSystem.Models
@inject IFileService fileService
@inject IAppState appState
@inject AuthenticationStateProvider authStateProvider
@inject IUserActivityService userActivityService
@inject IStationAccessService stationAccessService
@inject IStringLocalizer<Locales.File> localizer
@rendermode InteractiveServer

<PageTitleComponent Title="@localizer["ListofUploadedFiles"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    <div class="card-body">
        @if (stationAccess is not null)
        {
            <select class="form-control" @onchange="Search">
                <option value="0">-Select Station-</option>
                @foreach (Station item in stationAccess)
                {
                    <option value="@item.StationId">@item.StationName</option>
                }
            </select>
        }
        else
        {
            <Loader />
        }

        <hr />

        @if (stationId == 0)
        {
            <p>No station is selected</p>
        }
        else if (uploadedFiles is null)
        {
            <Loader />
        }
        else if (uploadedFiles.Count() == 0)
        {
            <p>No File Found</p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>@localizer["Date"]</th>
                        <th>@localizer["FileName"]</th>
                        <th>@localizer["FileType"]</th>
                        <th>@localizer["UploadedFrom"]</th>
                        <th>@localizer["UploadDate"]</th>
                        <th>@localizer["Processed"]</th>
                        <th>@localizer["Summary"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (UploadedFile uploadedFile in uploadedFiles.OrderByDescending(f => f.Date))
                    {
                        string displayLink = "/DailyData/" + uploadedFile.Id;
                        <tr>
                            <td>@uploadedFile.Date.ToString("dd MMM yyyy")</td>
                            <td><b>@uploadedFile.FileName</b></td>
                            <td>@Enum.GetName(typeof(UploadedFileType), uploadedFile.FileType)</td>
                            <td>@(uploadedFile.ManualUpload ? "Manual" : "API")</td>
                            <td>@uploadedFile.UploadDate.ToString("dd/MM/yyyy HH:mm:ss")</td>
                            <td class="@(uploadedFile.IsProcessed == false ? "text-danger" : "")">@(uploadedFile.IsProcessed ? "Processed" : "Not Processed")</td>
                            <td>@uploadedFile.Summary</td>
                            <td>
                                <div class="btn-group float-right">
                                    @if (!deleteClicked)
                                    {
                                        <span class="btn btn-primary" title="Delete file with data">
                                            <i class="fa fa-trash" @onclick="@(() => Delete(uploadedFile))"></i>
                                        </span>
                                    }
                                    <NavLink class="btn btn-primary" href="@displayLink" title="View data"><i class="fa fa-eye"></i></NavLink>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<ConfirmDialog @ref="deleteConfirmationRef" ModalName="Delete Modal" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmed" OnClose="DeleteDeclined" ConfirmationMessage="Sure to Delete this Data?" />

<style>
    td {
        word-wrap: break-word;
        overflow-wrap: break-word;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 180px; /* Adjust as necessary */
    }
</style>
@code {
    private IEnumerable<UploadedFile> uploadedFiles;
    private int stationId { get; set; } = 0;
    private IEnumerable<Station> stationAccess { get; set; }
    private User currentUser { get; set; } = new();
    protected ConfirmDialog deleteConfirmationRef { get; set; }
    private UploadedFile selectedFile { get; set; }
    private bool deleteClicked { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        stationAccess = await stationAccessService.GetStationAccessByUserId(currentUser.Id);
    }

    private async Task Search(ChangeEventArgs e)
    {
        stationId = Convert.ToInt32(e.Value);
        await GetFileList();
    }
    private async Task GetFileList()
    {
        if (stationId == 0)
        {
            uploadedFiles = null;
        }

        uploadedFiles = await fileService.GetUploadedFiles(new UploadedFile() { StationId = stationId });
    }
    private async Task Delete(UploadedFile file)
    {
        deleteClicked = true;
        selectedFile = file;
        await deleteConfirmationRef.Show();
    }
    private async Task DeleteConfirmed()
    {
        if(await fileService.Delete(selectedFile))
        {
            appState.SetNotification(this, "File Deleted", Notification.NotificationType.Success);
            await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = selectedFile.FileName + " File Deleted", Activity = "Delete" });
        }
        else
        {
            appState.SetNotification(this, "Error: File Deleted Failed", Notification.NotificationType.Failure);
        }

        await GetFileList();
    }
    private void DeleteDeclined()
    {
        deleteClicked = false;
    }
}
