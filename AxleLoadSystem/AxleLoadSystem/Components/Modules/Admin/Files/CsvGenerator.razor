@page "/csvgenerator"
@using System.Text
@using System.IO
@using BOL.Helpers
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>CSV Gnerator</PageTitle>
<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">CSV Generator</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col">
                <div class="form-group">
                    <label for="date" class="form-label">Date</label>
                    <input type="date" @bind="date" required class="form-control" placeholder="Date" id="date" />
                </div>
            </div>
            <div class="col">
                <div class="form-group">
                    <label for="date" class="form-label">Iteration</label>
                    <input type="number" @bind="iteration" required class="form-control" placeholder="Iteration" id="iteration" />
                </div>
            </div>
        </div>
    </div>
    <div class="card-footer">
        <div class="row">
            <div class="col">
                <button type="button" @onclick="GenerateAxleLoad">Generate Axle Load CSV</button>
                <button type="button" @onclick="GenerateFine">Generate Fine CSV</button>
            </div>
        </div>
    </div>
</div>

@code {
    private DateTime date { get; set; } = DateTime.Today.AddDays(-1);
    private int iteration { get; set; } = 1000;

    private List<string> sb { get; set; } = new();

    private async Task GenerateAxleLoad()
    {
        sb = new();
        date = date.AddHours(7);

        Random rnd = new Random(1);

        sb.Add("TransactionNumber,LaneNumber,DateTime,PlateZone,PlateSeries,PlateNumber,VehicleId,NumberOfAxle,VehicleSpeed,Axle1,Axle2,Axle3,Axle4,Axle5,Axle6,Axle7,AxleRemaining,GrossVehicleWeight,IsUnloaded,IsOverloaded,OverSizedModified,Wheelbase,ReceiptNumber,BillNumber,Axle1Time,Axle2Time,Axle3Time,Axle4Time,Axle5Time,Axle6Time,Axle7Time");

        for (int i = 1; i <= iteration; i++)
        {
            string line = "TN" + i;
            line += "," + rnd.Next(1, 5);
            line += "," + date.AddSeconds(i * 7).ToString(JsonDateTimeFormatAttribute.GlobalDateFormat);
            line += ",PZ" + rnd.Next(1000, 5000);
            line += ",PS" + rnd.Next(1000, 5000);
            line += ",PN" + rnd.Next(1000, 5000);
            line += ",VI" + rnd.Next(100, 500);
            line += "," + rnd.Next(0, 20);
            line += "," + (rnd.Next(30, 120) + Math.Round(rnd.NextDouble(), 2));

            double axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            double gross = axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            //Gross
            line += "," + Math.Round(gross, 2);

            //Booleans
            line += "," + rnd.Next(0, 1);
            line += "," + rnd.Next(0, 1);
            line += "," + rnd.Next(0, 1);
            //Wheelbase
            line += "," + rnd.Next(2, 20);
            //ReceiptNumber
            line += ",RN" + rnd.Next(2, 20);
            //BillNumber
            line += ",BN" + rnd.Next(2, 20);

            line += "," + date.AddSeconds((i * 7) + 3).ToString(JsonDateTimeFormatAttribute.GlobalDateFormat);
            line += "," + date.AddSeconds((i * 7) + 4).ToString(JsonDateTimeFormatAttribute.GlobalDateFormat);
            line += "," + date.AddSeconds((i * 7) + 5).ToString(JsonDateTimeFormatAttribute.GlobalDateFormat);
            line += "," + date.AddSeconds((i * 7) + 6).ToString(JsonDateTimeFormatAttribute.GlobalDateFormat);
            line += "," + date.AddSeconds((i * 7) + 7).ToString(JsonDateTimeFormatAttribute.GlobalDateFormat);
            line += "," + date.AddSeconds((i * 7) + 8).ToString(JsonDateTimeFormatAttribute.GlobalDateFormat);
            line += "," + date.AddSeconds((i * 7) + 9).ToString(JsonDateTimeFormatAttribute.GlobalDateFormat);

            sb.Add(line);
        }

        await this.DownloadData("Sample_LoadData_" + date.ToString("yyyyMMdd") + ".csv");
    }
    private async Task GenerateFine()
    {
        sb = new();
        date = date.AddHours(7);
        List<string> paymentMethods = ["Cash", "Bkash", "OnlineBanking"];
        Random rnd = new Random(1);

        sb.Add("TransactionNumber,DateTime,IsPaid,FineAmount,PaymentMethod,ReceiptNumber,BillNumber,WarehouseCharge,DriversLicenseNumber");

        for (int i = 1; i <= iteration; i++)
        {
            //TransactionNumber
            string line = "TN" + i;
            //DateTime
            line += "," + date.AddSeconds(i * 7).ToString(JsonDateTimeFormatAttribute.GlobalDateFormat);
            //IsPaid
            line += "," + rnd.Next(0, 1);
            //FineAmount
            line += "," + Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            //PaymentMethod
            line += "," + paymentMethods[rnd.Next(0, paymentMethods.Count - 1)];
            //ReceiptNumber
            line += ",RN" + rnd.Next(0, 10000);
            //BillNumber
            line += ",BN" + rnd.Next(0, 10000);
            //WarehouseCharge
            line += "," + Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            //DriversLicenseNumber
            line += ",DL" + rnd.Next(0, 10000);

            sb.Add(line);
        }

        await this.DownloadData("Sample_FinePayment_" + date.ToString("yyyyMMdd") + ".csv");
    }

    private async Task DownloadData(string fileName)
    {
        using (var ms = new MemoryStream())
        {
            using (TextWriter tw = new StreamWriter(ms))
            {
                foreach (string line in sb)
                {
                    tw.WriteLine(line);
                }

                tw.Flush();
                ms.Position = 0;

                using var streamRef = new DotNetStreamReference(stream: ms);
                await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            }
        }
    }
}
