@using System.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.RegularExpressions;
@inject IAppState appState
@inject AuthenticationStateProvider authStateProvider
@inject ISQLQueriesService sqlQueryService
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.CommonPages> localizerCommon
@inject NavigationManager navigationManager

<div class="card card-primary card-outline">
    @if (SqlSearch is not null)
    {
        <div class="card-body">
            <div class="row">
                <div class="col-md-8 col-sm-12">
                    <label for="sql" class="form-label">@localizerCommon["SQLQuery"]</label>
                    <textarea @bind="@SqlSearch.Query" class="form-control" placeholder="Please write SQL query only..." id="sql" style="field-sizing: content;"></textarea>
                </div>

                @if (parameters is not null && parameters.Any())
                {
                    <div class="col-md-4 col-sm-12">
                        <table class="table no-border">
                            <thead>
                                <tr>
                                    <th class="m-0 pt-0">@localizerCommon["Parameter.Name"]</th>
                                    <th class="m-0 pt-0">@localizerCommon["Parameter.Value"]</th>
                                    <th class="m-0 pt-0" style="width:20%;"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var param in parameters)
                                {
                                    <tr>
                                        <td class="m-0 p-0">
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text">@@</span>
                                                </div>
                                                <input type="text" @bind="param.Name" class="form-control" placeholder="@localizerCommon["Parameter.Name"]" min="5" maxlength="300" />
                                            </div>
                                        </td>
                                        <td class="m-0 p-0">
                                            <input type="text" @bind="param.Value" class="form-control" placeholder="@localizerCommon["Parameter.Value"]" min="1" maxlength="300" />
                                        </td>
                                        <td class="m-0 p-0">
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-success" title="Add New Parameter" @onclick="ParameterAdd"><i class="fas fa-plus-circle"></i></button>
                                                <button type="button" class="btn btn-danger" title="Delete New Parameter" @onclick="@(() => ParameterDelete(param))"><i class="fas fa-trash"></i></button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="col-md-4 col-sm-12">
                        <div class="form-group">
                            <label class="form-label">&nbsp;</label>
                            <div class="form-control m-0 p-0">
                                <button class="btn btn-primary w-100" @onclick="ParameterAdd"><i class="fas fa-plus-circle"></i> @localizerResource["Button.AddParameter"]</button>
                            </div>
                        </div>
                    </div>
                }

                <div class="col-md-12 col-sm-12">
                    <button type="submit" class="btn btn-primary w-100" disabled="@(showLoading ? "disabled" : null)" @onclick="ExecuteQuery">@localizerResource["Button.Execute"]</button>
                </div>
                <div class="col-md-3">
                    <label for="title" class="form-label">@localizerCommon["Title"]</label>
                    <input type="text" @bind="@SqlSearch.Title" class="form-control" placeholder="Title" id="title" />
                </div>
                <div class="col-md-5">
                    <label for="description" class="form-label">@localizerCommon["Description"]</label>
                    <input type="text" @bind="@SqlSearch.Description" class="form-control" placeholder="Description" id="description" />
                </div>
                <div class="col-md-4 col-sm-4">
                    <div class="from-group">
                        <label class="form-label">&nbsp;</label>
                        <div class="form-control btn-group p-0">
                            @if (SqlSearch.Id > 0)
                            {
                                <button type="button" class="btn btn-primary" disabled="@(showLoading ? "disabled" : null)" @onclick="Update">@localizerResource["Button.Update"]</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-primary" disabled="@(showLoading ? "disabled" : null)" @onclick="SaveNew">@localizerResource["Button.Save"]</button>
                            }
                            <button type="button" class="btn btn-primary" disabled="@(showLoading ? "disabled" : null)" @onclick="Cancel">@localizerResource["Button.Cancel"]</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (showLoading)
    {
        <Loader />
    }
    else if (results != null)
    {
        <div class="card-body">
            <div class="enable-table-scroll">
                <ErrorBoundary @ref="errorBoundary">
                    <ChildContent>
                        <QuickGrid TGridItem="DataRow" ItemsProvider="provider" Virtualize="true" ItemSize="35">
                            @foreach (DataColumn column in results.Columns)
                            {
                                <PropertyColumn Property="@(c => c[column.ColumnName])" Title="@column.ColumnName" Sortable="true"></PropertyColumn>
                            }
                        </QuickGrid>
                    </ChildContent>
                    <ErrorContent Context="ex">
                        @if (HandleError(@ex) == true)
                        {
                            <div class="alert alert-danger" role="alert">
                                <h5>An Unhandled error occured. Exception: @ex.Message</h5>
                            </div>
                        }
                    </ErrorContent>
                </ErrorBoundary>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public SQLQueries SqlSearch { get; set; } = new();
    [Parameter]
    public EventCallback<bool> OnChange { get; set; }

    private EditContext editContext = default!;
    private User currentUser { get; set; }
    private DataTable results;
    private GridItemsProvider<DataRow>? provider;

    private List<SqlSearchParameters> parameters { get; set; }
    private bool showLoading { get; set; } = false;
    ErrorBoundary errorBoundary;

    private class SqlSearchParameters
    {
        public string Name { get; set; } = "";
        public string Value { get; set; } = "";
    }

    protected override async Task OnParametersSetAsync()
    {
        editContext = new EditContext(SqlSearch);
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();

        parameters = new();
        if (SqlSearch is not null && SqlSearch.Id > 0)
        {
            foreach(string item in SqlSearch.ParameterList)
            {
                parameters.Add(new() { Name = item, Value = "" });
            }
        }
        else
        {
            SqlSearch = new();
        }
    }

    private async Task ExecuteQuery()
    {
        if (string.IsNullOrEmpty(SqlSearch.Query))
        {
            appState.SetNotification(this, new("Please enter query", Notification.NotificationType.Info));
            return;
        }
        try
        {
            showLoading = true;
            // On each event, reset any error state
            errorBoundary?.Recover();

            await this.LoadData();
        }
        catch (Exception ex)
        {
            appState.SetNotification(this, new("Error: " + ex.Message, Notification.NotificationType.Failure));
        }
        finally
        {
            showLoading = false;
        }
    }
    private async Task LoadData()
    {
        if (parameters.Any(p => string.IsNullOrEmpty(p.Name) || string.IsNullOrEmpty(p.Value)))
        {
            appState.SetNotification(this, new("Please enter name and values for all parameters", Notification.NotificationType.Warning));
            return;
        }
        if(parameters.Any(p=> p.Name.Contains(" ")))
        {
            appState.SetNotification(this, new("Parameter name can't contain blank space", Notification.NotificationType.Warning));
            return;
        }

        var regexItem = new Regex("^[a-zA-Z0-9 ]*$");
        if (parameters.Any(p => !regexItem.IsMatch(p.Name) || !regexItem.IsMatch(p.Value)))
        {
            appState.SetNotification(this, new("Parameter name and value can't contain special character", Notification.NotificationType.Warning));
            return;
        }

        Dictionary<string, object> dicParameters = new();
        foreach (SqlSearchParameters item in parameters)
        {
            dicParameters.Add(item.Name, item.Value);
        }

        results = await sqlQueryService.ExecuteSQLQuery(SqlSearch, dicParameters);
        var rows = results.AsEnumerable().ToList();
        var providerResult = GridItemsProviderResult
            .From<DataRow>(rows, rows.Count);
        provider = req => ValueTask.FromResult(providerResult);
    }
    private void OnInvalidSubmit()
    {
        appState.SetNotification(this, "Please enter valid values", Notification.NotificationType.Failure);
    }
    private void ParameterAdd()
    {
        if(parameters is null)
        {
            parameters = new();
        }
        if (parameters.Count() < 30)
        {
            parameters.Add(new SqlSearchParameters { Name = "", Value = "" });
        }
        else
        {
            appState.SetNotification(this, new("Maximum 30 Parameters can be added", Notification.NotificationType.Warning));
        }
    }

    private void ParameterDelete(SqlSearchParameters param)
    {
        parameters.Remove(param);
    }

    private async Task SaveNew()
    {
        if (SqlSearch.Query is null || SqlSearch.Query.Trim().Count(char.IsLetter) < 5)
        {
            appState.SetNotification(this, new("SQL Query must contain at least 5 characters", Notification.NotificationType.Failure));
            return;
        }
        else if (SqlSearch.Title is null || SqlSearch.Title.Trim().Count(char.IsLetter) < 5)
        {
            appState.SetNotification(this, new("Title must contain at least 5 characters", Notification.NotificationType.Failure));
            return;
        }
        else if (SqlSearch.Description is null || SqlSearch.Description.Trim().Count(char.IsLetter) < 5)
        {
            appState.SetNotification(this, new("Description must contain at least 5 characters", Notification.NotificationType.Failure));
            return;
        }
        else
        {
            SqlSearch.ParameterList = parameters.Select(p => p.Name).ToList();
            if (await sqlQueryService.InsertSqlQuery(SqlSearch, currentUser))
            {
                appState.SetNotification(this, new("Saved Successfully", Notification.NotificationType.Success));
                await this.OnChange.InvokeAsync(true);
            }
            else
            {
                appState.SetNotification(this, new("Save Failed", Notification.NotificationType.Failure));
            }       
        }
    }
    private async Task Update()
    {
        if (SqlSearch.Query is null || SqlSearch.Query.Trim().Count(char.IsLetter) < 5)
        {
            appState.SetNotification(this, new("SQL Query must contain at least 5 characters", Notification.NotificationType.Failure));
            return;
        }
        else if (SqlSearch.Title is null || SqlSearch.Title.Trim().Count(char.IsLetter) < 5)
        {
            appState.SetNotification(this, new("Title must contain at least 5 characters", Notification.NotificationType.Failure));
            return;
        }
        else if (SqlSearch.Description is null || SqlSearch.Description.Trim().Count(char.IsLetter) < 5)
        {
            appState.SetNotification(this, new("Description must contain at least 5 characters", Notification.NotificationType.Failure));
            return;
        }
        else
        {
            SqlSearch.ParameterList = parameters.Select(p => p.Name).ToList();
            if (await sqlQueryService.UpdateSqlQuery(SqlSearch, currentUser))
            {
                appState.SetNotification(this, new("Updated Successfully", Notification.NotificationType.Success));
                await this.OnChange.InvokeAsync(true);
            }
            else
            {
                appState.SetNotification(this, new("Updated Failed", Notification.NotificationType.Failure));
            }
        }
    }
    private async Task Cancel()
    {
        await this.OnChange.InvokeAsync(false);
    }

    private bool HandleError(Exception ex)
    {
        var msg = ex.Message;
        var trace = ex.StackTrace;
        // examine error here
        return true;
    }
}
