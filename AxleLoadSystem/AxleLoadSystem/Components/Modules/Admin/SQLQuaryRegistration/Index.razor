@page "/SQLQueryRegistration"
@using System.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.RegularExpressions;
@inject IAppState appState
@inject AuthenticationStateProvider authStateProvider
@inject ISQLQueriesService sqlQueryService
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.CommonPages> localizerCommon

<PageTitleComponent Title="@localizerCommon["SQLQueryRegistration"]"></PageTitleComponent>

<div class="card card-primary card-outline">
    @if (sqlSearch is not null)
    {
        <div class="card-body">
            <div class="row">
                <div class="col-md-8 col-sm-12">
                    <label for="sql" class="form-label">@localizerCommon["SQLQuery"]</label>
                    <textarea @bind="@sqlSearch.Query" class="form-control" placeholder="Please write SQL query only..." id="sql" style="field-sizing: content;"></textarea>
                </div>

                @if (parameters is not null)
                {
                    <div class="col-md-4 col-sm-12">
                        <table class="table no-border">
                            <thead>
                                <tr>
                                    <th class="m-0 pt-0">@localizerCommon["Parameter.Name"]</th>
                                    <th class="m-0 pt-0">@localizerCommon["Parameter.Value"]</th>
                                    <th class="m-0 pt-0" style="width:20%;"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var param in parameters)
                                {
                                    <tr>
                                        <td class="m-0 p-0">
                                            <div class="input-group">
                                                <div class="input-group-prepend">
                                                    <span class="input-group-text">@@</span>
                                                    <input type="text" @bind="param.Name" class="form-control" placeholder="@localizerCommon["Parameter.Name"]" min="5" maxlength="300" />
                                                </div>
                                            </div>
                                        </td>
                                        <td class="m-0 p-0">
                                            <input type="text" @bind="param.Value" class="form-control" placeholder="@localizerCommon["Parameter.Value"]" min="1" maxlength="300" />
                                        </td>
                                        <td class="m-0 p-0">
                                            <div class="btn-group">
                                                <button type="button" class="btn btn-success" title="Add New Parameter" @onclick="ParameterAdd"><i class="fas fa-plus-circle"></i></button>
                                                @if (parameters.Count > 1)
                                                {
                                                    <button type="button" class="btn btn-danger" title="Delete New Parameter" @onclick="@(() => ParameterDelete(param))"><i class="fas fa-trash"></i></button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }

                <div class="col-md-12 col-sm-12">
                    <div class="btn btn-group">
                        <button type="submit" class="btn btn-primary" disabled="@(showLoading ? "disabled" : null)" @onclick="ExecuteQuery">@localizerResource["Button.Execute"]</button>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(Summary))
                {
                    <div class="col-md-12">
                        <label class="text-danger">@Summary</label>
                    </div>
                }
            </div>
        </div>
    }
    @if (showLoading)
    {
        <Loader />
    }
    else if (results != null)
    {
        <div class="card-body">
            <div class="enable-table-scroll">
                <ErrorBoundary @ref="errorBoundary">
                    <ChildContent>
                        <QuickGrid TGridItem="DataRow" ItemsProvider="provider" Virtualize="true" ItemSize="35">
                            @foreach (DataColumn column in results.Columns)
                            {
                                <PropertyColumn Property="@(c => c[column.ColumnName])" Title="@column.ColumnName" Sortable="true"></PropertyColumn>
                            }
                        </QuickGrid>
                    </ChildContent>
                    <ErrorContent Context="ex">
                        @if (HandleError(@ex) == true)
                        {
                            <div class="alert alert-danger" role="alert">
                                <h5>An Unhandled error occured. Exception: @ex.Message</h5>
                            </div>
                        }
                    </ErrorContent>
                </ErrorBoundary>
            </div>
        </div>
    }
</div>

@code {
    private SQLQueries sqlSearch { get; set; } = new();
    private EditContext editContext = default!;
    private User currentUser { get; set; }
    private DataTable results;
    private GridItemsProvider<DataRow>? provider;

    private List<SqlSearchParameters> parameters { get; set; }
    private bool showLoading { get; set; } = false;
    private string Summary { get; set; }
    ErrorBoundary errorBoundary;

    private class SqlSearchParameters
    {
        public string Name { get; set; } = "";
        public string Value { get; set; } = "";
    }
    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(sqlSearch);
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();

        parameters = new();
        parameters.Add(new());
    }

    private async Task ExecuteQuery()
    {
        Summary = "";
        if (string.IsNullOrEmpty(sqlSearch.Query))
        {
            Summary = "Please enter query";
            return;
        }
        try
        {
            showLoading = true;
            // On each event, reset any error state
            errorBoundary?.Recover();

            await this.LoadData();
        }
        catch (Exception ex)
        {
            Summary = "Error: " + ex.Message;
        }
        finally
        {
            showLoading = false;
        }
    }
    private async Task LoadData()
    {
        Dictionary<string, object> dicParameters = new();

        foreach (SqlSearchParameters item in parameters.Where(p => !string.IsNullOrEmpty(p.Name) && !string.IsNullOrEmpty(p.Value)))
        {
            dicParameters.Add(item.Name, item.Value);
        }

        results = await sqlQueryService.ExecuteSQLQuery(sqlSearch, dicParameters);
        var rows = results.AsEnumerable().ToList();
        var providerResult = GridItemsProviderResult
            .From<DataRow>(rows, rows.Count);
        provider = req => ValueTask.FromResult(providerResult);
    }
    private void OnInvalidSubmit()
    {
        appState.SetNotification(this, "Please enter valid values", Notification.NotificationType.Failure);
    }
    private void ParameterAdd()
    {
        if (parameters.Count() < 30)
        {
            parameters.Add(new SqlSearchParameters { Name = "", Value = "" });
        }
        else
        {
            Summary = "Maximum 30 Parameters can be added";
        }
    }

    private void ParameterDelete(SqlSearchParameters param)
    {
        parameters.Remove(param);
    }

    private bool HandleError(Exception ex)
    {
        var msg = ex.Message;
        var trace = ex.StackTrace;
        // examine error here
        return true;
    }
}
