@page "/SQLQueryRegistration"
@using System.Data
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IAppState appState
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager
@inject ISQLQueriesService sqlQueryService
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.CommonPages> localizerCommon

<PageTitleComponent Title="@localizerCommon["SQLQueryRegistration"]">
    @if(!isEditEnabled)
    {
        <div class="btn-group float-right">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <button class="btn btn-primary" @onclick="NewQuery">@localizerResource["Button.AddNew"]</button>
                </Authorized>
            </AuthorizeView>
        </div>
    }
</PageTitleComponent>

@if(isEditEnabled)
{
    <FormComponent SqlSearch="sqlQueryForEdit" OnChange="HandleFormOnChange"/>
}
else if (sqlQueries is not null)
{
    <div class="card card-primary card-outline">
        <div class="card-body">
            <table class="table table-striped table-hover table-sm">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Parameter(s)</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (SQLQueries item in sqlQueries)
                    {
                        <tr>
                            <td>@item.Title</td>
                            <td>@item.Description</td>
                            <td>@item.Parameters</td>
                            <td class="text-right">
                                <div class="btn-group w-100">
                                    @if (item.Parameters.Any())
                                    {
                                        <span class="btn btn-primary" @onclick="@(() => SetParameters(item))" title="Set Parameters for execution"><i class="fa fa-list"></i> @localizerResource["Button.Show"]</span>
                                    }
                                    else
                                    {
                                        <span class="btn btn-primary" @onclick="@(() => SetParameters(item))" title="Execute as there is no parameters">@localizerResource["Button.Execute"]</span>
                                    }
                                    <span class="btn btn-primary" @onclick="@(()=> Edit(item))" title="Edit"><i class="fa fa-edit"></i> @localizerResource["Button.Edit"]</span>
                                    <span class="btn btn-primary" @onclick="@(()=> Delete(item))" title="Delete"><i class="fa fa-trash"></i>@localizerResource["Button.Delete"]</span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @if (showParameters)
        {
            <div class="card-body">
                <hr />
                <dl class="row">
                    <dt class="col-md-4">@localizerCommon["Title"]</dt>
                    <dd class="col-md-8">@selectedSqlQuery.Title</dd>
                    <dt class="col-md-4">@localizerCommon["Description"]</dt>
                    <dd class="col-md-8">@selectedSqlQuery.Description</dd>
                </dl>
                @if (parameters is not null)
                {
                    <div class="col-md-12">
                        <table class="table table-striped table-hover table-sm">
                            <thead>
                                <tr>
                                    <th>@localizerCommon["Parameter.Name"]</th>
                                    <th>@localizerCommon["Parameter.Value"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var param in parameters)
                                {
                                    <tr>
                                        <td>@@@param.Name</td>
                                        <td>
                                            <input type="text" @bind="param.Value" class="form-control" placeholder="@localizerCommon["Parameter.Value"]" min="1" maxlength="300" />
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="col-md-4 btn-group">
                        <span class="btn btn-primary" @onclick="ExecuteWithParameters" title="Execute">@localizerResource["Button.Execute"]</span>
                        <span class="btn btn-primary" @onclick="Cancel" title="Cancel">@localizerResource["Button.Cancel"]</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(Summary))
                {
                    <div class="col-md-12">
                        <label class="text-danger">@Summary</label>
                    </div>
                }
            </div>
        }

        @if (showLoading)
        {
            <Loader />
        }
        else if (results != null)
        {
            <div class="card-body">
                <div class="enable-table-scroll">
                    <ErrorBoundary @ref="errorBoundary">
                        <ChildContent>
                            <QuickGrid TGridItem="DataRow" ItemsProvider="provider" Virtualize="true" ItemSize="35">
                                @foreach (DataColumn column in results.Columns)
                                {
                                    <PropertyColumn Property="@(c => c[column.ColumnName])" Title="@column.ColumnName" Sortable="true"></PropertyColumn>
                                }
                            </QuickGrid>
                        </ChildContent>
                        <ErrorContent Context="ex">
                            @if (HandleError(@ex) == true)
                            {
                                <div class="alert alert-danger" role="alert">
                                    <h5>An Unhandled error occured. Exception: @ex.Message</h5>
                                </div>
                            }
                        </ErrorContent>
                    </ErrorBoundary>
                </div>
            </div>
        }
    </div>
}
<ConfirmDialog @ref="deleteConfirmationRef" ModalName="Delete Modal" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmed" OnClose="DeleteDeclined" ConfirmationMessage="Sure to Delete SQL Queries?" />
@code {
    private IEnumerable<SQLQueries> sqlQueries { get; set; }

    private SQLQueries selectedSqlQuery { get; set; }
    private DataTable results;
    ErrorBoundary errorBoundary;
    private bool showLoading { get; set; } = false;
    private List<SqlSearchParameters> parameters { get; set; }
    private GridItemsProvider<DataRow>? provider;
    protected ConfirmDialog deleteConfirmationRef { get; set; }
    private bool deleteClicked { get; set; } = false;
    private string Summary { get; set; }

    private bool isEditEnabled { get; set; } = false;
    private SQLQueries sqlQueryForEdit { get; set; } = new();

    private bool showParameters { get; set; }

    private class SqlSearchParameters
    {
        public string Name { get; set; } = "";
        public string Value { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        await BindQueries();
    }
    private async Task BindQueries()
    {
        sqlQueries = await sqlQueryService.Get();
    }
    private async Task SetParameters(SQLQueries sqlSearch)
    {
        parameters = new();
        results = null;
        selectedSqlQuery = sqlSearch;

        if (sqlSearch.ParameterList.Count() == 0)
        {
            showParameters = false;
            await this.Execute(selectedSqlQuery);
        }
        else
        {
            showParameters = true;
            foreach (string item in sqlSearch.ParameterList)
            {
                parameters.Add(new() { Name = item, Value = "" });
            }
        }
    }
    private void Edit(SQLQueries item)
    {
        sqlQueryForEdit = item;
        isEditEnabled = true;
        showParameters = false;
        results = null;
    }
    private void NewQuery()
    {
        sqlQueryForEdit = new();
        isEditEnabled = true;
        showParameters = false;
        results = null;
    }
    private void Cancel()
    {
        showParameters = false;
        selectedSqlQuery = new();
        results = null;
    }
    private async Task HandleFormOnChange(bool isAddedOrUpdated)
    {
        isEditEnabled = false;
        sqlQueryForEdit = new();
        if (isAddedOrUpdated)
        {
            await BindQueries();
        }
    }

    private async Task ExecuteWithParameters()
    {
        await Execute(selectedSqlQuery);
    }
    private async Task Execute(SQLQueries sqlSearch)
    {
        Summary = "";
        results = null;
        if (parameters.Any(p => string.IsNullOrEmpty(p.Value)))
        {
            Summary = "Please enter values for " + String.Join(",", parameters.Where(p => string.IsNullOrEmpty(p.Value)).Select(p => p.Name).ToList());
            return;
        }

        try
        {
            showLoading = true;
            // On each event, reset any error state
            errorBoundary?.Recover();

            await this.LoadData(sqlSearch);
        }
        catch (Exception ex)
        {
            Summary = "Error: " + ex.Message;
        }
        finally
        {
            showLoading = false;
        }
    }
    private async Task LoadData(SQLQueries sqlSearch)
    {
        Dictionary<string, object> dicParameters = new();

        if (parameters is not null)
        {
            foreach (SqlSearchParameters item in parameters.Where(p => !string.IsNullOrEmpty(p.Name) && !string.IsNullOrEmpty(p.Value)))
            {
                dicParameters.Add(item.Name, item.Value);
            }
        }

        results = await sqlQueryService.ExecuteSQLQuery(sqlSearch, dicParameters);
        var rows = results.AsEnumerable().ToList();
        var providerResult = GridItemsProviderResult
            .From<DataRow>(rows, rows.Count);
        provider = req => ValueTask.FromResult(providerResult);
    }

    private bool HandleError(Exception ex)
    {
        var msg = ex.Message;
        var trace = ex.StackTrace;
        // examine error here
        return true;
    }
    private async Task Delete(SQLQueries item)
    {
        deleteClicked = true;
        selectedSqlQuery = item;
        await deleteConfirmationRef.Show();
    }
    private async Task DeleteConfirmed()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        User currentUser = await customStateProvider.GetAuthorizedUser();

        if (await sqlQueryService.DeleteSqlQuery(selectedSqlQuery, currentUser))
        {
            appState.SetNotification(this, new("SQL Queries Deleted Successfully", Notification.NotificationType.Success));
            return;
        }
        else
        {
            appState.SetNotification(this, new("SQL Queries Delete Failed", Notification.NotificationType.Failure));
            return;
        }
        await BindQueries();
    }
    private void DeleteDeclined()
    {
        deleteClicked = false;
    }
}
