@page "/station/wimscale/{mode?}/{id:int?}"
@inherits BasePageComponent
@using System
@using BOL
@using Services
@rendermode InteractiveServer
@inject AuthenticationStateProvider authStateProvider
@inject IStationService stationService
@inject IWIMScaleService wimService
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.Station> localizer
@inject IAppState appState
@inject NavigationManager navigation

<PageTitleComponent Title="@localizer["WIMScaleManagement"]"></PageTitleComponent>

@if (wimScale is null || stations is null)
{
    <Loader />
}
else
{
    <EditForm Model="@wimScale" OnValidSubmit=@OnValidSubmit OnInvalidSubmit="@OnInvalidSubmit" FormName="WimForm" method="post">
        <DataAnnotationsValidator />
        <div class="card card-primary card-outline">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4 col-sm-12">
                        <div class="form-group">
                            <label for="name" class="form-label">@localizer["Station"]</label>
                            <label class="form-control">@stations.FirstOrDefault(s => s.StationId == wimScale.StationId).StationName</label>
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-12">
                        <div class="form-group">
                            @if (formMode == FormMode.Add)
                            {
                                <label for="wimLaneNumber" class="form-label">@localizer["WimLaneNumber"]</label>
                                <input type="number" @bind-value="wimScale.LaneNumber" required class="form-control" id="wimLaneNumber" min="1" max="99" />
                                <ValidationMessage For="() => wimScale.LaneNumber" />
                            }
                            else
                            {
                                <label for="wimLaneNumber" class="form-label">@localizer["WimLaneNumber"]</label>
                                <label class="form-control">@wimScale.LaneNumber</label>
                            }
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-12">
                        <div class="form-group">
                            @if (formMode == FormMode.Details)
                            {
                                <label for="WimEquipmentDescription" class="form-label">@localizer["WimEquipmentDescription"]</label>
                                <label class="form-control">@wimScale.EquipmentDescription</label>
                            }
                            else
                            {
                                <label for="WimEquipmentDescription" class="form-label">@localizer["WimEquipmentDescription"]</label>
                                <input type="text" @bind-value="wimScale.EquipmentDescription" required class="form-control" placeholder="@localizer["WimEquipmentDescription"]" id="WimEquipmentDescription" maxlength="20" />
                                <ValidationMessage For="() => wimScale.EquipmentDescription" />
                            }
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-12">
                        <div class="form-group">
                            @if (formMode == FormMode.Details)
                            {
                                <label for="wimLaneDirection" class="form-label">@localizer["WimLaneDirection"]</label>
                                <label class="form-control" style="max-width:auto; height:fit-content">@wimScale.LaneDirection</label>
                            }
                            else
                            {
                                <label for="wimLaneDirection" class="form-label">@localizer["WimLaneDirection"]</label>
                                <input type="text" @bind-value="wimScale.LaneDirection" required class="form-control" placeholder="@localizer["WimLaneDirection"]" id="wimLaneDirection" maxlength="50" />
                                <ValidationMessage For="() => wimScale.LaneDirection" />
                            }
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-12">
                        <div class="form-group">
                            @if (formMode == FormMode.Details)
                            {
                                WIMType selectedType = (WIMType)Enum.Parse(typeof(WIMType), wimScale.Type.ToString());
                                <label class="form-label">@localizer["WimType"]</label>
                                <label class="form-control">@(selectedType.ToDescription())</label>
                            }
                            else
                            {
                                <label for="Type" class="form-label">@localizer["WimType"]</label>
                                <select class="form-control" @bind="@wimScale.Type">
                                    <option value="1">@(((WIMType)Enum.Parse(typeof(WIMType), "1")).ToDescription())</option>
                                    <option value="2">@(((WIMType)Enum.Parse(typeof(WIMType), "2")).ToDescription())</option>
                                    <option value="3">@(((WIMType)Enum.Parse(typeof(WIMType), "3")).ToDescription())</option>
                                    <option value="4">@(((WIMType)Enum.Parse(typeof(WIMType), "4")).ToDescription())</option>
                                    <option value="5">@(((WIMType)Enum.Parse(typeof(WIMType), "5")).ToDescription())</option>
                                </select>
                                <ValidationMessage For="() => wimScale.Type" />
                            }
                        </div>
                    </div>
                    <div class="col-md-4 col-sm-4">
                        <div class="form-group">
                            <label for="chkUpbound" class="form-label">@localizer["DrivingDirection"]</label>
                            <div class="form-control">
                                <div class="icheck-primary d-inline">
                                    <input type="radio" id="radioUpbound" name="upbound" value="true"
                                           checked="@wimScale.IsUpbound"
                                           @onchange="@(e => OnBoundChanged(true))"
                                           disabled="@(formMode == FormMode.Details)" />
                                    <label for="radioUpbound">@localizer["Upbound"]</label>
                                </div>
                                <div class="icheck-primary d-inline">
                                    <input type="radio" id="radioDownbound" name="upbound" value="false"
                                           checked="@(!wimScale.IsUpbound)"
                                           @onchange="@(e => OnBoundChanged(false))"
                                           disabled="@(formMode == FormMode.Details)" />
                                    <label for="radioDownbound">@localizer["Downbound"]</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(Summary))
                    {
                        <label class="text-danger">@Summary</label>
                    }
                </div>
            </div>
            <div class="card-footer">
                <div class="col-md-4 col-sm-12 btn-group">
                    @if (formMode == FormMode.Details)
                    {
                        <span @onclick="Edit" class="btn btn-primary">@localizerResource["Button.Edit"]</span>
                    }
                    else
                    {
                        <button class="btn btn-primary" type="submit">@(formMode == FormMode.Add ? @localizerResource["Button.Save"] : @localizerResource["Button.Update"])</button>
                    }
                    <NavLink class="btn btn-primary" href="@("/station/wimscale/list/" + wimScale.StationId )">@localizerResource["Button.Cancel"]</NavLink>
                    </div>
                </div>
            </div>
        </EditForm>
}

@code {
    [Parameter]
    public string Mode { get; set; }
    [Parameter]
    public int Id { get; set; }

    private FormMode formMode = FormMode.Details;
    private WIMScale wimScale { get; set; } = null;
    private IEnumerable<Station> stations;
    private IEnumerable<WIMScale> wims;
    private User currentUser { get; set; }
    private bool laneNumberExists { get; set; } = false;
    private string Summary { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        if (Mode.ToLower() == "new")
        {
            wimScale = new();
            formMode = FormMode.Add;
            wimScale.StationId = Id;
        }
        else if (Id > 0)
        {
            wimScale = await wimService.GetById(new WIMScale() { Id = Convert.ToInt16(this.Id) });
            if (Mode.ToLower() == "details")
            {
                formMode = FormMode.Details;
            }
            else if (Mode.ToLower() == "edit")
            {
                formMode = FormMode.Edit;
            }
        }
        wims = await wimService.GetByStationId(wimScale.StationId);
        stations = await stationService.Get();
    }

    void OnInvalidSubmit()
    {
        Notification notification = new("Please enter valid data", Notification.NotificationType.Warning);
        appState.SetNotification(this, notification);
    }
    async Task OnValidSubmit(EditContext editContext)
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        Notification notification = new();
        Summary = "";
        bool isSuccess = false;

        if (formMode == FormMode.Edit)
        {
            if (await wimService.Update(wimScale, currentUser))
            {
                notification.Type = Notification.NotificationType.Success;
                notification.Message = "WIM Scale Updated Successfully";
                isSuccess = true;
            }
            else
            {
                notification.Type = Notification.NotificationType.Failure;
                notification.Message = "WIM Scale Update Failed";
            }
        }
        else
        {
            laneNumberExists = wims.Any(l => l.LaneNumber == wimScale.LaneNumber);
            if (laneNumberExists)
            {
                Summary = "WIM Scale already has this Lane Number";
                return;
            }
            else
            {
                if (await wimService.Add(wimScale, currentUser))
                {
                    notification.Type = Notification.NotificationType.Success;
                    notification.Message = "WIM Scale Added Successfully";
                    isSuccess = true;
                }
                else
                {
                    notification.Type = Notification.NotificationType.Failure;
                    notification.Message = "WIM Scale Add Failed";
                }
            }
        }

        appState.SetNotification(this, notification);
        navigation.NavigateTo("station/wimscale/list/" + wimScale.StationId);

    }
    private void Edit()
    {
        formMode = FormMode.Edit;
    }
    private void OnBoundChanged(bool isUpbound)
    {
        if (formMode != FormMode.Details)
        {
            wimScale.IsUpbound = isUpbound;
        }
    }
}
