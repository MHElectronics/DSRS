@using System
@using BOL
@using Services
@rendermode InteractiveServer
@inject AuthenticationStateProvider authStateProvider
@inject IStationService stationService
@inject IWIMScaleService wimService
@inject IAppState appState
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.Station> localizer

<PageTitleComponent Title="@localizer["StationList"]">
    <NavLink class="btn btn-primary pull-right" href="/station/new" title="Add New Station">
        <i class="fa fa-plus"></i> @localizer["Button.AddStation"]
    </NavLink>
</PageTitleComponent>

@if (stations is null)
{
    <Loader />
}
else
{
    <div class="card card-primary card-outline">
        <div class="card-body">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>@localizer["StationId"]</th>
                        <th>@localizer["Name"]</th>
                        <th>@localizer["Address"]</th>
                        <th>@localizer["AuthKey"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in stations.OrderBy(s => s.StationId))
                    {
                        <tr>
                            <td>@item.StationId</td>
                            <td>@item.StationName</td>
                            <td>@item.Address</td>
                            <td>@item.AuthKey</td>
                            <td>
                                <div class="btn-group float-right">
                                    <a class="btn btn-primary" href="@("/wimscale/list/" + item.StationId)" title="WIM Scale List Information">
                                        WIM Scale
                                    </a>
                                    <a class="btn btn-primary" href="@("/station/details/" + item.StationId)" title="Details Information">
                                        <i class="fa fa-info"></i>
                                    </a>
                                    <a class="btn btn-primary" href="@("/station/edit/" + item.StationId)" title="Edit Information">
                                        <i class="fa fa-edit"></i>
                                    </a>
                                    <span class="btn btn-primary">
                                        @if (wims is not null && !wims.Any(w => w.StationId == item.StationId))
                                        {
                                            <i class="fa fa-trash" @onclick="(() => DeleteStation(item))" title="Delete Station"></i>
                                        }
                                        else
                                        {
                                            <i class="fa fa-ban" title="Can't delete station with WIMs"></i>
                                        }
                                    </span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <ConfirmDialog @ref="deleteConfirmationStationRef" ModalName="Delete Modal" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmedStation" OnClose="DeleteDeclined" ConfirmationMessage="Sure to Delete Station?" />
}
<style>
    td {
        word-wrap: break-word;
        overflow-wrap: break-word;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 200px; /* Adjust as necessary */
    }
</style>
@code {
    private IEnumerable<Station> stations;
    private IEnumerable<WIMScale> wims;
    protected ConfirmDialog deleteConfirmationStationRef { get; set; }
    private Station SelectedStation { get; set; }
    private User currentUser { get; set; }
    private bool deleteClicked { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        await GetStationandWimList();
    }
    private async Task GetStationandWimList()
    {
        stations = await stationService.Get();
        wims = await wimService.GetAll();
        StateHasChanged();
    }
    private async Task DeleteStation(Station station)
    {
        deleteClicked = true;
        SelectedStation = station;
        await deleteConfirmationStationRef.Show();
    }
    private async Task DeleteConfirmedStation()
    {
        Notification notification = new();
        if (await stationService.Delete(SelectedStation, currentUser))
        {
            notification.Type = Notification.NotificationType.Success;
            notification.Message = "Station Deletion Successful";
        }
        else
        {
            notification.Type = Notification.NotificationType.Failure;
            notification.Message = "Error Station Deletion";
        }

        appState.SetNotification(this, notification);
        await GetStationandWimList();
    }
    private void DeleteDeclined()
    {
        deleteClicked = false;
    }
}
