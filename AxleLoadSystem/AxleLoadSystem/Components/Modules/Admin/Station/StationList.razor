@using System
@using BOL
@using Services
@rendermode InteractiveServer
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.Station> localizer
@inject IStationService stationService
@inject IWIMScaleService wimService

<PageTitle>@localizer["StationList"]</PageTitle>
<h1>@localizer["StationList"]</h1>

<NavLink class="btn btn-primary pull-right" href="/station/new" title="Add New Station">
    <i class="fa fa-plus"></i> @localizer["Button.AddStation"]
</NavLink>
<NavLink class="btn btn-primary pull-right" href="/wimscale/new" title="Add New WIM Scale">
    <i class="fa fa-plus"></i> @localizer["Button.AddWim"]
</NavLink>
@if (stations is null)
{
    <Loader />
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>@localizer["StationId"]</th>
                <th>@localizer["Code"]</th>
                <th>@localizer["Name"]</th>
                <th>@localizer["Address"]</th>
                <th>@localizer["AuthKey"]</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in stations.OrderBy(s => s.StationId))
            {
                <tr>
                    <td>@item.StationId</td>
                    <td><b>@item.StationCode</b></td>
                    <td>@item.StationName</td>
                    <td>@item.Address</td>
                    <td>@item.AuthKey</td>
                    <td>
                        <a class="waves-effect" href="@("/station/details/" + item.StationId)" title="Details Information">
                            <i class="fa fa-info"></i>
                        </a>
                    </td>
                    <td>
                        <a class="waves-effect" href="@("/station/edit/" + item.StationId)" title="Edit Information">
                            <i class="fa fa-edit"></i>
                        </a>
                    </td>
                    <td>
                        <a class="waves-effect" @onclick="(() => DeleteStation(item))">
                            <i class="fa fa-trash"></i>
                        </a>
                    </td>
                </tr>

                @if(wims is not null && wims.Any(w => w.StationId == item.StationId))
                {
                    foreach (WIMScale wim in wims.Where(w => w.StationId == item.StationId))
                    {
                        <tr>
                            <td></td>
                            <td>Lane: @wim.LaneNumber</td>
                            <td>High Speed: @(wim.IsHighSpeed ? "Yes" : "No")</td>
                            <td>Eq. Code: @wim.EquipmentCode</td>
                            <td>Direction: @wim.LaneDirection</td>
                            <td>
                                <a class="waves-effect" href="@("/wimscale/details/" + wim.Id)" title="Details Information">
                                    <i class="fa fa-info"></i>
                                </a>
                            </td>
                            <td>
                                <a class="waves-effect" href="@("/wimscale/edit/" + wim.Id)" title="Edit Information">
                                    <i class="fa fa-edit"></i>
                                </a>
                            </td>
                            <td>
                                <a class="waves-effect" @onclick="(() => DeleteWim(wim))">
                                    <i class="fa fa-trash"></i>
                                </a>
                            </td>

                        </tr>
                    }
                }
            }
        </tbody>
    </table>
    <CustomNotification Notification="notification" />
    <ConfirmDialog @ref="deleteConfirmationStationRef" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmedStation" OnClose="DeleteDeclined" ConfirmationMessage="Sure to Delete Station?" />
    <ConfirmDialog @ref="deleteConfirmationWimRef" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmedWim" OnClose="DeleteDeclined" ConfirmationMessage="Sure to Delete Wim Scale?" />
}
@code {
    private IEnumerable<Station> stations;
    private IEnumerable<WIMScale> wims;
    protected ConfirmDialog deleteConfirmationStationRef { get; set; }
    protected ConfirmDialog deleteConfirmationWimRef { get; set; }
    private Station SelectedStation { get; set; }
    private WIMScale SelectedWim { get; set; }
    private Notification notification { get; set; } = new();
    private bool deleteClicked { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await GetStationandWimList();
    }
    private async Task GetStationandWimList()
    {
        stations = await stationService.Get();
        wims = await wimService.GetAll();
    }
    private async Task DeleteStation(Station station)
    {
        deleteClicked = true;
        SelectedStation = station;
        await deleteConfirmationStationRef.Show();
    }
    private async Task DeleteWim(WIMScale wim)
    {
        deleteClicked = true;
        SelectedWim = wim;
        await deleteConfirmationWimRef.Show();
    }
    private async Task DeleteConfirmedStation()
    {
        if (await stationService.Delete(SelectedStation))
        {
            notification.Type = Notification.NotificationType.Success;
            notification.Message = "Station Deletion Successful";
        }
        else
        {
            notification.Type = Notification.NotificationType.Failure;
            notification.Message = "Error Station Deletion";
        }
        await GetStationandWimList();
    }
    private async Task DeleteConfirmedWim()
    {
        if (await wimService.Delete(SelectedWim))
        {
            notification.Type = Notification.NotificationType.Success;
            notification.Message = "Wim Scale Deletion Successful";
        }
        else
        {
            notification.Type = Notification.NotificationType.Failure;
            notification.Message = "Error Wim Scale Deletion";
        }
        await GetStationandWimList();
    }

    private void DeleteDeclined()
    {
        deleteClicked = false;
    }
}
