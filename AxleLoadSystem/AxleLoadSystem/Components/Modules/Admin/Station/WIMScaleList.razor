@page "/station/wimscale/list/{id:int?}"
@using System
@using BOL
@using Services
@rendermode InteractiveServer
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.Station> localizer
@inject IStationService stationService
@inject IWIMScaleService wimService
@inject IAppState appState

<PageTitleComponent Title="@localizer["WIMScaleList"]">
    <NavLink class="btn btn-primary pull-right" href="/station" title="Station List">
        <i class="fa fa-arrow-left"></i> @localizerResource["Button.Back"]
    </NavLink>
    <NavLink class="btn btn-primary pull-right" href="@("/station/wimscale/new/" + Id)" title="Add New WIM Scale">
        <i class="fa fa-plus"></i> @localizer["Button.AddWim"]
    </NavLink>
</PageTitleComponent>

@if (wims is null)
{
    <Loader />
}
else
{
    <div class="card card-primary card-outline">
        <div class="card-body">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>@localizer["WimLaneNumber"]</th>
                        <th>@localizer["WimType"]</th>
                        <th>@localizer["WimEquipmentDescription"]</th>
                        <th>@localizer["WimLaneDirection"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (WIMScale wim in wims)
                    {
                        <tr>
                            <td>Lane: @wim.LaneNumber</td>
                            <td>@(((WIMType)Enum.Parse(typeof(WIMType), wim.Type.ToString())).ToDescription())</td>
                            <td>Eq. Description: @wim.EquipmentDescription</td>
                            <td>@(wim.IsUpbound ? "Upbound":"Downbound"): @wim.LaneDirection</td>
                            <td>
                                <div class="btn-group float-right">
                                    <a class="btn btn-primary" href="@("/station/wimscale/details/" + wim.Id)" title="Details Information">
                                        <i class="fa fa-info"></i>
                                    </a>
                                    <a class="btn btn-primary" href="@("/station/wimscale/edit/" + wim.Id)" title="Edit Information">
                                        <i class="fa fa-edit"></i>
                                    </a>
                                    <a class="btn btn-primary" @onclick="(() => DeleteWim(wim))" title="Delete WIM Scale">
                                        <i class="fa fa-trash"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }       
                </tbody>
            </table>
        </div>
    </div>

    <ConfirmDialog @ref="deleteConfirmationWimRef" ModalName="Delete Modal" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmedWim" OnClose="DeleteDeclined" ConfirmationMessage="Sure to Delete Wim Scale?" />

}
<style>
    td {
        word-wrap: break-word;
        overflow-wrap: break-word;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 200px; /* Adjust as necessary */
    }
</style>
@code {
    [Parameter]
    public int Id { get; set; }

    private IEnumerable<WIMScale> wims;
    protected ConfirmDialog deleteConfirmationStationRef { get; set; }
    protected ConfirmDialog deleteConfirmationWimRef { get; set; }
    private User currentUser { get; set; }
    private Station SelectedStation { get; set; }
    private WIMScale SelectedWim { get; set; }
    private bool deleteClicked { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        await GetWimList();
    }
    private async Task GetWimList()
    {
        if (Id > 0)
        {
            wims = await wimService.GetByStationId(Id);
        }
        StateHasChanged();
    }

    private async Task DeleteWim(WIMScale wim)
    {
        deleteClicked = true;
        SelectedWim = wim;
        await deleteConfirmationWimRef.Show();
    }
   
    private async Task DeleteConfirmedWim()
    {
        Notification notification = new();
        if (await wimService.Delete(SelectedWim, currentUser))
        {
            notification.Type = Notification.NotificationType.Success;
            notification.Message = "Wim Scale Deletion Successful";
        }
        else
        {
            notification.Type = Notification.NotificationType.Failure;
            notification.Message = "Error Wim Scale Deletion";
        }

        appState.SetNotification(this, notification);
        await GetWimList();
    }

    private void DeleteDeclined()
    {
        deleteClicked = false;
    }
}
