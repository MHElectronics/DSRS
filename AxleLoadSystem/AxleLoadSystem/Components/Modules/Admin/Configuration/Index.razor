@page "/configuration"
@using BOL;
@using Services;
@inject IConfigurationService configurationService
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IAppState appState

<PageTitleComponent Title="@localizer["ReportConfiguration.Title"]"></PageTitleComponent>

@if (configuration == null)
{
    <Loader />
}
else
{
    <div class="card card-primary card-outline">
        <div class="card-body">
            <EditForm Model="@configuration" OnValidSubmit=@OnValidSubmit OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-md-3 col-sm-6">
                        <div class="form-group">
                            @if (editConfiguration)
                            {
                                <label for="numberofAxle" class="form-label">@localizer["MaximumAxleNumber"]</label>
                                <input type="number" @bind="configuration.NumberOfAxle" required class="form-control" placeholder="Maximum Axle Number" id="numberofAxle" min="1" />
                                <ValidationMessage For="() => configuration.NumberOfAxle" />
                            }
                            else
                            {
                                <label for="numberofAxle" class="form-label">@localizer["MaximumAxleNumber"]</label>
                                <label class="form-control">@configuration.NumberOfAxle</label>
                            }
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6">
                        <div class="form-group">
                            @if (editConfiguration)
                            {
                                <label for="WheelBaseMax" class="form-label">@localizer["MaximumWheelBase"]</label>
                                <input type="number" @bind="configuration.WheelBaseMaximum" required class="form-control" placeholder="WheelBase Maximum" id="WheelBaseMax" min="1" />
                                <ValidationMessage For="() => configuration.WheelBaseMaximum" />
                            }
                            else
                            {
                                <label for="WheelBaseMax" class="form-label">@localizer["MaximumWheelBase"]</label>
                                <label class="form-control">@configuration.WheelBaseMaximum</label>
                            }
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6">
                        <div class="form-group">
                            @if (editConfiguration)
                            {
                                <label for="startDate" class="form-label">@localizer["SystemStartDate"]</label>
                                <input type="date" @bind="configuration.SystemStartDate" required class="form-control" placeholder="System Start Date" id="startDate" />
                                <ValidationMessage For="() => configuration.SystemStartDate" />
                            }
                            else
                            {
                                <label for="startDate" class="form-label">@localizer["SystemStartDate"]</label>
                                <label class="form-control">@configuration.SystemStartDate.ToString("dd MMM yy")</label>
                            }
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6">
                        <div class="form-group">
                            <label>&nbsp;</label>
                            <div class="form-control btn-group p-0">
                                @if (!editConfiguration)
                                {
                                    <span class="btn btn-primary" @onclick="ToggleEdit">@localizerResource["Button.Edit"]</span>
                                }
                                else
                                {
                                    <button class="btn btn-primary" type="submit">@localizerResource["Button.Save"]</button>
                                    <span class="btn btn-primary" role="button" @onclick="Cancel">@localizerResource["Button.Cancel"]</span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
    <div class="card card-primary card-outline">
        <div class="card-body">
            <h3 class="card-header">
                <span>@localizer["Report.GrossVehicleWeightLimit"]&nbsp;</span>
                @if(!weightAddEnabled && !weightEditEnabled)
                {
                    <span class="btn btn-primary" @onclick="AddWeight"><i class="fa fa-plus"></i> @localizerResource["Button.AddNew"]</span>
                }
            </h3>
            @if (weightAddEnabled || weightEditEnabled)
            {
                <div class="row">
                    <div class="col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="axleNumber" class="form-label">@localizer["Report.VehicleType"]</label>
                            @if (weightEditEnabled)
                            {
                                <label class="form-control">@selectedWeight.AxleNumber</label>
                            }
                            else
                            {
                                <input type="number" min="2" max="@configuration.NumberOfAxle" class="form-control" @bind="selectedWeight.AxleNumber" />
                            }
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="allowedWeight" class="form-label">@localizer["Report.GrossVehicleWeightLimit"]</label>
                            <input type="number" @bind="selectedWeight.AllowedWeight" required class="form-control" placeholder="Gross Vehicle Weight Limit" />
                        </div>
                    </div>
                    <div class="col-md-6 col-sm-12">
                        <div class="form-group">
                            <label>&nbsp;</label>
                            <div class="form-control btn-group p-0">
                                @if (weightEditEnabled)
                                {
                                    <span class="btn btn-primary" @onclick="UpdateAlloweWeight">@localizerResource["Button.Update"]</span>
                                }
                                else
                                {
                                    <span class="btn btn-primary" @onclick="AddAlloweWeight">@localizerResource["Button.Add"]</span>
                                }
                                <span class="btn btn-primary" @onclick="CancelWeightEdit">@localizerResource["Button.Cancel"]</span>
                            </div>
                        </div>
                    </div>
                    @if (allowWeightNotification is not null)
                    {
                        <div class="col-md-12 col-sm-12">
                            <CustomNotification Notification="allowWeightNotification"></CustomNotification> 
                        </div>
                    }
                </div>
            }
            @if (overloadWeights is not null)
            {
                <table class="table table-stripped">
                    <thead>
                        <tr>
                            <th class="text-center">@localizer["Report.VehicleType"]</th>
                            <th class="text-right">@localizer["Report.GrossVehicleWeightLimit"]</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (ConfigurationOverloadWeight item in overloadWeights.OrderBy(w => w.AxleNumber))
                        {
                            <tr>
                                <td class="text-center">@item.AxleNumber</td>
                                <td class="text-right">@item.AllowedWeight.ToString("N0")</td>
                                <td class="text-center"><span class="btn btn-primary" @onclick="(() => EditWeight(item.AxleNumber))" title="Edit Gross Vehicle Weight Limit for number of axle @item.AxleNumber"><i class="fa fa-edit"></i></span></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-danger">Gross Vehicle Weight Limit not found</p>
            }
        </div>
    </div>
}

@code {
    private Configuration configuration { get; set; } = new();
    private User currentUser { get; set; }
    private bool editConfiguration { get; set; } = false;
    private bool trigger { get; set; } = false;

    private List<ConfigurationOverloadWeight> overloadWeights { get; set; }
    private bool weightEditEnabled { get; set; } = false;
    private bool weightAddEnabled { get; set; } = false;
    private ConfigurationOverloadWeight selectedWeight { get; set; }
    private Notification allowWeightNotification { get; set; }
    private int MaxAxleNumber { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();

        configuration = await configurationService.GetConfiguration();
        MaxAxleNumber = configuration.NumberOfAxle;
        if (configuration == null)
        {
            configuration = new Configuration();
            editConfiguration = true;
            trigger = true;
        }

        overloadWeights = (await configurationService.GetOverloadWeights()).ToList();
    }

    void OnInvalidSubmit()
    {
        Notification notification = new("Please enter valid data", Notification.NotificationType.Warning);
        appState.SetNotification(this, notification);
    }

    async Task OnValidSubmit(EditContext editContext)
    {
        Notification notification = null;

        if (editConfiguration && trigger)
        {
            if (await configurationService.InsertConfiguration(configuration, currentUser))
            {
                notification = new("Configuration added successfully",Notification.NotificationType.Success);
            }
            else
            {
                notification = new("Failed to add configuration", Notification.NotificationType.Failure);
            }
        }
        else
        {
            await configurationService.UpdateConfiguration(configuration, currentUser);
            notification = new("Configuration updated successfully", Notification.NotificationType.Success);
        }

        if (notification is not null)
        {
            appState.SetNotification(this, notification);
        }

        editConfiguration = false;
    }
    private async Task Cancel()
    {
        configuration = await configurationService.GetConfiguration();
        editConfiguration = false;
    }
    void ToggleEdit()
    {
        editConfiguration = !editConfiguration;
    }

    private void AddWeight()
    {
        weightAddEnabled = true;
        weightEditEnabled = false;
        allowWeightNotification = null;
        selectedWeight = new();
        selectedWeight.AxleNumber = overloadWeights.Max(w=>w.AxleNumber) + 1;
        selectedWeight.AllowedWeight = 0;
    }
    private void EditWeight(int numberOfAxle)
    {
        weightEditEnabled = true;
        weightAddEnabled = false;
        allowWeightNotification = null;
        selectedWeight = new();
        selectedWeight.AxleNumber = numberOfAxle;
        if (overloadWeights.Any(w => w.AxleNumber == numberOfAxle))
        {
            selectedWeight.AllowedWeight = overloadWeights.FirstOrDefault(w => w.AxleNumber == numberOfAxle).AllowedWeight;
        }
    }
    private async Task UpdateAlloweWeight()
    {
        allowWeightNotification = null;
        if (selectedWeight.AxleNumber < 2 || selectedWeight.AxleNumber > MaxAxleNumber)
        {
            allowWeightNotification = new("Axle number must be in between or equal to 2 to " + MaxAxleNumber, Notification.NotificationType.Warning);
        }
        else
        {
            if (selectedWeight.AllowedWeight > 0)
            {
                if (await configurationService.UpdateOverloadWeight(selectedWeight, currentUser))
                {
                    overloadWeights.FirstOrDefault(w => w.AxleNumber == selectedWeight.AxleNumber).AllowedWeight = selectedWeight.AllowedWeight;
                    allowWeightNotification = new("Allowed weight updated successfully", Notification.NotificationType.Success);
                }
            }
            else
            {
                allowWeightNotification = new("Allowed weight must be greater then 0", Notification.NotificationType.Warning);
            }
        }
    }
    private async Task AddAlloweWeight()
    {
        allowWeightNotification = null;
        if (selectedWeight.AxleNumber <= 2 || selectedWeight.AxleNumber >= MaxAxleNumber)
        {
            allowWeightNotification = new("Axle number must be in between or equal to 2 to " + MaxAxleNumber, Notification.NotificationType.Warning);
        }
        else
        {
            if (selectedWeight.AllowedWeight > 0)
            {
                if (overloadWeights.Any(w => w.AxleNumber == selectedWeight.AxleNumber))
                {
                    allowWeightNotification = new("Axle number already exists", Notification.NotificationType.Warning);
                }
                else
                {
                    try
                    {
                        if (await configurationService.InsertOverloadWeight(selectedWeight, currentUser))
                        {
                            overloadWeights.Add(new ConfigurationOverloadWeight() { AxleNumber = selectedWeight.AxleNumber, AllowedWeight = selectedWeight.AllowedWeight });
                            allowWeightNotification = new("Allowed weight added successfully", Notification.NotificationType.Success);
                        }
                        else
                        {
                            allowWeightNotification = new("Allowed weight add failed", Notification.NotificationType.Failure);
                        }
                    }
                    catch (Exception ex)
                    {
                        allowWeightNotification = new("Allowed weight add failed. Error: " + ex.Message, Notification.NotificationType.Failure);
                        throw;
                    }
                }
            }
            else
            {
                allowWeightNotification = new("Allowed weight must be greater then 0", Notification.NotificationType.Warning);
            }
        }
    }
    private void CancelWeightEdit()
    {
        weightEditEnabled = false;
        weightAddEnabled = false;
    }
}
