@using System
@using BOL
@inject AuthenticationStateProvider authStateProvider
@inject ICategoryService CategoryService
@inject IAppState appState
@inject IStringLocalizer<Locales.CommonPages> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource

<PageTitleComponent Title="@localizer["Tutorial.CategoryList"]">
@*     <NavLink class="btn btn-primary pull-right" href="/Category/new" title="Add New">
        <i class="fa fa-plus"></i> @localizerResource["Button.AddNew"]
    </NavLink> *@ 
    <div class="btn-group float-right">
        <AuthorizeView Roles="Admin">
            <Authorized>
                <a href="Tutorial/Admin" class="btn btn-primary">@localizer["Tutorial.Link.Admin"]</a>
            </Authorized>
        </AuthorizeView>
    </div>
</PageTitleComponent>


<FormComponent Category="category" Mode="SelectedFormMode" OnParametersChanged="HandleParametersChanged" />
@if (CategoryList is null)
{
    <Loader />
}
else
{
    <div class="card card-primary card-outline">
        <div class="card-body">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>@localizer["Category.Id"]</th>
                        <th>@localizer["Category.Title"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Category in CategoryList.OrderBy(c => c.Id))
                    {
                        <tr>
                            <td>@Category.Id</td>
                            <td><b>@Category.Name</b></td>
                            <td>
                                <div class="btn-group float-right">
                                    <a class="btn btn-primary" @onclick="(() => EditCategory(Category))" title="Edit Information">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a class="btn btn-primary" @onclick="(() => DeleteCategory(Category))" title="Delete Information">
                                        <i class="fas fa-trash"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>
    </div>    
}
<ConfirmDialog @ref="deleteConfirmationCategoryRef" ModalName="Delete Modal" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmedCategory" OnClose="DeleteDeclined" ConfirmationMessage="Sure to Delete Tutorial Category?" />

@code {
    private IEnumerable<TutorialCategory> CategoryList;
    private TutorialCategory category { get; set; } = new();
    private FormMode SelectedFormMode { get; set; } = FormMode.Add;
    protected ConfirmDialog deleteConfirmationCategoryRef { get; set; }
    private bool deleteClicked { get; set; } = false;
    private TutorialCategory SelectedCategory { get; set; } = new();
    private User currentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        await GetCategoryList();
    }
    private async Task GetCategoryList()
    {
        CategoryList = await CategoryService.GetCategoryList();
    }
    private async Task ViewCategory(TutorialCategory category)
    {
        this.category = category;
        SelectedFormMode = FormMode.Details;
    }
    private async Task EditCategory(TutorialCategory category)
    {
        this.category = category;
        SelectedFormMode = FormMode.Edit;
    }
    private async Task DeleteCategory(TutorialCategory Category)
    {
        deleteClicked = true;
        SelectedCategory = Category;
        await deleteConfirmationCategoryRef.Show();
    }
    private async Task DeleteConfirmedCategory()
    {
        Notification notification = new();
        if (await CategoryService.DeleteCategory(SelectedCategory, currentUser))
        {
            notification.Type = Notification.NotificationType.Success;
            notification.Message = "Tutorial Category Deletion Successful";
        }
        else
        {
            notification.Type = Notification.NotificationType.Failure;
            notification.Message = "Error: Tutorial Category Deletion";
        }

        appState.SetNotification(this, notification);
        await GetCategoryList();
    }
    private void DeleteDeclined()
    {
        deleteClicked = false;
    }
    private async Task HandleParametersChanged(bool parameter)
    {
        if (parameter)
        {
            await GetCategoryList();
        }
    }
}
