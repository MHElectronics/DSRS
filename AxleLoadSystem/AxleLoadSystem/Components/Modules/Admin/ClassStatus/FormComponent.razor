@using System
@using BOL
@inject IClassStatusService classStatusService
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.Reports> localizer

<PageTitleComponent Title="@localizer["ReportConfiguration.ClassStatus"]"></PageTitleComponent>

@if (classStatus is null)
{
    <Loader/>
}
else
{
    <EditForm Model="@classStatus" OnValidSubmit=@OnValidSubmit OnInvalidSubmit="@OnInvalidSubmit">
        <DataAnnotationsValidator />
        <div class="card card-primary card-outline">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 col-sm-12">
                        <div class="form-group">
                            @if (Mode == FormMode.Add)
                            {
                                <label for="id" class="form-label">@localizer["ClassStatus.Id"]</label>
                                <input type="number" @bind="classStatus.Id" required class="form-control" placeholder="Class Status Id" id="id" min="1" />
                                <ValidationMessage For="() => classStatus.Id" />
                            }
                            else
                            {
                                <label for="id" class="form-label">@localizer["ClassStatus.Id"]</label>
                                <label class="form-control">@classStatus.Id</label>
                            }
                        </div>
                    </div>
                    <div class="col-md-6 col-sm-12">
                        <div class="form-group">
                            @if (Mode == FormMode.Details)
                            {
                                <label for="name" class="form-label">@localizer["ClassStatus.Name"]</label>
                                <label class="form-control">@classStatus.Name</label>
                            }
                            else
                            {
                                <label for="name" class="form-label">@localizer["ClassStatus.Name"]</label>
                                <input type="text" @bind="classStatus.Name" required class="form-control" placeholder="Name of classStatus" id="name" />
                                <ValidationMessage For="() => classStatus.Name" />
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="col-md-4 col-sm-12 btn-group">
                    @if (Mode == FormMode.Details)
                    {
                        string editLink = "/classstatus/edit/" + classStatus.Id;
                        <NavLink class="btn btn-primary" href="@editLink">@localizerResource["Button.Edit"]</NavLink>
                    }
                    else
                    {
                        <button class="btn btn-primary" type="submit">@(Mode == FormMode.Add ? @localizerResource["Button.Save"] : @localizerResource["Button.Update"])</button>
                    }
                    <NavLink class="btn btn-primary" href="/classstatus">@localizerResource["Button.Cancel"]</NavLink>
                        @if (!string.IsNullOrEmpty(ValidationSummary))
                    {
                        <label class="error">@ValidationSummary</label>
                    }
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public ClassStatus classStatus { get; set; } = new();
    [Parameter]
    public FormMode Mode { get; set; } = FormMode.Details;
    private User currentUser { get; set; }
    private bool isSuccess { get; set; }
    string ValidationSummary;

    protected override async Task OnInitializedAsync()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
    }

    void OnInvalidSubmit()
    {
        ValidationSummary = "Please enter valid data";
    }
    async Task OnValidSubmit(EditContext editContext)
    {
        ValidationSummary = "";

        if (Mode == FormMode.Edit)
        {
            await classStatusService.UpdateClassStatus(classStatus, currentUser);
            ValidationSummary = "Class Status Updated Successfully";
        }
        else
        {
            isSuccess = await classStatusService.InsertClassStatus(classStatus, currentUser);
            if (isSuccess)
            {
                ValidationSummary = "New Class Status added";
            }
            else
            {
                ValidationSummary = "New Class Status added failed";
            }
        }
    }
}
