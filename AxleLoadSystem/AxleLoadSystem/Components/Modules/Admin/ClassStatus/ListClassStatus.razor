@using System
@using BOL
@inject IClassStatusService classStatusService
@inject IAppState appState
@inject AuthenticationStateProvider authStateProvider
@inject IUserActivityService userActivityService
@inject IStringLocalizer<Locales.Reports> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource

<PageTitleComponent Title="@localizer["ReportConfiguration.ClassStatusList"]">
    <NavLink class="btn btn-primary pull-right" href="/classstatus/new" title="Add New">
        <i class="fa fa-plus"></i> @localizerResource["Button.AddNew"]
    </NavLink>
</PageTitleComponent>

@if (ClassStatusList is null)
{
    <Loader />
}
else
{
    <div class="card card-primary card-outline">
        <div class="card-body">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>@localizer["Id"]</th>
                        <th>@localizer["ClassStatus.Title"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var classStatus in ClassStatusList.OrderBy(c => c.Id))
                    {
                        <tr>
                            <td>@classStatus.Id</td>
                            <td><b>@classStatus.Name</b></td>
                            <td>
                                <div class="btn-group float-right">
                                    <a class="btn btn-primary" href="@("/classstatus/details/" + classStatus.Id)" title="Details Information">
                                        <i class="fas fa-info"></i>
                                    </a>
                                    <a class="btn btn-primary" href="@("/classstatus/edit/" + classStatus.Id)" title="Edit Information">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a class="btn btn-primary" @onclick="(() => DeleteClassStatus(classStatus))" title="Delete Information">
                                        <i class="fas fa-trash"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
        </div>
    </div>    
}
<ConfirmDialog @ref="deleteConfirmationClassStatusRef" ModalName="Delete Modal" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmedClassStatus" OnClose="DeleteDeclined" ConfirmationMessage="Sure to Delete Class Status?" />

@code {
    private IEnumerable<ClassStatus> ClassStatusList;
    protected ConfirmDialog deleteConfirmationClassStatusRef { get; set; }
    private bool deleteClicked { get; set; } = false;
    private ClassStatus SelectedClassStatus { get; set; } = new();
    private User currentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        await GetClassStatusList();
    }
    private async Task GetClassStatusList()
    {
        ClassStatusList = await classStatusService.GetClassStatusList();
    }
    private async Task DeleteClassStatus(ClassStatus classStatus)
    {
        deleteClicked = true;
        SelectedClassStatus = classStatus;
        await deleteConfirmationClassStatusRef.Show();
    }
    private async Task DeleteConfirmedClassStatus()
    {
        Notification notification = new();
        if (await classStatusService.DeleteClassStatus(SelectedClassStatus.Id))
        {
            notification.Type = Notification.NotificationType.Success;
            notification.Message = "Class Status Deletion Successful";
            await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = notification.Message, Activity = LogActivity.Delete });
        }
        else
        {
            notification.Type = Notification.NotificationType.Failure;
            notification.Message = "Error Class Status Deletion";
        }

        appState.SetNotification(this, notification);
        await GetClassStatusList();
    }
    private void DeleteDeclined()
    {
        deleteClicked = false;
    }
}
