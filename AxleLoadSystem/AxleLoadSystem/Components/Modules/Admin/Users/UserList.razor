@using System
@using BOL
@using Services
@inject IUserService userService
@rendermode InteractiveServer

<PageTitle>List of User</PageTitle>
<h1>List of User</h1>

<NavLink class="btn btn-primary pull-right" href="/user/new" title="Add New">
    <i class="fa fa-plus"></i> Add New
</NavLink>
@if (users is null)
{
    <Loader />
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Email</th>
                <th>Name</th>
                <th>Role(s)</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users.OrderBy(c => c.Id))
            {
                <tr>
                    <td><b>@user.Email</b></td>
                    <td><b>@user.Name</b></td>
                    <td><b>@user.Role</b></td>
                    <td>
                        <a class="waves-effect" href="@("/user/details/" + user.Id)" title="Details Information">
                            <i class="fa fa-info"></i>
                        </a>
                    </td>
                    <td>
                        <a class="waves-effect" href="@("/user/edit/" + user.Id)" title="Edit Information">
                            <i class="fa fa-edit"></i>
                        </a>
                    </td>
                    <td>
                        <a class="waves-effect" @onclick="(() => DeleteUser(user))">
                            <i class="fa fa-trash"></i>
                        </a>
                    </td>
                </tr>
            }

        </tbody>
    </table>

    <ConfirmDialog @ref="deleteConfirmationRef" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmed" OnClose="DeleteDeclined" ConfirmationMessage="Sure to Delete User?" />

}
@code {
    private IEnumerable<User> users;
    protected ConfirmDialog deleteConfirmationRef { get; set; }
    private User SelectedUser { get; set; }
    private bool deleteClicked { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await GetUserList();
    }
    private async Task GetUserList()
    {
        users = await userService.GetUsers();
    }

    private async Task DeleteUser(User user)
    {
        deleteClicked = true;
        SelectedUser = user;
        await deleteConfirmationRef.Show();
    }
    private async Task DeleteConfirmed()
    {
        await userService.Delete(SelectedUser);
        await GetUserList();
    }
    private void DeleteDeclined()
    {
        deleteClicked = false;
    }
}
