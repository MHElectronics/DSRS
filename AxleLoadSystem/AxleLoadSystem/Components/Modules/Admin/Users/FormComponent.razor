@using System
@using BOL
@using Services
@rendermode InteractiveServer
@inject IUserService userService
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.User> localizer

@if (user is null)
{
    <Loader />
}
else
{
    <EditForm Model="@user" OnValidSubmit=@OnValidSubmit OnInvalidSubmit="@OnInvalidSubmit" FormName="Users" method="post">
        <DataAnnotationsValidator />

        <div class="row">
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    @if (Mode == FormMode.Details)
                    {
                        <label for="name" class="form-label">@localizer["Email"]</label>
                        <label class="form-control">@user.Email</label>
                    }
                    else
                    {
                        <label for="name" class="form-label">@localizer["Email"]</label>
                        <input type="email" @bind-value="user.Email" required class="form-control" placeholder="Email" id="name" />
                        <ValidationMessage For="() => user.Email" />
                    }
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    @if (Mode == FormMode.Details)
                    {
                        <label for="name" class="form-label">@localizer["Name of User"]</label>
                        <label class="form-control">@user.Name</label>
                    }
                    else
                    {
                        <label for="name" class="form-label">@localizer["Name of User"]</label>
                        <input type="text" @bind-value="user.Name" required class="form-control" placeholder="Name of user" id="name" maxlength="50" />
                        <ValidationMessage For="() => user.Name" />
                    }
                </div>
            </div>
            <div class="col-md-6 col-sm-12">
                <div class="form-group">
                    @if (Mode == FormMode.Details)
                    {
                        <label for="name" class="form-label">@localizer["Role"]</label>
                        <label class="form-control">@user.Role</label>
                    }
                    else
                    {
                        <label for="Role" class="form-label">@localizer["Role"]</label>
                        <div class="form-control">
                            <div class="col-12">
                                @foreach (var item in Enum.GetValues(typeof(UserRole)))
                                {
                                    string value = item.ToString() ?? "";
                                    bool check = selectedRoles.Contains(value);
                                    <div class="icheck-primary d-inline">
                                        @* <input type="checkbox" id="checkboxPrimary1" checked=""> *@
                                        <input type="checkbox" id="checkId@(value)" checked="@check" @onchange="eventArgs => { CheckboxClicked(value, eventArgs.Value); }" />
                                        <label for="checkId@(value)">@value</label>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
            @if (Mode == FormMode.Add)
            {
                <div class="col-md-6 col-sm-12">
                    <div class="form-group">
                        <label for="name" class="form-label">@localizer["Password"]</label>
                        <input type="password" @bind-value="user.Password" required class="form-control" placeholder="Password" id="pass" maxlength="50" />
                        <ValidationMessage For="() => user.Password" />
                    </div>
                </div>
                <div class="col-md-6 col-sm-12">
                    <div class="form-group">
                        <label for="name" class="form-label">@localizer["ConfirmPassword"]</label>
                        <input type="password" @bind-value="confirmPassword" required class="form-control" placeholder="Confirm Password" id="cpass" maxlength="50" />
                        <ValidationMessage For="() => confirmPassword" />
                    </div>
                </div>
            }
        </div>
        <div class="row">
            <div class="col-md-12 col-sm-12">
                <div class="btn-group">
                    @if (Mode == FormMode.Details)
                    {
                        string editLink = "/user/edit/" + user.Id;
                        <NavLink class="btn btn-primary" href="@editLink">@localizerResource["Button.Edit"]</NavLink>
                    }
                    else
                    {
                        <button class="btn btn-primary" type="submit">@(Mode == FormMode.Add ? @localizerResource["Button.Save"] : @localizerResource["Button.Update"])</button>
                    }
                    <NavLink class="btn btn-primary" href="/user">@localizerResource["Button.Back"]</NavLink>
                    <CustomNotification Notification="notification" />
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    // [SupplyParameterFromForm(FormName = "Users")]
    public User user { get; set; } = new();
    [Parameter]
    public FormMode Mode { get; set; } = FormMode.Details;
    private List<string> selectedRoles = new();
    private Notification notification { get; set; } = new();
    [Required]
    private string confirmPassword { get; set; }

    protected override void OnParametersSet()
    {
        if (user is not null && !string.IsNullOrEmpty(user.Role))
        {
            selectedRoles = user.Role.Split(',').ToList();
        }
    }

    void OnInvalidSubmit()
    {
        notification.Type = Notification.NotificationType.Warning;
        notification.Message = "Please enter valid data";
    }
    async Task OnValidSubmit(EditContext editContext)
    {
        notification = new();

        int count = selectedRoles.Count();
        if (count == 0)
        {
            notification.Type = Notification.NotificationType.Warning;
            notification.Message = "Select atleast one role";
            return;
        }

        string role = "";
        foreach (string r in selectedRoles)
        {
            role += r + ",";
        }

        role = role.TrimEnd(',');
        user.Role = role;

        if (Mode == FormMode.Edit)
        {
            await userService.UpdateUser(user);
            notification.Type = Notification.NotificationType.Success;
            notification.Message = "User Updated Successfully";
        }
        else
        {
            await userService.InsertUser(user);
            notification.Type = Notification.NotificationType.Success;
            notification.Message = "User Added Successfully";
        }
    }
    public void CheckboxClicked(string aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!selectedRoles.Contains(aSelectedId))
            {
                selectedRoles.Add(aSelectedId);
            }
        }
        else
        {
            if (selectedRoles.Contains(aSelectedId))
            {
                selectedRoles.Remove(aSelectedId);
            }
        }
    }
}
