@page "/stationaccess"
@inject AuthenticationStateProvider authStateProvider
@inject IUserService userService
@inject IStationService stationService
@inject IStationAccessService stationAccessService
@inject IAppState appState
@inject IUserActivityService userActivityService
@inject IStringLocalizer<Locales.Station> localizer
@inject IStringLocalizer<Locales.Resource> localizerResource

<PageTitleComponent Title="@localizer["StationAccess"]"></PageTitleComponent>

<EditForm EditContext="@editContext" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (userId > 0 && users is not null && stations is not null)
    {
        <div class="card card-primary card-outline">
            <div class="card-header">
                <label for="stations" class="form-label">Access for: @users.FirstOrDefault(u => u.Id == userId).Name</label>
            </div>
            <div class="card-body">
                <div class="checkbox-grid">
                    @foreach (Station station in stations)
                    {
                        int value = station.StationId;
                        bool check = selectedStations.Any(s => s.StationId == value);
                        <div class="icheck-primary d-inline checkbox-item">
                            <input type="checkbox" id="checkId@(value)" checked="@check" @onchange="eventArgs => { CheckboxClicked(value, eventArgs.Value); }" />
                            <label for="checkId@(station.StationId)" class="ms-2">&nbsp; @station.StationName </label>
                        </div>
                    }
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group btn btn-group">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <span class="btn btn-primary" @onclick="@(() => userId = 0)">@localizerResource["Button.Cancel"]</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</EditForm>

<div class="card card-primary card-outline">
    <div class="card-body">
        @if (stations is null)
        {
            <Loader />
        }
        else if (stations.Count() == 0)
        {
            <p>No Station Found</p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>@localizer["Email"]</th>
                        <th>@localizer["UserName"]</th>
                        <th>@localizer["StationNames"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (User user in users)
                    {
                        string stationNames = String.Join(", ", stations.Where(s => allStationAccessList.Any(sa => sa.StationId == s.StationId && sa.UserId == user.Id)).Select(sn => sn.StationName));
                        <tr>
                            <td>@user.Email</td>
                            <td>@user.Name</td>
                            <td>@stationNames</td>
                            <th><i class="fa fa-edit" @onclick="@(() => Edit(user.Id))"></i></th>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>
<style>
    .checkbox-grid {
        display: flex;
        flex-wrap: wrap;
        padding: 5px;
        max-width: 100%;
        box-sizing: border-box; 
        justify-content: space-between; 
    }

    .checkbox-item {
        width: 200px; 
        margin-bottom: 5px; 
        box-sizing: border-box; 
    }
</style>
<ConfirmDialog @ref="submitConfirmationStationAccessRef" ModalName="Confirmation Modal" ConfirmationButtonText="Submit" ConfirmationChanged="SubmitConfirmedStationAccess" OnClose="SubmitDeclined" ConfirmationMessage="Sure to Submit Station Access?" />

@code {
    private IEnumerable<User?> users { get; set; }
    private IEnumerable<Station?> stations { get; set; }
    private StationAccess stationAccess { get; set; } = new();
    private IEnumerable<StationAccess> allStationAccessList { get; set; }
    private EditContext editContext = default!;
    private User? currentUser { get; set; }
    protected ConfirmDialog submitConfirmationStationAccessRef { get; set; }

    private bool submitClicked { get; set; } = false;
    public int userId { get; set; } = 0;
    private int stationId { get; set; }
    private bool approve { get; set; }
    private List<Station> selectedStations;

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(stationAccess);
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();

        users = await userService.GetUsers();
        stations = await stationService.Get();

        await this.LoadStationAccess();
    }
    protected async Task LoadStationAccess()
    {
        if (currentUser.HasRole(UserRole.Admin.ToString()))
        {
            allStationAccessList = await stationAccessService.GetStationAccesses();
        }

    }

    private async Task Edit(int selectedUserId)
    {
        userId = selectedUserId;
        IEnumerable<Station> permittedStations = await stationAccessService.GetStationAccessByUserId(userId);
        selectedStations = permittedStations.ToList();
    }
    private async Task OnValidSubmit(EditContext editContext)
    {
        submitClicked = true;
        await submitConfirmationStationAccessRef.Show();
    }
    private async Task SubmitConfirmedStationAccess()
    {
        if (selectedStations is null)
        {
            appState.SetNotification(this, "Station is not selected", Notification.NotificationType.Failure);
            return;
        }

        List<StationAccess> accessList = new();

        foreach (Station item in selectedStations)
        {
            StationAccess access = new StationAccess();
            access.UserId = userId;
            access.EntryTime = DateTime.Now;
            access.EntryBy = currentUser.Id;
            access.StationId = item.StationId;
            accessList.Add(access);
        }

        await stationAccessService.DeleteStationAccessByUserId(userId);

        if (accessList.Any())
        {
            if (await stationAccessService.InsertStationAccess(accessList))
            {
                appState.SetNotification(this, "Station Access Updated", Notification.NotificationType.Success);
                await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = "Station Access Updated", Activity = "Update" });
            }
            else
            {
                appState.SetNotification(this, "Station Access update failed", Notification.NotificationType.Failure);
            }
        }
        else
        {
            appState.SetNotification(this, "Station Access removed", Notification.NotificationType.Success);
            await userActivityService.InsertUserActivity(new UserActivity { UserId = currentUser.Id, DateTime = DateTime.Now, Description = "Station Access removed", Activity = "Delete" });
        }



        if (selectedStations.Count() == 0 && userId > 0)
        {
            await stationAccessService.DeleteStationAccessByUserId(userId);
        }
        await this.LoadStationAccess();
        stationAccess = new();
    }
    private void SubmitDeclined()
    {
        submitClicked = false;
    }
    private void OnInvalidSubmit()
    {
        appState.SetNotification(this, "Please enter valid values", Notification.NotificationType.Failure);
    }
    public void CheckboxClicked(int aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!selectedStations.Any(s=>s.StationId == aSelectedId))
            {
                selectedStations.Add(stations.FirstOrDefault(s=>s.StationId == aSelectedId));
            }
        }
        else
        {
            if (selectedStations.Any(s=> s.StationId == aSelectedId))
            {
                selectedStations.Remove(selectedStations.FirstOrDefault(s => s.StationId == aSelectedId));
            }
        }
    }
}
