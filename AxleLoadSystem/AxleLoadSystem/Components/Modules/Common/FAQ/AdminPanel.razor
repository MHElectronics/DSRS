@page "/FAQAdmin"
@using Syncfusion.Blazor.RichTextEditor
@inject AuthenticationStateProvider authStateProvider
@inject IFAQService faqService
@inject IUserService userService
@inject IAppState appState
@inject ILiveNotificationState liveNotificationState
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IStringLocalizer<Locales.CommonPages> localizerCommon

<PageTitleComponent Title="@localizerCommon["FAQ.AdminFAQ"]">
</PageTitleComponent>
<div class="card card-primary card-outline">
    @if (newQuestion is not null)
    {
        <div class="card-body">
            <EditForm EditContext="@editContext" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>@localizerCommon["FAQ.Question"]</label>
                            <SfRichTextEditor @bind-Value="@newQuestion.Question" @ref="@refQuestion" placeholder="Type your question here..." MaxLength="499">
                                <RichTextEditorToolbarSettings Items="@Tools" />
                            </SfRichTextEditor>
                            <ValidationMessage For="() => newQuestion.Question" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label>@localizerCommon["FAQ.Answer"]</label>
                            <SfRichTextEditor @bind-Value="@newQuestion.Answer" @ref="@refAnswer" placeholder="Type your answer here...">
                                <RichTextEditorToolbarSettings Items="@Tools" />
                            </SfRichTextEditor>
                            <ValidationMessage For="() => newQuestion.Answer" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="inputDisplayOrder">@localizerCommon["DisplayOrder"]</label>
                            <input type="number" class="form-control" min="0" @bind="@newQuestion.DisplayOrder" id="inputDisplayOrder" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <label class="form-label">&nbsp;</label>
                            <div class="icheck-primary d-inline">
                                <input type="checkbox" @bind="@newQuestion.IsPublished" id="chkIsPublished" />
                                <label for="chkIsPublished">@localizerCommon["Publish"]</label>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="form-group">
                            <div class="btn btn-group">
                                <button type="submit" class="btn btn-primary">@localizerResource["Button.Save"]</button>
                                <NavLink class="btn btn-primary" href="/faq">@localizerResource["Button.Cancel"]</NavLink>
                            </div>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(validationSummary))
                    {
                        <label class="text-danger">@validationSummary</label>
                    }
                </div>
            </EditForm>
        </div>
    }

    <div class="card-header card-primary card-outline">
        <h3 class="card-title">@localizerCommon["FAQ.List"]</h3>
    </div> 
    @if (faqs == null)
    {
        <Loader />
    }
    else if (faqs.Count() == 0)
    {
        <p>No Data Found</p>
    }
    else
    {      
        <div class="card-body" id="accordion">
            @foreach (FAQ faq in faqs.OrderBy(f => Convert.ToInt16(f.IsPublished)).ThenBy(f => f.DisplayOrder))
            {
                <div class="card @((string.IsNullOrEmpty(faq.Answer) || !faq.IsPublished) ? "card-danger" : "card-primary")  card-outline">
                    <a class="d-block w-100 collapsed" data-toggle="collapse" href="@("#collapse" + @faq.Id)" aria-expanded="true">
                        <div class="card-header">
                            <h4 class="card-title w-100">
                                @((MarkupString)faq.Question)
                                <i class="fa fa-trash float-right" title="Delete FAQ Information" @onclick="@(() => Delete(faq))"></i>
                                <i class="fa fa-edit float-right" title="Edit FAQ Information" style="margin-right: 10px;" @onclick="@(() => Edit(faq))"></i>
                                <span class="badge badge-primary float-right" style="margin-right: 10px;" title="Display Order">@faq.DisplayOrder </span>
                            </h4>
                        </div>
                    </a>
                    <div id="@("collapse" + @faq.Id)" class="collapse" data-parent="#accordion" style="">
                        <div class="card-body">
                            @if (string.IsNullOrEmpty(faq.Answer))
                            {
                                <p class="info info-danger">No Answer</p>
                            }
                            else
                            {
                                @((MarkupString)faq.Answer)
                            }
                        </div>
                        <div class="card-footer">
                            <span>Submitted on: @faq.EntryTime.ToString("dd MMM yy"), </span>
                            @if (faq.IsPublished)
                            {
                                <span>Published</span>
                            }
                            else
                            {
                                <span class="info info-danger">Not Published</span>
                            }

                            @if (!string.IsNullOrEmpty(faq.Answer) && UserList is not null)
                            {
                                string userName = UserList.Where(u => u.Id == faq.AnswerUserId).FirstOrDefault()?.Name ?? "";
                                <span class="float-right">Answered by: @userName</span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>
<ConfirmDialog @ref="submitConfirmationFAQRef" ModalName="Confirmation Modal" ConfirmationButtonText="Submit" ConfirmationChanged="SubmitConfirmedFAQ" OnClose="SubmitDeclined" ConfirmationMessage="Sure to Submit FAQ?" />
<ConfirmDialog @ref="deleteConfirmationFAQRef" ModalName="Delete Modal" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmedFAQ" OnClose="DeleteDeclined" ConfirmationMessage="Sure to Delete FAQ?" />

@code {
    private List<FAQ>? faqs { get; set; } = null;
    private User? currentUser { get; set; }
    private IEnumerable<User?> UserList { get; set; }
    private EditContext editContext = default!;
    private FAQ newQuestion { get; set; } = new();
    IEnumerable<FAQ> faqList { get; set; } 

    private SfRichTextEditor refQuestion { get; set; }
    private SfRichTextEditor refAnswer { get; set; }

    protected ConfirmDialog submitConfirmationFAQRef { get; set; }
    protected ConfirmDialog deleteConfirmationFAQRef { get; set; }
    private bool submitClicked { get; set; } = false;
    private bool deleteClicked { get; set; } = false;
    private string validationSummary { get; set; }
    private double lengthQuestion { get; set; }
    private double lengthAnswer { get; set; }

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.Print },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(newQuestion);
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        UserList = await userService.GetUsers();
        await this.LoadQuestions();
    }
    protected async Task LoadQuestions()
    {
        if (currentUser.HasRole(UserRole.Admin.ToString()))
        {
            faqList = await faqService.GetFAQs();
        }
        else
        {
            faqList = await faqService.GetByUser(currentUser);
        }
        faqs = faqList.ToList();
    }
    private async Task OnValidSubmit(EditContext editContext)
    {
        newQuestion.AnswerUserId = currentUser.Id;
        lengthQuestion = await this.refQuestion.GetCharCountAsync();
        lengthAnswer = await this.refAnswer.GetCharCountAsync();
        if (string.IsNullOrEmpty(newQuestion.Question) ||  lengthQuestion < 10 )
        {
            validationSummary = "Question is mandatory with minimum 10 characters.";
            return;
        }
        if (string.IsNullOrEmpty(newQuestion.Answer) || lengthAnswer < 10)
        {
            validationSummary = "Answer is mandatory with minimum 10 characters.";
            return;
        }
        validationSummary = "";
        submitClicked = true;
        await submitConfirmationFAQRef.Show();
    }
    private void OnInvalidSubmit()
    {
        appState.SetNotification(this, "Please enter valid values", Notification.NotificationType.Failure);
    }
    private void Edit(FAQ faq)
    {
        newQuestion = faq;
    }
    private async Task Delete(FAQ faq)
    {
        newQuestion = faq;
        deleteClicked = true;
        await deleteConfirmationFAQRef.Show();

    }
    private async Task SubmitConfirmedFAQ()
    {
        if (newQuestion.Id > 0)
        {
            if (await faqService.UpdateFAQ(newQuestion, currentUser))
            {
                newQuestion = new FAQ();
                await this.LoadQuestions();

                appState.SetNotification(this, "FAQ updated", Notification.NotificationType.Success);
            }
            else
            {
                appState.SetNotification(this, "FAQ update failed", Notification.NotificationType.Failure);
            }
        }
        else
        {
            if (await faqService.InsertFAQ(newQuestion, currentUser))
            {
                newQuestion = new FAQ();
                await this.LoadQuestions();

                appState.SetNotification(this, "FAQ submitted", Notification.NotificationType.Success);
            }
            else
            {
                appState.SetNotification(this, "FAQ submission failed", Notification.NotificationType.Failure);
            }
        }

        //Update FAQ Count
        int countNewFAQ = await faqService.GetUnansweredFAQCount();
        await liveNotificationState.SetFAQCount(countNewFAQ);
    }
    private void SubmitDeclined()
    {
        submitClicked = false;
    }
    private async Task DeleteConfirmedFAQ()
    {
        if (await faqService.DeleteFAQ(newQuestion, currentUser))
        {
            await this.LoadQuestions();
            appState.SetNotification(this, "FAQ deleted", Notification.NotificationType.Success);
        }
        else
        {
            appState.SetNotification(this, "FAQ delete failed", Notification.NotificationType.Failure);
        }
    }
    private void DeleteDeclined()
    {
        deleteClicked = false;
    }
}
