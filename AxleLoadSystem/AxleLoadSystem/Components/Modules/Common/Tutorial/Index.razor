@page "/tutorial"
@using BOL.Models
@using Services.Helpers
@inject IDocumentService documentService
@inject IFileStoreHelper fileStoreHelper
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime jsRuntime

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Tutorial Panel</h3>
        <br>
        <div class="btn-group float-right">
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <a href="TutorialAdmin" class="btn btn-primary">Manage Tutorial</a>
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
    <div class="card-body" id="accordion">
        @if (documents == null)
        {
            <Loader />
        }
        else if (documents.Count() == 0)
        {
            <p>No Data Found</p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>File Name</th>
                        <th>File Description</th>
                        <th>Uploaded Time</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Document document in documents.OrderBy(f => f.DisplayOrder))
                    {
                        <tr>
                            <td>@document.FileName</td>
                            <td>@document.Description</td>
                            <td>@document.Date</td>
                            <td class="text-right">     
                                <div class="btn-group">
                                    <span class="btn btn-primary" @onclick="() => SubmitForDownload(document)" title="Download file">
                                    <i class="fa fa-download"></i>
                                    </span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    private List<Document> documents { get; set; } = null;
    private Document document { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var ListDocument = await documentService.GetDocuments();
        documents = ListDocument.ToList();
    }
    private async Task SubmitForDownload(Document document)
    {
        byte[] fileBytes = await fileStoreHelper.GetFileContentAsync(document.FileLocation);
        await jsRuntime.InvokeVoidAsync("downloadFileFromString", document.FileName, Convert.ToBase64String(fileBytes));
    }
}
