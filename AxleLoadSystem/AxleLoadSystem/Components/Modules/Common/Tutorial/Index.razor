@page "/tutorial"
@using BOL.Models
@using Services.Helpers
@inject IDocumentService documentService
@inject IFileStoreHelper fileStoreHelper
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime jsRuntime

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Tutorial Management</h3>
        <br>
         <AuthorizeView Roles="Admin">
            <Authorized>
                <div class="col-md-12 col-sm-12">
                    <label for="description" class="form-label">File Description</label>
                    <input type="text" @bind="document.Description" class="form-control" placeholder="File Description" id="description" min="5" maxlength="300" />
                </div>
                <div class="col-md-12 col-sm-12">
                    <label for="inputfile">Upload Files</label>
                    <InputFile OnChange="@LoadFiles" @key=@(_inputFileId) id="inputfile" class="form-control" disabled="@uploading" multiple />
                    @if (uploading)
                    {
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: @uploadProgress.ToString("0")%" aria-valuenow="@uploadProgress.ToString("0")" aria-valuemin="0" aria-valuemax="100">@uploadProgress.ToString("0")%</div>
                        </div>
                    }
                </div>
                @if (!string.IsNullOrEmpty(Summary))
                {
                    <label class="text-danger">@Summary</label>
                }
            </Authorized>
        </AuthorizeView>
    </div>

    <div class="card-body" id="accordion">
        @if (documents == null)
        {
            <Loader />
        }
        else if (documents.Count() == 0)
        {
            <p>No Data Found</p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>File Name</th>
                        <th>File Description</th>
                        <th>Uploaded Time</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Document document in documents.Where(f => f.IsPublished))
                    {
                        <tr>
                            <td>@document.FileName</td>
                            <td>@document.Description</td>
                            <td>@document.Date</td>
                            <td class="text-right">     
                                <div class="btn-group">
                                    <AuthorizeView Roles="Admin">
                                        <Authorized>
                                            <span class="btn btn-primary" @onclick="() => SubmitForDelete(document)" title="Delete file">
                                                <i class="fa fa-trash"></i>
                                            </span>
                                        </Authorized>
                                    </AuthorizeView>
                                        <span class="btn btn-primary" @onclick="() => SubmitForDownload(document)" title="Download file">
                                        <i class="fa fa-download"></i>
                                    </span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
@*             @foreach (Document document in documents.Where(f => f.IsPublished))
            {
                 <div class="d-flex text-muted" style="display:inline-flex">
                    @if (uploadedFilesImages is not null && uploadedFilesImages.ContainsKey(document.Id))
                    {
                        <img alt="Image" src="@uploadedFilesImages[document.Id]" style="margin-right:5px; max-width:100px; max-height:100px;" />
                    }
                    else
                    {
                        <Loader />
                    }
                    <div class="w-100 pb-3 mb-0 small lh-sm border-bottom">
                        <div class="d-flex justify-content-between align-items-center">
                            <!-- Left Section: Document Information -->
                            <div class="col-md-6 col-sm-12">
                                <p>@document.FileName</p>
                                <p class="d-block">
                                    <b>@document.Description</b>
                                </p>
                                <p>Uploaded: @document.Date.ToString("dd MMM yyyy")</p>
                            </div>

                            <!-- Right Section: Buttons (Delete & Download) -->
                            <div>
                                <AuthorizeView Roles="Admin">
                                    <Authorized>
                                        <div class="btn-group">
                                            <button class="btn btn-primary" @onclick="() => SubmitForDelete(document)" title="Delete file">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                            <button class="btn btn-primary" title="Download file">
                                                <i class="fa fa-download"></i>
                                            </button>
                                        </div>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                        </div>
                    </div>
                </div> 
            } *@
        }
    </div>
</div>
<ConfirmDialog @ref="deleteConfirmationRef" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmed" ConfirmationMessage="Sure to delete?" />

@code {
    private List<Document> documents { get; set; } = null;
    private Document document { get; set; } = new();
    private Document tempDocument { get; set; } = new();
    public Dictionary<int, string> uploadedFilesImages { get; set; }
    protected ConfirmDialog deleteConfirmationRef { get; set; }
    private string _inputFileId = Guid.NewGuid().ToString();
    private int uploadProgress = 0;
    private int maxAllowedFiles = 1;
    private int maxFileSizeMB = 3;
    private bool uploading { get; set; } = false;
    private string Summary;

    protected override async Task OnInitializedAsync()
    {
        var ListDocument = await documentService.GetDocuments();
        documents = ListDocument.ToList();
        // if (documents.Any())
        // {
        //     uploadedFilesImages = new();

        //     foreach (Document doc in documents)
        //     {
        //         if (uploadedFilesImages.ContainsKey(doc.Id) == false)
        //         {
        //             string fileString = fileStoreHelper.GetImageThumb(doc);
        //             uploadedFilesImages.TryAdd(doc.Id, fileString);
        //         }
        //     }
        // }
    }
    private async Task SubmitForDownload(Document document)
    {
        byte[] fileBytes = await fileStoreHelper.GetFileContentAsync(document.FileLocation);
        await jsRuntime.InvokeVoidAsync("downloadFileFromString", document.FileName, Convert.ToBase64String(fileBytes));
    }
    private async Task SubmitForDelete(Document document)
    {
        tempDocument = document;
        await deleteConfirmationRef.Show();
    }
    private async void DeleteConfirmed()
    {
        fileStoreHelper.DeleteFile(tempDocument.FileLocation);
        await documentService.DeleteDocument(tempDocument);
        documents.Remove(tempDocument);

        tempDocument = new Document();
        this.StateHasChanged();
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IReadOnlyList<IBrowserFile> selectedFiles = e.GetMultipleFiles(e.FileCount);

        Summary = "";

        if (selectedFiles is not null)
        {
            if (selectedFiles.Count() > maxAllowedFiles)
            {
                Summary = "Maximum number of files at a time is " + maxAllowedFiles;
            }
            else
            {
                var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                User currentUser = await customStateProvider.GetAuthorizedUser();
                uploading = true;
                foreach (var file in selectedFiles)
                {
                    if (file.Size > (1024 * 1024 * maxFileSizeMB))
                    {
                        Summary = file.Name + " is too large (max limit 3 mb)";
                    }
                    else if (file.Name.Length > 300)
                    {
                        Summary = "File name too long. Allowed file name lenght in 300. [" + file.Name + "]";
                    }
                    else
                    {
                        document.Date = DateTime.Now;
                        fileStoreHelper.CreateDocumentDirectory(document);
                        string fileLocation = fileStoreHelper.GetNewFileLocation(file.Name, document);
                        int bufferSize = 1024 * 10;

                        //decimal progressPercent = 0;
                        using var readStream = file.OpenReadStream(file.Size);
                        var bytesRead = 0;
                        var totalRead = 0;
                        var buffer = new byte[bufferSize];
                        var byteFullFile = new byte[file.Size];

                        while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                        {
                            if (bytesRead < bufferSize)
                            {
                                buffer = buffer.Chunk(bytesRead).FirstOrDefault();
                            }

                            buffer.CopyTo(byteFullFile, totalRead);
                            totalRead += bytesRead;

                            await fileStoreHelper.UploadFileInPartsAsync(buffer, fileLocation);
                            //progressPercent = Decimal.Divide(totalRead, file.Size);
                            uploadProgress = Convert.ToInt32((double)totalRead / file.Size * 100);
                            StateHasChanged();
                        }

                        //Save file
                        Document Newdocument = new();
                        Newdocument.FileLocation = fileLocation;
                        Newdocument.FileName = file.Name;
                        Newdocument.UserId = currentUser.Id;
                        Newdocument.Date = DateTime.Now;
                        Newdocument.Description = document.Description;
                        Newdocument.IsPublished = true;
                        int documentId = await documentService.InsertDocument(Newdocument);
                        if (documentId > 0)
                        {
                            Newdocument.Id = documentId; 
                            documents.Add(Newdocument);
                            //string strImage = await fileStoreHelper.GetImageContent(document);
                            // string strImage = "data:image/png;base64, " + Convert.ToBase64String(byteFullFile, 0, byteFullFile.Length);

                            //Display file
                            // if (uploadedFilesImages is null)
                            // {
                            //     uploadedFilesImages = new Dictionary<int, string>();
                            // }
                            // uploadedFilesImages.Add(Newdocument.Id, strImage);
                        }
                    }
                }

                _inputFileId = Guid.NewGuid().ToString();
                Summary = "File Uploaded";
                document = new();
                this.StateHasChanged();
                uploading = false;
            }
        }
        else
        {
            Summary = "No File Selected";
        }
    }
}
