@page "/TutorialAdmin"
@using BOL.Models
@using Services.Helpers
@inject IAppState appState
@inject ITutorialService tutorialService
@inject ICategoryService categoryService
@inject IFileStoreHelper fileStoreHelper
@inject ICategoryService categoryService
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Locales.CommonPages> localizerCommon

<PageTitleComponent Title="@localizerCommon["Tutorial.AdminPanel"]">
</PageTitleComponent>
<div class="card card-primary card-outline">
    @if (tutorial is not null && categories is not null)
    {
        <div class="card-body">
            <EditForm EditContext="@editContext" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-md-6 col-sm-12">
                        <label for="categorylist" class="form-label">@localizerCommon["Tutorial.CategoryList"]</label>
                        <select class="form-control" @bind="@tutorial.TutorialCategoryId" id="categorylist">
                            <option value="0">-No Category-</option>
                            @foreach (TutorialCategory category in categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6 col-sm-12">
                        <label for="description" class="form-label">@localizerCommon["Tutorial.Description"]</label>
                        <input type="text" @bind="@tutorial.Description" class="form-control" placeholder="Tutorial Description" id="description" min="5" maxlength="300" />
                    </div>
                    <div class="col-md-6 col-sm-12">
                        <div class="form-group">
                            <label for="inputDisplayOrder">@localizerCommon["DisplayOrder"]</label>
                            <input type="number" class="form-control" @bind="@tutorial.DisplayOrder" min="0" id="inputDisplayOrder" />
                        </div>
                    </div>
                    <div class="col-md-6 col-sm-12">
                        <label for="inputfile">@localizerCommon["Tutorial.Upload"]</label>
                        <InputFile OnChange="@LoadFiles" @key=@(_inputFileId) id="inputfile" class="form-control" disabled="@uploading" multiple />
                        @if (uploading)
                        {
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" style="width: @uploadProgress.ToString("0")%" aria-valuenow="@uploadProgress.ToString("0")" aria-valuemin="0" aria-valuemax="100">@uploadProgress.ToString("0")%</div>
                            </div>
                        }
                    </div>
                    @if (!string.IsNullOrEmpty(Summary))
                    {
                        <label class="text-danger">@Summary</label>
                    }
                    <div class="col-md-12 col-sm-12">
                        <div class="btn btn-group">
                            <button type="submit" class="btn btn-primary">@localizerResource["Button.Save"]</button>
                            <NavLink class="btn btn-primary" href="/tutorial">@localizerResource["Button.Cancel"]</NavLink>
                        </div>
                    </div>
                </div>
            </EditForm> 
        </div>
    }
    <div class="card-header card-primary card-outline">
        <h3 class="card-title">@localizerCommon["Tutorial.List"]</h3>
    </div>
    <div class="card-body">
        @if (tutorials == null && categories is null)
        {
            <Loader />
        }
        else if (tutorials.Count() == 0)
        {
            <p>No Data Found</p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>@localizerCommon["Tutorial.CategoryName"]</th>
                        <th>@localizerCommon["Tutorial.FileName"]</th>
                        <th>@localizerCommon["Tutorial.FileDescription"]</th>
                        <th>@localizerCommon["Tutorial.UploadedTime"]</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Tutorial tutorial in tutorials)
                    {
                        string categoryName = categories.Where(c => c.Id == tutorial.TutorialCategoryId).FirstOrDefault()?.Name;
                        <tr>
                            <td>@categoryName</td>
                            <td>@tutorial.FileName</td>
                            <td>@tutorial.Description</td>
                            <td>@tutorial.Date</td>
                            <td class="text-right">
                                <div class="btn-group">
                                    <span class="btn btn-primary" title="Display Order">
                                        @tutorial.DisplayOrder 
                                    </span>
                                    <span class="btn btn-primary" @onclick="@(() => Edit(tutorial))" title="Edit file">
                                        <i class="fa fa-edit"></i>
                                    </span>
                                    <span class="btn btn-primary" @onclick="() => SubmitForDelete(tutorial)" title="Delete file">
                                        <i class="fa fa-trash"></i>
                                    </span>
                                    <span class="btn btn-primary" @onclick="() => SubmitForDownload(tutorial)" title="Download file">
                                        <i class="fa fa-download"></i>
                                    </span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>
<ConfirmDialog @ref="deleteConfirmationRef" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmed" ConfirmationMessage="Sure to delete?" />

@code
{
    private EditContext editContext = default!;
    private List<Tutorial> tutorials { get; set; } = null;
    private IEnumerable<TutorialCategory> categories { get; set; }
    private Tutorial tutorial { get; set; } = new();
    private Tutorial temptutorial { get; set; } = new();
    protected ConfirmDialog deleteConfirmationRef { get; set; }
    private User currentUser { get; set; }
    private string _inputFileId = Guid.NewGuid().ToString();
    private string previousFileLocation { get; set; } = string.Empty;
    private int uploadProgress = 0;
    private int maxAllowedFiles = 1;
    private int maxFileSizeMB = 30;
    private bool uploading { get; set; } = false;
    private bool editEnable { get; set; } = false;
    private string Summary;
    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(tutorial);
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        categories = await categoryService.GetCategoryList();
        await this.Loadtutorials();
    }
    private async Task Loadtutorials()
    {
        var listtutorials = await tutorialService.GetTutorials();
        tutorials = listtutorials.ToList();
    }
    private void Edit(Tutorial obj)
    {
        editEnable = true;
        previousFileLocation = obj.FileLocation;
        tutorial = obj;
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IReadOnlyList<IBrowserFile> selectedFiles = e.GetMultipleFiles(e.FileCount);

        Summary = "";

        if (selectedFiles is not null)
        {
            if (selectedFiles.Count() > maxAllowedFiles)
            {
                Summary = "Maximum number of files at a time is " + maxAllowedFiles;
            }
            else
            {
                uploading = true;
                foreach (var file in selectedFiles)
                {
                    if (file.Size > (1024 * 1024 * maxFileSizeMB))
                    {
                        Summary = file.Name + " is too large (max limit 3 mb)";
                    }
                    else if (file.Name.Length > 300)
                    {
                        Summary = "File name too long. Allowed file name lenght in 300. [" + file.Name + "]";
                    }
                    else
                    {
                        tutorial.Date = DateTime.Now;
                        tutorial.FileName = file.Name;
                        fileStoreHelper.CreatetutorialDirectory(tutorial);
                        tutorial.FileLocation = fileStoreHelper.GetNewFileLocation(file.Name, tutorial);
                        int bufferSize = 1024 * 10;

                        //decimal progressPercent = 0;
                        using var readStream = file.OpenReadStream(file.Size);
                        var bytesRead = 0;
                        var totalRead = 0;
                        var buffer = new byte[bufferSize];
                        var byteFullFile = new byte[file.Size];

                        while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                        {
                            if (bytesRead < bufferSize)
                            {
                                buffer = buffer.Chunk(bytesRead).FirstOrDefault();
                            }

                            buffer.CopyTo(byteFullFile, totalRead);
                            totalRead += bytesRead;

                            await fileStoreHelper.UploadFileInPartsAsync(buffer, tutorial.FileLocation);
                            //progressPercent = Decimal.Divide(totalRead, file.Size);
                            uploadProgress = Convert.ToInt32((double)totalRead / file.Size * 100);
                            StateHasChanged();
                        }
                    }
                }               
            }
        }
        else
        {
            Summary = "No File Selected";
        }
    }
    private async Task OnValidSubmit(EditContext editContext)
    { 
        //Save file
        tutorial.UserId = currentUser.Id;
        tutorial.Date = DateTime.Now;
        if (editEnable && !string.IsNullOrEmpty(previousFileLocation))
        {
            if (!string.Equals(tutorial.FileLocation, previousFileLocation, StringComparison.OrdinalIgnoreCase))
            {
                fileStoreHelper.DeleteFile(previousFileLocation);
            }
            if (await tutorialService.UpdateTutorial(tutorial, currentUser))
            {
                await this.Loadtutorials();
            }
            uploading = false;
            appState.SetNotification(this, "Tutorial Update Successful", Notification.NotificationType.Success);
        }
        else
        {
            int tutorialId = await tutorialService.InsertTutorial(tutorial, currentUser);
            if (tutorialId > 0)
            {
                tutorial.Id = tutorialId;
                tutorials.Add(tutorial);
            }
            uploading = false;
            appState.SetNotification(this, "Tutorial Upload Successful", Notification.NotificationType.Success);
        } 
        tutorial = new();
        previousFileLocation = "";
        _inputFileId = Guid.NewGuid().ToString();
    }
    private void OnInvalidSubmit()
    {
        appState.SetNotification(this, "Please enter valid values", Notification.NotificationType.Failure);
    }
    private async Task SubmitForDownload(Tutorial tutorial)
    {
        byte[] fileBytes = await fileStoreHelper.GetFileContentAsync(tutorial.FileLocation);
        await jsRuntime.InvokeVoidAsync("downloadFileFromString", tutorial.FileName, Convert.ToBase64String(fileBytes));
    }
    private async Task SubmitForDelete(Tutorial tutorial)
    {
        temptutorial = tutorial;
        await deleteConfirmationRef.Show();
    }
    private async void DeleteConfirmed()
    {
        fileStoreHelper.DeleteFile(temptutorial.FileLocation);
        await tutorialService.DeleteTutorial(temptutorial, currentUser);
        tutorials.Remove(temptutorial);

        appState.SetNotification(this, "Tutorial Delete Successful", Notification.NotificationType.Success);
        temptutorial = new Tutorial();
        this.StateHasChanged();
    }
}