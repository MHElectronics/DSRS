@page "/TutorialAdmin"
@using BOL.Models
@using Services.Helpers
@inject IAppState appState
@inject IDocumentService documentService
@inject IFileStoreHelper fileStoreHelper
@inject AuthenticationStateProvider authStateProvider
@inject IStringLocalizer<Locales.Resource> localizerResource
@inject IJSRuntime jsRuntime
@inject IStringLocalizer<Locales.CommonPages> localizerCommon

<PageTitleComponent Title="@localizerCommon["Tutorial.AdminPanel"]">
</PageTitleComponent>
<div class="card card-primary card-outline">
    @if (document is not null)
    {
        <div class="card-body">
            <EditForm EditContext="@editContext" OnValidSubmit="@OnValidSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-md-6 col-sm-12">
                        <label for="description" class="form-label">Tutorial Description</label>
                        <input type="text" @bind="@document.Description" class="form-control" placeholder="Tutorial Description" id="description" min="5" maxlength="300" />
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="inputDisplayOrder">Display Order</label>
                            <input type="number" class="form-control" @bind="@document.DisplayOrder" min="0" id="inputDisplayOrder" />
                        </div>
                    </div>
                    <div class="col-md-12 col-sm-12">
                        <label for="inputfile">Upload Tutorial Files</label>
                        <InputFile OnChange="@LoadFiles" @key=@(_inputFileId) id="inputfile" class="form-control" disabled="@uploading" multiple />
                        @if (uploading)
                        {
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" style="width: @uploadProgress.ToString("0")%" aria-valuenow="@uploadProgress.ToString("0")" aria-valuemin="0" aria-valuemax="100">@uploadProgress.ToString("0")%</div>
                            </div>
                        }
                    </div>
                    @if (!string.IsNullOrEmpty(Summary))
                    {
                        <label class="text-danger">@Summary</label>
                    }
                    <div class="col-md-12 col-sm-12">
                        <div class="btn btn-group">
                            <button type="submit" class="btn btn-primary">Save</button>
                            <NavLink class="btn btn-primary" href="/tutorial">@localizerResource["Button.Cancel"]</NavLink>
                        </div>
                    </div>
                </div>
            </EditForm> 
        </div>
    }
    <div class="card-header card-primary card-outline">
        <h3 class="card-title">@localizerCommon["Tutorial.List"]</h3>
    </div>
    <div class="card-body">
        @if (documents == null)
        {
            <Loader />
        }
        else if (documents.Count() == 0)
        {
            <p>No Data Found</p>
        }
        else
        {
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Tutorial Description</th>
                        <th>File Name</th>
                        <th>Uploaded Time</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Document document in documents)
                    {
                        <tr>
                            <td>@document.Description</td>
                            <td>@document.FileName</td>
                            <td>@document.Date</td>
                            <td class="text-right">
                                <div class="btn-group">
                                    <span class="btn btn-primary" title="Display Order">
                                        @document.DisplayOrder 
                                    </span>
                                    <span class="btn btn-primary" @onclick="@(() => Edit(document))" title="Edit file">
                                        <i class="fa fa-edit"></i>
                                    </span>
                                    <span class="btn btn-primary" @onclick="() => SubmitForDelete(document)" title="Delete file">
                                        <i class="fa fa-trash"></i>
                                    </span>
                                    <span class="btn btn-primary" @onclick="() => SubmitForDownload(document)" title="Download file">
                                        <i class="fa fa-download"></i>
                                    </span>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>
<ConfirmDialog @ref="deleteConfirmationRef" ConfirmationButtonText="Delete" ConfirmationChanged="DeleteConfirmed" ConfirmationMessage="Sure to delete?" />

@code
{
    private EditContext editContext = default!;
    private List<Document> documents { get; set; } = null;
    private Document document { get; set; } = new();
    private Document tempDocument { get; set; } = new();
    protected ConfirmDialog deleteConfirmationRef { get; set; }
    private User currentUser { get; set; }
    private string _inputFileId = Guid.NewGuid().ToString();
    private int uploadProgress = 0;
    private int maxAllowedFiles = 1;
    private int maxFileSizeMB = 300;
    private bool uploading { get; set; } = false;
    private string Summary;
    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(document);
        var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        currentUser = await customStateProvider.GetAuthorizedUser();
        await this.LoadDocuments();
    }
    private async Task LoadDocuments()
    {
        var ListDocuments = await documentService.GetDocuments();
        documents = ListDocuments.ToList();
    }
    private void Edit(Document doc)
    {
        document = doc;
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IReadOnlyList<IBrowserFile> selectedFiles = e.GetMultipleFiles(e.FileCount);

        Summary = "";

        if (selectedFiles is not null)
        {
            if (selectedFiles.Count() > maxAllowedFiles)
            {
                Summary = "Maximum number of files at a time is " + maxAllowedFiles;
            }
            else
            {
                var customStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
                User currentUser = await customStateProvider.GetAuthorizedUser();
                uploading = true;
                foreach (var file in selectedFiles)
                {
                    if (file.Size > (1024 * 1024 * maxFileSizeMB))
                    {
                        Summary = file.Name + " is too large (max limit 3 mb)";
                    }
                    else if (file.Name.Length > 300)
                    {
                        Summary = "File name too long. Allowed file name lenght in 300. [" + file.Name + "]";
                    }
                    else
                    {
                        document.Date = DateTime.Now;
                        document.FileName = file.Name;
                        fileStoreHelper.CreateDocumentDirectory(document);
                        document.FileLocation = fileStoreHelper.GetNewFileLocation(file.Name, document);
                        int bufferSize = 1024 * 10;

                        //decimal progressPercent = 0;
                        using var readStream = file.OpenReadStream(file.Size);
                        var bytesRead = 0;
                        var totalRead = 0;
                        var buffer = new byte[bufferSize];
                        var byteFullFile = new byte[file.Size];

                        while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                        {
                            if (bytesRead < bufferSize)
                            {
                                buffer = buffer.Chunk(bytesRead).FirstOrDefault();
                            }

                            buffer.CopyTo(byteFullFile, totalRead);
                            totalRead += bytesRead;

                            await fileStoreHelper.UploadFileInPartsAsync(buffer, document.FileLocation);
                            //progressPercent = Decimal.Divide(totalRead, file.Size);
                            uploadProgress = Convert.ToInt32((double)totalRead / file.Size * 100);
                            StateHasChanged();
                        }
                    }
                }               
            }
        }
        else
        {
            Summary = "No File Selected";
        }
    }
    private async Task OnValidSubmit(EditContext editContext)
    { 
        //Save file
        document.UserId = currentUser.Id;
        document.Date = DateTime.Now;

        int documentId = await documentService.InsertDocument(document);
        if (documentId > 0)
        {
            document.Id = documentId;
            documents.Add(document);
        }
        document = new();
        _inputFileId = Guid.NewGuid().ToString();
        uploading = false;
        appState.SetNotification(this, "Tutorial Upload Successful", Notification.NotificationType.Success);
    }
    private void OnInvalidSubmit()
    {
        appState.SetNotification(this, "Please enter valid values", Notification.NotificationType.Failure);
    }
    private async Task SubmitForDownload(Document document)
    {
        byte[] fileBytes = await fileStoreHelper.GetFileContentAsync(document.FileLocation);
        await jsRuntime.InvokeVoidAsync("downloadFileFromString", document.FileName, Convert.ToBase64String(fileBytes));
    }
    private async Task SubmitForDelete(Document document)
    {
        tempDocument = document;
        await deleteConfirmationRef.Show();
    }
    private async void DeleteConfirmed()
    {
        fileStoreHelper.DeleteFile(tempDocument.FileLocation);
        await documentService.DeleteDocument(tempDocument);
        documents.Remove(tempDocument);

        tempDocument = new Document();
        this.StateHasChanged();
        appState.SetNotification(this, "Tutorial Delete Successful", Notification.NotificationType.Success);
    }
}