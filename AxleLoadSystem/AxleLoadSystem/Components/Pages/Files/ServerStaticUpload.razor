@page "/fileupload"
@inject IWebHostEnvironment env
@inject IFileService fileService

<PageTitle>File Upload</PageTitle>
@* <div>
    <h4 class="display-4">File Upload</h4>
    <p>Manual File Upload</p>
</div> *@

@if (Message.Length > 0)
{
    <p class="alert alert-secondary" role="alert">@Message</p>
}

<EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit" FormName="Tickets" method="post" enctype="multipart/form-data">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-6">
            @if (stations is not null)
            {
                <select @bind="@file.StationId" class="form-control">
                    @foreach (Station item in stations)
                    {
                        <option value="@item.StationId">@item.StationName</option>
                    }
                </select>
            }
        </div>
        <div class="col-6">
            <InputDate class="form-control mb-4" @bind-Value="@file.Date" />
        </div>
        <div class="col-6">
            <div class="icheck-primary d-inline">
                <input type="radio" name="fileType" id="type1" />
                <label for="type1">Slow Moving Weight</label>
            </div>
            <div class="icheck-primary d-inline">
                <input type="radio" name="fileType" id="type2" />
                <label for="type2">Fast Moving Weight</label>
            </div>
            <div class="icheck-primary d-inline">
                <input type="radio" name="fileType" id="type3" />
                <label for="type3">Fine/Reinforcement</label>
            </div>
        </div>
        <div class="col-6">
            <InputFile class="form-control mb-4" placeholder="Attachment" name="Ticket.Attachments" multiple />
        </div>
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>

</EditForm>

@code {
    [SupplyParameterFromForm(FormName = "Tickets")]
    private ServerStaticTicket Ticket { get; set; } = new();
    private Files file { get; set; } = new Files() { Date = DateTime.Today };
    private List<Station> stations { get; set; }
    private string Message { get; set; } = String.Empty;
    private long maxFileSize = 5120000;
    private EditContext? editContext;

    protected override async Task OnInitializedAsync()
    {
        Ticket ??= new();
        editContext = new(Ticket);
        editContext.SetFieldCssClassProvider(new Helpers.CustomFieldClassProvider());

        //stations = await fileService.Get();
        stations = new List<Station>();
        stations.Add(new Station() { StationId = 1, StationName = "ALCS 1" });
    }


    private async Task HandleValidSubmit()
    {
        try
        {
            foreach (var file in Ticket.Attachments)
            {
                string safeFileName = WebUtility.HtmlEncode(file.FileName);

                // Save file locally
                // var path = Path.Combine(env.ContentRootPath, "images", safeFileName);
                // await using FileStream fs = new(path, FileMode.Create);
                // await file.CopyToAsync(fs);

                // Save to byte
                await using MemoryStream ms = new MemoryStream();
                await file.CopyToAsync(ms);
                byte[] fileBytes = ms.ToArray();

                await fileService.Upload(fileBytes, new Files());
            }

            Ticket = new();
            Message = "File uploaded!";
        }
        catch (Exception e)
        {
            Message = "Error: " + e.Message;
        }
    }

    private class ServerStaticTicket
    {
        [Required]
        public string Title { get; set; } = String.Empty;
        [Required]
        public string Description { get; set; } = String.Empty;

        public IFormFileCollection Attachments { get; set; }
    }
}

