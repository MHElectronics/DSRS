@page "/fileupload"
@using AxleLoadSystem.Models
@inject IWebHostEnvironment env
@inject IFileService fileService
@inject IStationService stationService

<PageTitle>Manual File Upload</PageTitle>

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">Manual File Upload</h3>
    </div>
    <div class="card-body">
        @if (Message.Length > 0)
        {
            <p class="alert alert-secondary" role="alert">@Message</p>
        }

        <EditForm EditContext="@editContext"  OnValidSubmit="@HandleValidSubmit" FormName="formFileUpload" method="post" enctype="multipart/form-data">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-6">
                    <div class="form-group">
                        <label for="file_Date">ALCS</label>
                        <div class="input-group">
                            @if (stations is not null)
                            {
                                <InputSelect @bind-Value="@file.StationId" class="form-control">
                                    @foreach (Station item in stations)
                                    {
                                        <option value="@item.StationId">@item.StationName</option>
                                    }
                                </InputSelect>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="form-group">
                        <label for="file_Date">Date</label>
                        <div class="input-group">
                            <InputDate class="form-control mb-4" @bind-Value="@file.Date" max="@(DateTime.Today.AddDays(-1).ToString("yyyy-MM-dd"))" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="form-group">
                        @* <label>File Type</label> *@
                        <InputRadioGroup @bind-Value="@file.FileType">
                            File Type
                            <br>
                            @foreach (var item in Enum.GetValues(typeof(UploadedFileType)))
                            {
                                int fileType = (int)Enum.Parse(typeof(UploadedFileType), item.ToString());
                                <span class="col-12">
                                    <InputRadio class="btn btn-check" Value="fileType"/> @item
                                </span>   
                            }
                        </InputRadioGroup>
                        @* <div class="input-group">
                            <div class="icheck-primary d-inline">
                                <input type="radio" @onchange="@(() => file.FileType = (int)UploadedFileType.LoadData)" name="fileType" id="type1" />
                                <label for="type1">Load Data </label>
                            </div>
                            <div class="icheck-primary d-inline">
                                <input type="radio" @onchange="@(() => file.FileType = (int)UploadedFileType.FineData)" name="fileType" id="type2" />
                                <label for="type2">Fine/Reinforcement Data</label>
                            </div>
                        </div> *@
                    </div>
                </div>
                <div class="col-6">
                    <div class="form-group">
                        <label for="exampleInputFile">File input</label>
                        <div class="input-group">
                            <div class="custom-file">
                                @* <InputFile class="form-control mb-4" placeholder="Attachment" name="Ticket.Attachments" multiple /> *@
                                <InputFile class="custom-file-input" placeholder="Attachment" name="file.Attachments" accept=".csv" />
                                @* <input type="file" class="custom-file-input" id="exampleInputFile"> *@
                                <label class="custom-file-label" for="exampleInputFile">Choose file</label>
                            </div>
                        </div>
                    </div>
                    
                </div>
                <button class="btn btn-primary" type="submit" disabled="@(!isFileSelected)">Submit</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm(FormName = "formFileUpload")]
    private FileUploadModel file { get; set; } = new FileUploadModel() { Date = DateTime.Today.AddDays(-1) };
    private IEnumerable<Station> stations { get; set; }
    private string Message { get; set; } = String.Empty;
    private long maxFileSize = 5120000;
    private EditContext? editContext;
    private bool isFileSelected { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        editContext = new(file);
        editContext.SetFieldCssClassProvider(new Helpers.CustomFieldClassProvider());

        stations = await stationService.Get();
    }

    private void FileSelected(InputFileChangeEventArgs e)
    {
        isFileSelected = true;
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            foreach (var uploadfile in file.Attachments)
            {
                string safeFileName = WebUtility.HtmlEncode(file.FileName);

                // Save file locally
                // var path = Path.Combine(env.ContentRootPath, "images", safeFileName);
                // await using FileStream fs = new(path, FileMode.Create);
                // await file.CopyToAsync(fs);

                // Save to byte
                await using MemoryStream ms = new MemoryStream();
                await uploadfile.CopyToAsync(ms);
                byte[] fileBytes = ms.ToArray();

                UploadedFile fileInfo = new();
                fileInfo = file;
                fileInfo.FileName = uploadfile.FileName;
                fileInfo.ManualUpload = true;

                await fileService.Upload(fileBytes, fileInfo);
            }

            Message = "File uploaded!";
            StateHasChanged();
        }
        catch (Exception e)
        {
            Message = "Error: " + e.Message;
        }
    }
}

