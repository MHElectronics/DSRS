@page "/DailyData/{fileId:int}"
@using BOL.Helpers
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IFileService fileService
@inject IStationService stationService
@inject IAxleLoadService loadService
@inject IFinePaymentService fineRepaymentService
@rendermode InteractiveServer

<h3>Daily Data</h3>


@if (File is null || station is null)
{
    <Loader />
    return;
}
else
{
    <span>Station: @station.StationName</span>
    <br />
    <span>File Type: @(Enum.Parse(typeof(UploadedFileType), File.FileType.ToString()))</span>
    <br />
    <span>Date: @File.Date.ToString("dd MMM yyyy")</span>
    <br />
    @if (!string.IsNullOrEmpty(File.Summary))
    {
        <span>Summary:</span>
        <br/>
        @foreach(string item in File.Summary.Split('|'))
        {
            <span>@item</span>
            <br/>
        }
    }
    

    @if (File.FileType == 1)
    {
        <QuickGrid Items="@axleLoadData">
            <PropertyColumn Property="@(l => l.TransactionNumber)" Sortable="true" />
            <PropertyColumn Property="@(l => l.LaneNumber)" Sortable="true" />
            <PropertyColumn Property="@(l => l.DateTime)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(l => l.PlateZone)" Sortable="true" />
            <PropertyColumn Property="@(l => l.PlateSeries)" Sortable="true" />
            <PropertyColumn Property="@(l => l.PlateNumber)" Sortable="true" />
            <PropertyColumn Property="@(l => l.NumberOfAxle)" Sortable="true" />
            <PropertyColumn Property="@(l => l.VehicleSpeed)" Sortable="true" />
            <PropertyColumn Property="@(l => l.Axle1)" Sortable="true" />
            <PropertyColumn Property="@(l => l.Axle2)" Sortable="true" />
            <PropertyColumn Property="@(l => l.Axle3)" Sortable="true" />
            <PropertyColumn Property="@(l => l.Axle4)" Sortable="true" />
            <PropertyColumn Property="@(l => l.Axle5)" Sortable="true" />
            <PropertyColumn Property="@(l => l.Axle6)" Sortable="true" />
            <PropertyColumn Property="@(l => l.Axle7)" Sortable="true" />
            <PropertyColumn Property="@(l => l.AxleRemaining)" Sortable="true" />
            <PropertyColumn Property="@(l => l.GrossVehicleWeight)" Sortable="true" />
            <PropertyColumn Property="@(l => l.IsUnloaded)" Sortable="true" />
            <PropertyColumn Property="@(l => l.IsOverloaded)" Sortable="true" />
            <PropertyColumn Property="@(l => l.OverSizedModified)" Sortable="true" />
            <PropertyColumn Property="@(l => l.Wheelbase)" Sortable="true" />
            <PropertyColumn Property="@(l => l.ReceiptNumber)" Sortable="true" />
            <PropertyColumn Property="@(l => l.BillNumber)" Sortable="true" />
        </QuickGrid>
    }
    else
    {
        <QuickGrid Items="@fineRepaymentData">
            <PropertyColumn Property="@(l => l.TransactionNumber)" Sortable="true" />
            <PropertyColumn Property="@(l => l.DateTime)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(l => l.IsPaid)" Sortable="true" />
            <PropertyColumn Property="@(l => l.FineAmount)" Sortable="true" />
            <PropertyColumn Property="@(l => l.PaymentMethod)" Sortable="true" />
            <PropertyColumn Property="@(l => l.ReceiptNumber)" Sortable="true" />
            <PropertyColumn Property="@(l => l.BillNumber)" Sortable="true" />
            <PropertyColumn Property="@(l => l.WarehouseCharge)" Sortable="true" />
            <PropertyColumn Property="@(l => l.DriversLicenseNumber)" Sortable="true" />
        </QuickGrid>
    }
}

@code {
    [Parameter]
    public int FileId { get; set; }

    private UploadedFile File { get; set; }
    private Station station { get; set; }
    private IQueryable<LoadData> axleLoadData { get; set; }
    private IQueryable<FinePayment> fineRepaymentData { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        File = new() { Id = FileId };
        File = await fileService.GetById(File);
        station = new() { StationId = File.StationId };
        station = await stationService.GetById(station);

        if (File.FileType == 1)
        {
            LoadData loadData = new() { StationId = File.StationId, DateTime = File.Date };
            IEnumerable<LoadData> items = await loadService.Get(loadData);

            axleLoadData = items.AsQueryable();
        }
        else
        {
            FinePayment finePayment = new() { StationId = File.StationId, DateTime = File.Date };
            IEnumerable<FinePayment> items = await fineRepaymentService.Get(finePayment);

            fineRepaymentData = items.AsQueryable();
        }
    }
}
