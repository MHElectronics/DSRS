@page "/csvgenerator"
@using System.Text
@using System.IO
@inject IJSRuntime JS
@rendermode InteractiveServer

<h3>CsvGenerator</h3>
<button type="button" @onclick="Generate">Generate Axle Load CSV</button>

@code {
    private List<string> sb { get; set; } = new();
    private async Task Generate()
    {
        DateTime date = Convert.ToDateTime("1 Apr 2024").Date;
        date = date.AddHours(7);

        Random rnd = new Random(1);

        sb.Add("TransactionNumber,LaneNumber,DateTime,PlateNumber,VehicleId,NumberOfAxle,VehicleSpeed,Axle1,Axle2,Axle3,Axle4,Axle5,Axle6,Axle7,AxleRemaining,GrossVehicleWeight,IsUnloaded,IsOverloaded,OverSizedModified,Wheelbase,Axle1Time,Axle2Time,Axle3Time,Axle4Time,Axle5Time,Axle6Time,Axle7Time");

        for (int i = 1; i <= 1001; i++)
        {
            //Axle1Time,Axle2Time,Axle3Time,Axle4Time,Axle5Time,Axle6Time,Axle7Time
            string line = "TN" + i;
            line += "," + rnd.Next(1, 5);
            line += "," + date.AddSeconds(i * 7).ToString("dd MMM yyyy hh:mm:ss tt");
            line += ",Plate" + rnd.Next(1000, 5000);
            line += ",VI" + rnd.Next(100, 500);
            line += "," + rnd.Next(0, 20);
            line += "," + (rnd.Next(30, 120) + Math.Round(rnd.NextDouble(), 2));

            double axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            double gross = axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            axle = Math.Round(rnd.Next(0, 100) + rnd.NextDouble(), 2);
            gross += axle;
            line += "," + axle;

            //Gross
            line += "," + Math.Round(gross, 2);

            //Booleans
            line += "," + rnd.Next(0, 1);
            line += "," + rnd.Next(0, 1);
            line += "," + rnd.Next(0, 1);
            //Wheelbase
            line += "," + rnd.Next(2, 20);

            line += "," + date.AddSeconds((i * 7) + 3).ToString("dd MMM yyyy hh:mm:ss tt");
            line += "," + date.AddSeconds((i * 7) + 4).ToString("dd MMM yyyy hh:mm:ss tt");
            line += "," + date.AddSeconds((i * 7) + 5).ToString("dd MMM yyyy hh:mm:ss tt");
            line += "," + date.AddSeconds((i * 7) + 6).ToString("dd MMM yyyy hh:mm:ss tt");
            line += "," + date.AddSeconds((i * 7) + 7).ToString("dd MMM yyyy hh:mm:ss tt");
            line += "," + date.AddSeconds((i * 7) + 8).ToString("dd MMM yyyy hh:mm:ss tt");
            line += "," + date.AddSeconds((i * 7) + 9).ToString("dd MMM yyyy hh:mm:ss tt");

            sb.Add(line);
        }

        byte[] bytes = null;
        using (var ms = new MemoryStream())
        {
            using (TextWriter tw = new StreamWriter(ms))
            {
                foreach (string line in sb)
                {
                    tw.WriteLine(line);
                }

                tw.Flush();
                ms.Position = 0;
                //bytes = ms.ToArray();

                using var streamRef = new DotNetStreamReference(stream: ms);
                await JS.InvokeVoidAsync("downloadFileFromStream", "AutoGenerated.csv", streamRef);
            }
        }
    }
}
